// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0_V,
        triangle_2d_y0_V,
        triangle_2d_x1_V,
        triangle_2d_y1_V,
        triangle_2d_x2_V,
        triangle_2d_y2_V,
        triangle_2d_z_V,
        max_min_0_V_read,
        max_min_1_V_read,
        max_min_2_V_read,
        max_min_3_V_read,
        max_min_4_V_read,
        triangle_2d_same_x0_s,
        triangle_2d_same_y0_s,
        triangle_2d_same_x1_s,
        triangle_2d_same_y1_s,
        triangle_2d_same_x2_s,
        triangle_2d_same_y2_s,
        triangle_2d_same_z_V_read,
        max_index_0_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0_V;
input  [7:0] triangle_2d_y0_V;
input  [7:0] triangle_2d_x1_V;
input  [7:0] triangle_2d_y1_V;
input  [7:0] triangle_2d_x2_V;
input  [7:0] triangle_2d_y2_V;
input  [7:0] triangle_2d_z_V;
input  [7:0] max_min_0_V_read;
input  [7:0] max_min_1_V_read;
input  [7:0] max_min_2_V_read;
input  [7:0] max_min_3_V_read;
input  [7:0] max_min_4_V_read;
input  [7:0] triangle_2d_same_x0_s;
input  [7:0] triangle_2d_same_y0_s;
input  [7:0] triangle_2d_same_x1_s;
input  [7:0] triangle_2d_same_y1_s;
input  [7:0] triangle_2d_same_x2_s;
input  [7:0] triangle_2d_same_y2_s;
input  [7:0] triangle_2d_same_z_V_read;
input  [15:0] max_index_0_V_read;
output  [1:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [15:0] ap_return_13;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[15:0] ap_return_13;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] ret_V_25_fu_206_p2;
reg   [17:0] ret_V_25_reg_706;
wire   [16:0] trunc_ln1352_fu_212_p1;
reg   [16:0] trunc_ln1352_reg_711;
wire   [17:0] ret_V_28_fu_244_p2;
reg   [17:0] ret_V_28_reg_716;
wire   [16:0] trunc_ln1352_1_fu_250_p1;
reg   [16:0] trunc_ln1352_1_reg_721;
wire   [0:0] icmp_ln1682_fu_258_p2;
reg   [0:0] icmp_ln1682_reg_726;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln1684_fu_270_p3;
reg   [7:0] select_ln1684_reg_744;
wire   [7:0] select_ln1684_1_fu_276_p3;
reg   [7:0] select_ln1684_1_reg_749;
wire   [7:0] select_ln1684_2_fu_282_p3;
reg   [7:0] select_ln1684_2_reg_754;
wire   [7:0] select_ln1684_3_fu_288_p3;
reg   [7:0] select_ln1684_3_reg_759;
wire   [7:0] select_ln887_fu_324_p3;
reg   [7:0] select_ln887_reg_764;
wire   [7:0] select_ln895_fu_362_p3;
reg   [7:0] select_ln895_reg_771;
wire   [7:0] select_ln887_1_fu_400_p3;
reg   [7:0] select_ln887_1_reg_778;
wire   [7:0] select_ln895_1_fu_438_p3;
reg   [7:0] select_ln895_1_reg_784;
wire    ap_CS_fsm_state3;
wire   [8:0] lhs_V_18_fu_170_p1;
wire   [8:0] rhs_V_13_fu_174_p1;
wire   [8:0] lhs_V_19_fu_184_p1;
wire   [8:0] rhs_V_14_fu_188_p1;
wire   [8:0] ret_V_23_fu_178_p2;
wire   [8:0] ret_V_24_fu_192_p2;
wire  signed [8:0] ret_V_25_fu_206_p0;
wire  signed [8:0] ret_V_25_fu_206_p1;
wire   [8:0] lhs_V_21_fu_216_p1;
wire   [8:0] lhs_V_22_fu_226_p1;
wire   [8:0] ret_V_26_fu_220_p2;
wire   [8:0] ret_V_27_fu_230_p2;
wire  signed [8:0] ret_V_28_fu_244_p0;
wire  signed [8:0] ret_V_28_fu_244_p1;
wire   [17:0] ret_V_29_fu_254_p2;
wire   [0:0] tmp_fu_262_p3;
wire   [0:0] icmp_ln887_2_fu_300_p2;
wire   [0:0] icmp_ln887_3_fu_312_p2;
wire   [0:0] icmp_ln887_fu_294_p2;
wire   [7:0] select_ln70_fu_305_p3;
wire   [7:0] select_ln77_fu_317_p3;
wire   [0:0] icmp_ln895_1_fu_338_p2;
wire   [0:0] icmp_ln895_2_fu_350_p2;
wire   [0:0] icmp_ln895_fu_332_p2;
wire   [7:0] select_ln90_fu_343_p3;
wire   [7:0] select_ln97_fu_355_p3;
wire   [0:0] icmp_ln887_5_fu_376_p2;
wire   [0:0] icmp_ln887_6_fu_388_p2;
wire   [0:0] icmp_ln887_4_fu_370_p2;
wire   [7:0] select_ln70_1_fu_381_p3;
wire   [7:0] select_ln77_1_fu_393_p3;
wire   [0:0] icmp_ln895_4_fu_414_p2;
wire   [0:0] icmp_ln895_5_fu_426_p2;
wire   [0:0] icmp_ln895_3_fu_408_p2;
wire   [7:0] select_ln90_1_fu_419_p3;
wire   [7:0] select_ln97_1_fu_431_p3;
wire   [8:0] lhs_V_fu_450_p1;
wire   [8:0] rhs_V_fu_453_p1;
wire   [8:0] lhs_V_24_fu_462_p1;
wire   [8:0] rhs_V_17_fu_465_p1;
wire   [8:0] ret_V_fu_456_p2;
wire   [8:0] ret_V_30_fu_468_p2;
wire  signed [8:0] mul_ln214_fu_482_p0;
wire  signed [8:0] mul_ln214_fu_482_p1;
wire   [7:0] sub_ln214_fu_446_p2;
wire   [15:0] mul_ln214_fu_482_p2;
wire   [1:0] zext_ln1682_fu_569_p1;
wire   [7:0] select_ln1682_10_fu_550_p3;
wire   [7:0] select_ln1682_8_fu_538_p3;
wire   [7:0] select_ln1682_6_fu_526_p3;
wire   [7:0] select_ln1682_7_fu_532_p3;
wire   [7:0] select_ln1682_9_fu_544_p3;
wire   [7:0] select_ln1682_11_fu_556_p3;
wire   [7:0] select_ln1682_12_fu_562_p3;
wire   [7:0] select_ln1682_5_fu_520_p3;
wire   [7:0] select_ln1682_3_fu_507_p3;
wire   [7:0] select_ln1682_1_fu_494_p3;
wire   [7:0] select_ln1682_fu_488_p3;
wire   [7:0] select_ln1682_2_fu_500_p3;
wire   [15:0] select_ln1682_4_fu_513_p3;
reg   [1:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [15:0] ap_return_13_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_0_preg = 2'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
                        ap_return_0_preg[0] <= zext_ln1682_fu_569_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_10_preg <= select_ln1682_1_fu_494_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_11_preg <= select_ln1682_fu_488_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_12_preg <= select_ln1682_2_fu_500_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_13_preg <= select_ln1682_4_fu_513_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_1_preg <= select_ln1682_10_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_2_preg <= select_ln1682_8_fu_538_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_3_preg <= select_ln1682_6_fu_526_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_4_preg <= select_ln1682_7_fu_532_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_5_preg <= select_ln1682_9_fu_544_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_6_preg <= select_ln1682_11_fu_556_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_7_preg <= select_ln1682_12_fu_562_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_8_preg <= select_ln1682_5_fu_520_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_9_preg <= select_ln1682_3_fu_507_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1682_reg_726 <= icmp_ln1682_fu_258_p2;
        select_ln1684_1_reg_749 <= select_ln1684_1_fu_276_p3;
        select_ln1684_2_reg_754 <= select_ln1684_2_fu_282_p3;
        select_ln1684_3_reg_759 <= select_ln1684_3_fu_288_p3;
        select_ln1684_reg_744 <= select_ln1684_fu_270_p3;
        select_ln887_1_reg_778 <= select_ln887_1_fu_400_p3;
        select_ln887_reg_764 <= select_ln887_fu_324_p3;
        select_ln895_1_reg_784 <= select_ln895_1_fu_438_p3;
        select_ln895_reg_771 <= select_ln895_fu_362_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_25_reg_706 <= ret_V_25_fu_206_p2;
        ret_V_28_reg_716 <= ret_V_28_fu_244_p2;
        trunc_ln1352_1_reg_721 <= trunc_ln1352_1_fu_250_p1;
        trunc_ln1352_reg_711 <= trunc_ln1352_fu_212_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_0 = zext_ln1682_fu_569_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_1 = select_ln1682_10_fu_550_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_10 = select_ln1682_1_fu_494_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_11 = select_ln1682_fu_488_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_12 = select_ln1682_2_fu_500_p3;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_13 = select_ln1682_4_fu_513_p3;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_2 = select_ln1682_8_fu_538_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_3 = select_ln1682_6_fu_526_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_4 = select_ln1682_7_fu_532_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_5 = select_ln1682_9_fu_544_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_6 = select_ln1682_11_fu_556_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_7 = select_ln1682_12_fu_562_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_8 = select_ln1682_5_fu_520_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_9 = select_ln1682_3_fu_507_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign icmp_ln1682_fu_258_p2 = ((trunc_ln1352_reg_711 == trunc_ln1352_1_reg_721) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_300_p2 = ((select_ln1684_3_fu_288_p3 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_312_p2 = ((select_ln1684_1_fu_276_p3 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_370_p2 = ((select_ln1684_2_fu_282_p3 < select_ln1684_fu_270_p3) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_376_p2 = ((select_ln1684_2_fu_282_p3 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_6_fu_388_p2 = ((select_ln1684_fu_270_p3 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_294_p2 = ((select_ln1684_3_fu_288_p3 < select_ln1684_1_fu_276_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_338_p2 = ((select_ln1684_3_fu_288_p3 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_350_p2 = ((select_ln1684_1_fu_276_p3 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_408_p2 = ((select_ln1684_2_fu_282_p3 > select_ln1684_fu_270_p3) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_414_p2 = ((select_ln1684_2_fu_282_p3 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_426_p2 = ((select_ln1684_fu_270_p3 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_332_p2 = ((select_ln1684_3_fu_288_p3 > select_ln1684_1_fu_276_p3) ? 1'b1 : 1'b0);

assign lhs_V_18_fu_170_p1 = triangle_2d_x2_V;

assign lhs_V_19_fu_184_p1 = triangle_2d_y1_V;

assign lhs_V_21_fu_216_p1 = triangle_2d_y2_V;

assign lhs_V_22_fu_226_p1 = triangle_2d_x1_V;

assign lhs_V_24_fu_462_p1 = select_ln895_1_reg_784;

assign lhs_V_fu_450_p1 = select_ln895_reg_771;

assign mul_ln214_fu_482_p0 = ret_V_30_fu_468_p2;

assign mul_ln214_fu_482_p1 = ret_V_fu_456_p2;

assign mul_ln214_fu_482_p2 = ($signed(mul_ln214_fu_482_p0) * $signed(mul_ln214_fu_482_p1));

assign ret_V_23_fu_178_p2 = (lhs_V_18_fu_170_p1 - rhs_V_13_fu_174_p1);

assign ret_V_24_fu_192_p2 = (lhs_V_19_fu_184_p1 - rhs_V_14_fu_188_p1);

assign ret_V_25_fu_206_p0 = ret_V_24_fu_192_p2;

assign ret_V_25_fu_206_p1 = ret_V_23_fu_178_p2;

assign ret_V_25_fu_206_p2 = ($signed(ret_V_25_fu_206_p0) * $signed(ret_V_25_fu_206_p1));

assign ret_V_26_fu_220_p2 = (lhs_V_21_fu_216_p1 - rhs_V_14_fu_188_p1);

assign ret_V_27_fu_230_p2 = (lhs_V_22_fu_226_p1 - rhs_V_13_fu_174_p1);

assign ret_V_28_fu_244_p0 = ret_V_27_fu_230_p2;

assign ret_V_28_fu_244_p1 = ret_V_26_fu_220_p2;

assign ret_V_28_fu_244_p2 = ($signed(ret_V_28_fu_244_p0) * $signed(ret_V_28_fu_244_p1));

assign ret_V_29_fu_254_p2 = (ret_V_25_reg_706 - ret_V_28_reg_716);

assign ret_V_30_fu_468_p2 = (lhs_V_24_fu_462_p1 - rhs_V_17_fu_465_p1);

assign ret_V_fu_456_p2 = (lhs_V_fu_450_p1 - rhs_V_fu_453_p1);

assign rhs_V_13_fu_174_p1 = triangle_2d_x0_V;

assign rhs_V_14_fu_188_p1 = triangle_2d_y0_V;

assign rhs_V_17_fu_465_p1 = select_ln887_1_reg_778;

assign rhs_V_fu_453_p1 = select_ln887_reg_764;

assign select_ln1682_10_fu_550_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_x0_s : select_ln1684_3_reg_759);

assign select_ln1682_11_fu_556_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_y2_s : triangle_2d_y2_V);

assign select_ln1682_12_fu_562_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_z_V_read : triangle_2d_z_V);

assign select_ln1682_1_fu_494_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_min_2_V_read : select_ln887_1_reg_778);

assign select_ln1682_2_fu_500_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_min_4_V_read : sub_ln214_fu_446_p2);

assign select_ln1682_3_fu_507_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_min_1_V_read : select_ln895_reg_771);

assign select_ln1682_4_fu_513_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_index_0_V_read : mul_ln214_fu_482_p2);

assign select_ln1682_5_fu_520_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_min_0_V_read : select_ln887_reg_764);

assign select_ln1682_6_fu_526_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_x1_s : select_ln1684_1_reg_749);

assign select_ln1682_7_fu_532_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_y1_s : select_ln1684_reg_744);

assign select_ln1682_8_fu_538_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_y0_s : select_ln1684_2_reg_754);

assign select_ln1682_9_fu_544_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? triangle_2d_same_x2_s : triangle_2d_x2_V);

assign select_ln1682_fu_488_p3 = ((icmp_ln1682_reg_726[0:0] === 1'b1) ? max_min_3_V_read : select_ln895_1_reg_784);

assign select_ln1684_1_fu_276_p3 = ((tmp_fu_262_p3[0:0] === 1'b1) ? triangle_2d_x0_V : triangle_2d_x1_V);

assign select_ln1684_2_fu_282_p3 = ((tmp_fu_262_p3[0:0] === 1'b1) ? triangle_2d_y1_V : triangle_2d_y0_V);

assign select_ln1684_3_fu_288_p3 = ((tmp_fu_262_p3[0:0] === 1'b1) ? triangle_2d_x1_V : triangle_2d_x0_V);

assign select_ln1684_fu_270_p3 = ((tmp_fu_262_p3[0:0] === 1'b1) ? triangle_2d_y0_V : triangle_2d_y1_V);

assign select_ln70_1_fu_381_p3 = ((icmp_ln887_5_fu_376_p2[0:0] === 1'b1) ? select_ln1684_2_fu_282_p3 : triangle_2d_y2_V);

assign select_ln70_fu_305_p3 = ((icmp_ln887_2_fu_300_p2[0:0] === 1'b1) ? select_ln1684_3_fu_288_p3 : triangle_2d_x2_V);

assign select_ln77_1_fu_393_p3 = ((icmp_ln887_6_fu_388_p2[0:0] === 1'b1) ? select_ln1684_fu_270_p3 : triangle_2d_y2_V);

assign select_ln77_fu_317_p3 = ((icmp_ln887_3_fu_312_p2[0:0] === 1'b1) ? select_ln1684_1_fu_276_p3 : triangle_2d_x2_V);

assign select_ln887_1_fu_400_p3 = ((icmp_ln887_4_fu_370_p2[0:0] === 1'b1) ? select_ln70_1_fu_381_p3 : select_ln77_1_fu_393_p3);

assign select_ln887_fu_324_p3 = ((icmp_ln887_fu_294_p2[0:0] === 1'b1) ? select_ln70_fu_305_p3 : select_ln77_fu_317_p3);

assign select_ln895_1_fu_438_p3 = ((icmp_ln895_3_fu_408_p2[0:0] === 1'b1) ? select_ln90_1_fu_419_p3 : select_ln97_1_fu_431_p3);

assign select_ln895_fu_362_p3 = ((icmp_ln895_fu_332_p2[0:0] === 1'b1) ? select_ln90_fu_343_p3 : select_ln97_fu_355_p3);

assign select_ln90_1_fu_419_p3 = ((icmp_ln895_4_fu_414_p2[0:0] === 1'b1) ? select_ln1684_2_fu_282_p3 : triangle_2d_y2_V);

assign select_ln90_fu_343_p3 = ((icmp_ln895_1_fu_338_p2[0:0] === 1'b1) ? select_ln1684_3_fu_288_p3 : triangle_2d_x2_V);

assign select_ln97_1_fu_431_p3 = ((icmp_ln895_5_fu_426_p2[0:0] === 1'b1) ? select_ln1684_fu_270_p3 : triangle_2d_y2_V);

assign select_ln97_fu_355_p3 = ((icmp_ln895_2_fu_350_p2[0:0] === 1'b1) ? select_ln1684_1_fu_276_p3 : triangle_2d_x2_V);

assign sub_ln214_fu_446_p2 = (select_ln895_reg_771 - select_ln887_reg_764);

assign tmp_fu_262_p3 = ret_V_29_fu_254_p2[32'd17];

assign trunc_ln1352_1_fu_250_p1 = ret_V_28_fu_244_p2[16:0];

assign trunc_ln1352_fu_212_p1 = ret_V_25_fu_206_p2[16:0];

assign zext_ln1682_fu_569_p1 = icmp_ln1682_reg_726;

always @ (posedge ap_clk) begin
    ap_return_0_preg[1] <= 1'b0;
end

endmodule //rasterization1
