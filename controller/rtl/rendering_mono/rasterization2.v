// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flag_V,
        max_min_0_V_read,
        max_min_2_V_read,
        max_min_4_V_read,
        max_index_0_V_read,
        triangle_2d_same_x0_V,
        triangle_2d_same_y0_V,
        triangle_2d_same_x1_V,
        triangle_2d_same_y1_V,
        triangle_2d_same_x2_V,
        triangle_2d_same_y2_V,
        triangle_2d_same_z_V,
        fragment2_x_V_address0,
        fragment2_x_V_ce0,
        fragment2_x_V_we0,
        fragment2_x_V_d0,
        fragment2_y_V_address0,
        fragment2_y_V_ce0,
        fragment2_y_V_we0,
        fragment2_y_V_d0,
        fragment2_z_V_address0,
        fragment2_z_V_ce0,
        fragment2_z_V_we0,
        fragment2_z_V_d0,
        fragment2_color_V_address0,
        fragment2_color_V_ce0,
        fragment2_color_V_we0,
        fragment2_color_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state24 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] flag_V;
input  [7:0] max_min_0_V_read;
input  [7:0] max_min_2_V_read;
input  [7:0] max_min_4_V_read;
input  [15:0] max_index_0_V_read;
input  [7:0] triangle_2d_same_x0_V;
input  [7:0] triangle_2d_same_y0_V;
input  [7:0] triangle_2d_same_x1_V;
input  [7:0] triangle_2d_same_y1_V;
input  [7:0] triangle_2d_same_x2_V;
input  [7:0] triangle_2d_same_y2_V;
input  [7:0] triangle_2d_same_z_V;
output  [8:0] fragment2_x_V_address0;
output   fragment2_x_V_ce0;
output   fragment2_x_V_we0;
output  [7:0] fragment2_x_V_d0;
output  [8:0] fragment2_y_V_address0;
output   fragment2_y_V_ce0;
output   fragment2_y_V_we0;
output  [7:0] fragment2_y_V_d0;
output  [8:0] fragment2_z_V_address0;
output   fragment2_z_V_ce0;
output   fragment2_z_V_we0;
output  [7:0] fragment2_z_V_d0;
output  [8:0] fragment2_color_V_address0;
output   fragment2_color_V_ce0;
output   fragment2_color_V_we0;
output  [7:0] fragment2_color_V_d0;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fragment2_x_V_ce0;
reg fragment2_x_V_we0;
reg fragment2_y_V_ce0;
reg fragment2_y_V_we0;
reg fragment2_z_V_ce0;
reg fragment2_z_V_we0;
reg fragment2_color_V_ce0;
reg fragment2_color_V_we0;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] t_V_4_reg_197;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1714_fu_220_p2;
reg   [0:0] icmp_ln1714_reg_508;
wire   [15:0] zext_ln1371_fu_226_p1;
reg   [15:0] zext_ln1371_reg_519;
wire   [8:0] rhs_V_11_fu_230_p1;
reg   [8:0] rhs_V_11_reg_525;
wire   [8:0] lhs_V_14_fu_234_p1;
reg   [8:0] lhs_V_14_reg_530;
wire   [8:0] rhs_V_12_fu_238_p1;
reg   [8:0] rhs_V_12_reg_535;
wire  signed [17:0] rhs_V_2_fu_248_p1;
reg  signed [17:0] rhs_V_2_reg_540;
wire   [8:0] lhs_V_15_fu_252_p1;
reg   [8:0] lhs_V_15_reg_545;
wire  signed [17:0] rhs_V_3_fu_262_p1;
reg  signed [17:0] rhs_V_3_reg_550;
wire   [8:0] lhs_V_16_fu_266_p1;
reg   [8:0] lhs_V_16_reg_555;
wire  signed [17:0] rhs_V_6_fu_276_p1;
reg  signed [17:0] rhs_V_6_reg_560;
wire   [8:0] lhs_V_17_fu_280_p1;
reg   [8:0] lhs_V_17_reg_565;
wire  signed [17:0] rhs_V_7_fu_290_p1;
reg  signed [17:0] rhs_V_7_reg_570;
wire  signed [17:0] rhs_V_10_fu_300_p1;
reg  signed [17:0] rhs_V_10_reg_575;
wire  signed [17:0] rhs_V_fu_310_p1;
reg  signed [17:0] rhs_V_reg_580;
wire   [0:0] icmp_ln1721_fu_319_p2;
reg   [0:0] icmp_ln1721_reg_585;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter1_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter2_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter3_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter4_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter5_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter6_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter7_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter8_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter9_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter10_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter11_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter12_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter13_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter14_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter15_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter16_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter17_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter18_reg;
reg   [0:0] icmp_ln1721_reg_585_pp0_iter19_reg;
wire   [15:0] k_V_fu_324_p2;
reg   [15:0] k_V_reg_589;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] x_V_fu_344_p2;
reg   [7:0] x_V_reg_594;
reg   [7:0] x_V_reg_594_pp0_iter20_reg;
wire   [7:0] y_V_fu_353_p2;
reg   [7:0] y_V_reg_600;
reg   [7:0] y_V_reg_600_pp0_iter20_reg;
reg   [15:0] t_V_5_reg_606;
reg    ap_enable_reg_pp0_iter20;
wire   [17:0] ret_V_4_fu_373_p2;
reg   [17:0] ret_V_4_reg_613;
wire   [8:0] ret_V_5_fu_381_p2;
reg  signed [8:0] ret_V_5_reg_618;
wire   [17:0] ret_V_11_fu_395_p2;
reg   [17:0] ret_V_11_reg_623;
wire   [8:0] ret_V_12_fu_400_p2;
reg  signed [8:0] ret_V_12_reg_628;
wire   [17:0] ret_V_18_fu_414_p2;
reg   [17:0] ret_V_18_reg_633;
wire   [8:0] ret_V_19_fu_419_p2;
reg  signed [8:0] ret_V_19_reg_638;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_condition_pp0_exit_iter20_state22;
reg    ap_enable_reg_pp0_iter21;
reg   [15:0] ap_phi_mux_t_V_4_phi_fu_201_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] ap_phi_mux_agg_result_V_0_phi_fu_213_p4;
reg   [15:0] agg_result_V_0_reg_209;
wire    ap_CS_fsm_state24;
wire   [63:0] zext_ln544_fu_450_p1;
wire   [0:0] tmp_1_fu_442_p3;
reg   [15:0] t_V_fu_68;
wire   [15:0] i_V_fu_457_p2;
reg   [15:0] ap_sig_allocacmp_t_V_5;
wire   [8:0] ret_V_3_fu_242_p2;
wire   [8:0] ret_V_6_fu_256_p2;
wire   [8:0] ret_V_10_fu_270_p2;
wire   [8:0] ret_V_13_fu_284_p2;
wire   [8:0] ret_V_17_fu_294_p2;
wire   [8:0] ret_V_20_fu_304_p2;
wire   [7:0] grp_fu_330_p1;
wire   [7:0] grp_fu_335_p1;
wire   [7:0] grp_fu_330_p2;
wire   [7:0] ret_V_fu_340_p1;
wire   [7:0] grp_fu_335_p2;
wire   [7:0] trunc_ln209_fu_349_p1;
wire   [8:0] lhs_V_fu_361_p1;
wire   [8:0] ret_V_2_fu_364_p2;
wire  signed [8:0] ret_V_4_fu_373_p0;
wire  signed [8:0] ret_V_4_fu_373_p1;
wire   [8:0] lhs_V_3_fu_378_p1;
wire   [8:0] ret_V_9_fu_386_p2;
wire  signed [8:0] ret_V_11_fu_395_p0;
wire  signed [8:0] ret_V_11_fu_395_p1;
wire   [8:0] ret_V_16_fu_405_p2;
wire  signed [8:0] ret_V_18_fu_414_p0;
wire  signed [8:0] ret_V_18_fu_414_p1;
wire  signed [17:0] grp_fu_467_p3;
wire  signed [17:0] grp_fu_474_p3;
wire   [17:0] or_ln61_fu_433_p2;
wire  signed [17:0] grp_fu_481_p3;
wire   [17:0] or_ln61_1_fu_437_p2;
wire  signed [8:0] grp_fu_467_p0;
wire  signed [8:0] grp_fu_474_p0;
wire  signed [8:0] grp_fu_481_p0;
reg   [15:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_return_preg = 16'd0;
end

rendering_mono_urbkb #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rendering_mono_urbkb_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_4_phi_fu_201_p4),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

rendering_mono_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rendering_mono_udcud_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_4_phi_fu_201_p4),
    .din1(grp_fu_335_p1),
    .ce(1'b1),
    .dout(grp_fu_335_p2)
);

rendering_mono_madEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_mono_madEe_U32(
    .din0(grp_fu_467_p0),
    .din1(ret_V_5_reg_618),
    .din2(ret_V_4_reg_613),
    .dout(grp_fu_467_p3)
);

rendering_mono_madEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_mono_madEe_U33(
    .din0(grp_fu_474_p0),
    .din1(ret_V_12_reg_628),
    .din2(ret_V_11_reg_623),
    .dout(grp_fu_474_p3)
);

rendering_mono_madEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_mono_madEe_U34(
    .din0(grp_fu_481_p0),
    .din1(ret_V_19_reg_638),
    .din2(ret_V_18_reg_633),
    .dout(grp_fu_481_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1721_fu_319_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter20_state22)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter20 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter20_state22))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter19;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_return_preg <= ap_phi_mux_agg_result_V_0_phi_fu_213_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln1714_reg_508 == 1'd1))) begin
        agg_result_V_0_reg_209 <= t_V_5_reg_606;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd0))) begin
        agg_result_V_0_reg_209 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
        t_V_4_reg_197 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1721_reg_585 == 1'd0))) begin
        t_V_4_reg_197 <= k_V_reg_589;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        t_V_fu_68 <= i_V_fu_457_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
        t_V_fu_68 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln1714_reg_508 <= icmp_ln1714_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1721_reg_585 <= icmp_ln1721_fu_319_p2;
        icmp_ln1721_reg_585_pp0_iter1_reg <= icmp_ln1721_reg_585;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1721_reg_585_pp0_iter10_reg <= icmp_ln1721_reg_585_pp0_iter9_reg;
        icmp_ln1721_reg_585_pp0_iter11_reg <= icmp_ln1721_reg_585_pp0_iter10_reg;
        icmp_ln1721_reg_585_pp0_iter12_reg <= icmp_ln1721_reg_585_pp0_iter11_reg;
        icmp_ln1721_reg_585_pp0_iter13_reg <= icmp_ln1721_reg_585_pp0_iter12_reg;
        icmp_ln1721_reg_585_pp0_iter14_reg <= icmp_ln1721_reg_585_pp0_iter13_reg;
        icmp_ln1721_reg_585_pp0_iter15_reg <= icmp_ln1721_reg_585_pp0_iter14_reg;
        icmp_ln1721_reg_585_pp0_iter16_reg <= icmp_ln1721_reg_585_pp0_iter15_reg;
        icmp_ln1721_reg_585_pp0_iter17_reg <= icmp_ln1721_reg_585_pp0_iter16_reg;
        icmp_ln1721_reg_585_pp0_iter18_reg <= icmp_ln1721_reg_585_pp0_iter17_reg;
        icmp_ln1721_reg_585_pp0_iter19_reg <= icmp_ln1721_reg_585_pp0_iter18_reg;
        icmp_ln1721_reg_585_pp0_iter2_reg <= icmp_ln1721_reg_585_pp0_iter1_reg;
        icmp_ln1721_reg_585_pp0_iter3_reg <= icmp_ln1721_reg_585_pp0_iter2_reg;
        icmp_ln1721_reg_585_pp0_iter4_reg <= icmp_ln1721_reg_585_pp0_iter3_reg;
        icmp_ln1721_reg_585_pp0_iter5_reg <= icmp_ln1721_reg_585_pp0_iter4_reg;
        icmp_ln1721_reg_585_pp0_iter6_reg <= icmp_ln1721_reg_585_pp0_iter5_reg;
        icmp_ln1721_reg_585_pp0_iter7_reg <= icmp_ln1721_reg_585_pp0_iter6_reg;
        icmp_ln1721_reg_585_pp0_iter8_reg <= icmp_ln1721_reg_585_pp0_iter7_reg;
        icmp_ln1721_reg_585_pp0_iter9_reg <= icmp_ln1721_reg_585_pp0_iter8_reg;
        x_V_reg_594_pp0_iter20_reg <= x_V_reg_594;
        y_V_reg_600_pp0_iter20_reg <= y_V_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_V_reg_589 <= k_V_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
        lhs_V_14_reg_530[7 : 0] <= lhs_V_14_fu_234_p1[7 : 0];
        lhs_V_15_reg_545[7 : 0] <= lhs_V_15_fu_252_p1[7 : 0];
        lhs_V_16_reg_555[7 : 0] <= lhs_V_16_fu_266_p1[7 : 0];
        lhs_V_17_reg_565[7 : 0] <= lhs_V_17_fu_280_p1[7 : 0];
        rhs_V_10_reg_575 <= rhs_V_10_fu_300_p1;
        rhs_V_11_reg_525[7 : 0] <= rhs_V_11_fu_230_p1[7 : 0];
        rhs_V_12_reg_535[7 : 0] <= rhs_V_12_fu_238_p1[7 : 0];
        rhs_V_2_reg_540 <= rhs_V_2_fu_248_p1;
        rhs_V_3_reg_550 <= rhs_V_3_fu_262_p1;
        rhs_V_6_reg_560 <= rhs_V_6_fu_276_p1;
        rhs_V_7_reg_570 <= rhs_V_7_fu_290_p1;
        rhs_V_reg_580 <= rhs_V_fu_310_p1;
        zext_ln1371_reg_519[7 : 0] <= zext_ln1371_fu_226_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1721_reg_585_pp0_iter19_reg == 1'd0))) begin
        ret_V_11_reg_623 <= ret_V_11_fu_395_p2;
        ret_V_12_reg_628 <= ret_V_12_fu_400_p2;
        ret_V_18_reg_633 <= ret_V_18_fu_414_p2;
        ret_V_19_reg_638 <= ret_V_19_fu_419_p2;
        ret_V_4_reg_613 <= ret_V_4_fu_373_p2;
        ret_V_5_reg_618 <= ret_V_5_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        t_V_5_reg_606 <= ap_sig_allocacmp_t_V_5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1721_reg_585_pp0_iter18_reg == 1'd0))) begin
        x_V_reg_594 <= x_V_fu_344_p2;
        y_V_reg_600 <= y_V_fu_353_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        ap_condition_pp0_exit_iter20_state22 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter20_state22 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln1714_reg_508 == 1'd1))) begin
        ap_phi_mux_agg_result_V_0_phi_fu_213_p4 = t_V_5_reg_606;
    end else begin
        ap_phi_mux_agg_result_V_0_phi_fu_213_p4 = agg_result_V_0_reg_209;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1721_reg_585 == 1'd0))) begin
        ap_phi_mux_t_V_4_phi_fu_201_p4 = k_V_reg_589;
    end else begin
        ap_phi_mux_t_V_4_phi_fu_201_p4 = t_V_4_reg_197;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_return = ap_phi_mux_agg_result_V_0_phi_fu_213_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        ap_sig_allocacmp_t_V_5 = i_V_fu_457_p2;
    end else begin
        ap_sig_allocacmp_t_V_5 = t_V_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment2_color_V_ce0 = 1'b1;
    end else begin
        fragment2_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        fragment2_color_V_we0 = 1'b1;
    end else begin
        fragment2_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment2_x_V_ce0 = 1'b1;
    end else begin
        fragment2_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        fragment2_x_V_we0 = 1'b1;
    end else begin
        fragment2_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment2_y_V_ce0 = 1'b1;
    end else begin
        fragment2_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        fragment2_y_V_we0 = 1'b1;
    end else begin
        fragment2_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment2_z_V_ce0 = 1'b1;
    end else begin
        fragment2_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_1_fu_442_p3 == 1'd0))) begin
        fragment2_z_V_we0 = 1'b1;
    end else begin
        fragment2_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1714_fu_220_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign fragment2_color_V_address0 = zext_ln544_fu_450_p1;

assign fragment2_color_V_d0 = 8'd100;

assign fragment2_x_V_address0 = zext_ln544_fu_450_p1;

assign fragment2_x_V_d0 = x_V_reg_594_pp0_iter20_reg;

assign fragment2_y_V_address0 = zext_ln544_fu_450_p1;

assign fragment2_y_V_d0 = y_V_reg_600_pp0_iter20_reg;

assign fragment2_z_V_address0 = zext_ln544_fu_450_p1;

assign fragment2_z_V_d0 = triangle_2d_same_z_V;

assign grp_fu_330_p1 = zext_ln1371_reg_519;

assign grp_fu_335_p1 = zext_ln1371_reg_519;

assign grp_fu_467_p0 = rhs_V_3_reg_550;

assign grp_fu_474_p0 = rhs_V_7_reg_570;

assign grp_fu_481_p0 = rhs_V_reg_580;

assign i_V_fu_457_p2 = (t_V_5_reg_606 + 16'd1);

assign icmp_ln1714_fu_220_p2 = ((flag_V == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1721_fu_319_p2 = ((ap_phi_mux_t_V_4_phi_fu_201_p4 == max_index_0_V_read) ? 1'b1 : 1'b0);

assign k_V_fu_324_p2 = (ap_phi_mux_t_V_4_phi_fu_201_p4 + 16'd1);

assign lhs_V_14_fu_234_p1 = triangle_2d_same_y1_V;

assign lhs_V_15_fu_252_p1 = triangle_2d_same_x1_V;

assign lhs_V_16_fu_266_p1 = triangle_2d_same_y2_V;

assign lhs_V_17_fu_280_p1 = triangle_2d_same_x2_V;

assign lhs_V_3_fu_378_p1 = y_V_reg_600;

assign lhs_V_fu_361_p1 = x_V_reg_594;

assign or_ln61_1_fu_437_p2 = (or_ln61_fu_433_p2 | grp_fu_481_p3);

assign or_ln61_fu_433_p2 = (grp_fu_474_p3 | grp_fu_467_p3);

assign ret_V_10_fu_270_p2 = (lhs_V_16_fu_266_p1 - lhs_V_14_fu_234_p1);

assign ret_V_11_fu_395_p0 = rhs_V_6_reg_560;

assign ret_V_11_fu_395_p1 = ret_V_9_fu_386_p2;

assign ret_V_11_fu_395_p2 = ($signed(ret_V_11_fu_395_p0) * $signed(ret_V_11_fu_395_p1));

assign ret_V_12_fu_400_p2 = (lhs_V_3_fu_378_p1 - lhs_V_14_reg_530);

assign ret_V_13_fu_284_p2 = (lhs_V_17_fu_280_p1 - lhs_V_15_fu_252_p1);

assign ret_V_16_fu_405_p2 = (lhs_V_fu_361_p1 - lhs_V_17_reg_565);

assign ret_V_17_fu_294_p2 = (rhs_V_12_fu_238_p1 - lhs_V_16_fu_266_p1);

assign ret_V_18_fu_414_p0 = ret_V_16_fu_405_p2;

assign ret_V_18_fu_414_p1 = rhs_V_10_reg_575;

assign ret_V_18_fu_414_p2 = ($signed(ret_V_18_fu_414_p0) * $signed(ret_V_18_fu_414_p1));

assign ret_V_19_fu_419_p2 = (lhs_V_3_fu_378_p1 - lhs_V_16_reg_555);

assign ret_V_20_fu_304_p2 = (rhs_V_11_fu_230_p1 - lhs_V_17_fu_280_p1);

assign ret_V_2_fu_364_p2 = (lhs_V_fu_361_p1 - rhs_V_11_reg_525);

assign ret_V_3_fu_242_p2 = (lhs_V_14_fu_234_p1 - rhs_V_12_fu_238_p1);

assign ret_V_4_fu_373_p0 = rhs_V_2_reg_540;

assign ret_V_4_fu_373_p1 = ret_V_2_fu_364_p2;

assign ret_V_4_fu_373_p2 = ($signed(ret_V_4_fu_373_p0) * $signed(ret_V_4_fu_373_p1));

assign ret_V_5_fu_381_p2 = (lhs_V_3_fu_378_p1 - rhs_V_12_reg_535);

assign ret_V_6_fu_256_p2 = (lhs_V_15_fu_252_p1 - rhs_V_11_fu_230_p1);

assign ret_V_9_fu_386_p2 = (lhs_V_fu_361_p1 - lhs_V_15_reg_545);

assign ret_V_fu_340_p1 = grp_fu_330_p2[7:0];

assign rhs_V_10_fu_300_p1 = $signed(ret_V_17_fu_294_p2);

assign rhs_V_11_fu_230_p1 = triangle_2d_same_x0_V;

assign rhs_V_12_fu_238_p1 = triangle_2d_same_y0_V;

assign rhs_V_2_fu_248_p1 = $signed(ret_V_3_fu_242_p2);

assign rhs_V_3_fu_262_p1 = $signed(ret_V_6_fu_256_p2);

assign rhs_V_6_fu_276_p1 = $signed(ret_V_10_fu_270_p2);

assign rhs_V_7_fu_290_p1 = $signed(ret_V_13_fu_284_p2);

assign rhs_V_fu_310_p1 = $signed(ret_V_20_fu_304_p2);

assign tmp_1_fu_442_p3 = or_ln61_1_fu_437_p2[32'd17];

assign trunc_ln209_fu_349_p1 = grp_fu_335_p2[7:0];

assign x_V_fu_344_p2 = (max_min_0_V_read + ret_V_fu_340_p1);

assign y_V_fu_353_p2 = (max_min_2_V_read + trunc_ln209_fu_349_p1);

assign zext_ln1371_fu_226_p1 = max_min_4_V_read;

assign zext_ln544_fu_450_p1 = t_V_5_reg_606;

always @ (posedge ap_clk) begin
    zext_ln1371_reg_519[15:8] <= 8'b00000000;
    rhs_V_11_reg_525[8] <= 1'b0;
    lhs_V_14_reg_530[8] <= 1'b0;
    rhs_V_12_reg_535[8] <= 1'b0;
    lhs_V_15_reg_545[8] <= 1'b0;
    lhs_V_16_reg_555[8] <= 1'b0;
    lhs_V_17_reg_565[8] <= 1'b0;
end

endmodule //rasterization2
