// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module coloringFB_bot_m_mb6_ram (addr0, ce0, d0, we0, q0, addr1, ce1, d1, we1, q1,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 16;
parameter MEM_SIZE = 65536;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("./coloringFB_bot_m_mb6_ram.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[addr1] <= d1; 
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module coloringFB_bot_m_mb6(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0,
    address1,
    ce1,
    we1,
    d1,
    q1);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd65536;
parameter AddressWidth = 32'd16;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;
output[DataWidth - 1:0] q1;



coloringFB_bot_m_mb6_ram coloringFB_bot_m_mb6_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module coloringFB_bot_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 136'd1;
parameter    ap_ST_fsm_state2 = 136'd2;
parameter    ap_ST_fsm_state3 = 136'd4;
parameter    ap_ST_fsm_state4 = 136'd8;
parameter    ap_ST_fsm_state5 = 136'd16;
parameter    ap_ST_fsm_state6 = 136'd32;
parameter    ap_ST_fsm_state7 = 136'd64;
parameter    ap_ST_fsm_state8 = 136'd128;
parameter    ap_ST_fsm_state9 = 136'd256;
parameter    ap_ST_fsm_state10 = 136'd512;
parameter    ap_ST_fsm_state11 = 136'd1024;
parameter    ap_ST_fsm_state12 = 136'd2048;
parameter    ap_ST_fsm_state13 = 136'd4096;
parameter    ap_ST_fsm_state14 = 136'd8192;
parameter    ap_ST_fsm_state15 = 136'd16384;
parameter    ap_ST_fsm_state16 = 136'd32768;
parameter    ap_ST_fsm_state17 = 136'd65536;
parameter    ap_ST_fsm_state18 = 136'd131072;
parameter    ap_ST_fsm_state19 = 136'd262144;
parameter    ap_ST_fsm_state20 = 136'd524288;
parameter    ap_ST_fsm_state21 = 136'd1048576;
parameter    ap_ST_fsm_state22 = 136'd2097152;
parameter    ap_ST_fsm_state23 = 136'd4194304;
parameter    ap_ST_fsm_state24 = 136'd8388608;
parameter    ap_ST_fsm_state25 = 136'd16777216;
parameter    ap_ST_fsm_state26 = 136'd33554432;
parameter    ap_ST_fsm_state27 = 136'd67108864;
parameter    ap_ST_fsm_state28 = 136'd134217728;
parameter    ap_ST_fsm_state29 = 136'd268435456;
parameter    ap_ST_fsm_state30 = 136'd536870912;
parameter    ap_ST_fsm_state31 = 136'd1073741824;
parameter    ap_ST_fsm_state32 = 136'd2147483648;
parameter    ap_ST_fsm_state33 = 136'd4294967296;
parameter    ap_ST_fsm_state34 = 136'd8589934592;
parameter    ap_ST_fsm_state35 = 136'd17179869184;
parameter    ap_ST_fsm_state36 = 136'd34359738368;
parameter    ap_ST_fsm_state37 = 136'd68719476736;
parameter    ap_ST_fsm_state38 = 136'd137438953472;
parameter    ap_ST_fsm_state39 = 136'd274877906944;
parameter    ap_ST_fsm_state40 = 136'd549755813888;
parameter    ap_ST_fsm_state41 = 136'd1099511627776;
parameter    ap_ST_fsm_state42 = 136'd2199023255552;
parameter    ap_ST_fsm_state43 = 136'd4398046511104;
parameter    ap_ST_fsm_state44 = 136'd8796093022208;
parameter    ap_ST_fsm_state45 = 136'd17592186044416;
parameter    ap_ST_fsm_state46 = 136'd35184372088832;
parameter    ap_ST_fsm_state47 = 136'd70368744177664;
parameter    ap_ST_fsm_state48 = 136'd140737488355328;
parameter    ap_ST_fsm_state49 = 136'd281474976710656;
parameter    ap_ST_fsm_state50 = 136'd562949953421312;
parameter    ap_ST_fsm_state51 = 136'd1125899906842624;
parameter    ap_ST_fsm_state52 = 136'd2251799813685248;
parameter    ap_ST_fsm_state53 = 136'd4503599627370496;
parameter    ap_ST_fsm_state54 = 136'd9007199254740992;
parameter    ap_ST_fsm_state55 = 136'd18014398509481984;
parameter    ap_ST_fsm_state56 = 136'd36028797018963968;
parameter    ap_ST_fsm_state57 = 136'd72057594037927936;
parameter    ap_ST_fsm_state58 = 136'd144115188075855872;
parameter    ap_ST_fsm_state59 = 136'd288230376151711744;
parameter    ap_ST_fsm_state60 = 136'd576460752303423488;
parameter    ap_ST_fsm_state61 = 136'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 136'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 136'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 136'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 136'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 136'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 136'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 136'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 136'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 136'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 136'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 136'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 136'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 136'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 136'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 136'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 136'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 136'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 136'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 136'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 136'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 136'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 136'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 136'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 136'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 136'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 136'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 136'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 136'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 136'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 136'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 136'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 136'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 136'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 136'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 136'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 136'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 136'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 136'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 136'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 136'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 136'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 136'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 136'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 136'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 136'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 136'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 136'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 136'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 136'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 136'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 136'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 136'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 136'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 136'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 136'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 136'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 136'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 136'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 136'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 136'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 136'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 136'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 136'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 136'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 136'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 136'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 136'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 136'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 136'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_pp1_stage0 = 136'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state133 = 136'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_pp2_stage0 = 136'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_pp2_stage1 = 136'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 136'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 136'd43556142965880123323311949751266331066368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_read;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [135:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] counter_V;
reg   [15:0] frame_buffer_V_address0;
reg    frame_buffer_V_ce0;
reg    frame_buffer_V_we0;
reg   [7:0] frame_buffer_V_d0;
wire   [7:0] frame_buffer_V_q0;
reg   [15:0] frame_buffer_V_address1;
reg    frame_buffer_V_ce1;
reg    frame_buffer_V_we1;
wire   [7:0] frame_buffer_V_q1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln515_reg_6898;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln527_reg_6916;
reg   [15:0] t_V_7_reg_2741;
reg   [14:0] indvar_flatten_reg_2752;
reg   [8:0] i_0_reg_2763;
reg   [8:0] j_0_reg_2774;
reg   [31:0] tmp_V_reg_6613;
reg    ap_block_state1;
reg   [15:0] t_V_6_reg_6618;
wire   [0:0] icmp_ln879_fu_2800_p2;
wire   [8:0] i_V_fu_2812_p2;
reg   [8:0] i_V_reg_6630;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_s_fu_2818_p3;
reg   [16:0] tmp_s_reg_6635;
wire   [0:0] icmp_ln887_fu_2806_p2;
wire   [15:0] empty_16_fu_6402_p1;
reg   [15:0] empty_16_reg_6893;
wire    ap_CS_fsm_state130;
wire   [0:0] icmp_ln515_fu_6405_p2;
wire    ap_block_state131_pp1_stage0_iter0;
reg    ap_block_state132_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] i_V_1_fu_6410_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] add_ln700_fu_6454_p2;
wire    ap_CS_fsm_state133;
wire   [0:0] icmp_ln879_2_fu_6459_p2;
wire   [0:0] icmp_ln527_fu_6465_p2;
wire    ap_block_state134_pp2_stage0_iter0;
wire    ap_block_state136_pp2_stage0_iter1;
reg    ap_block_state136_io;
reg    ap_block_pp2_stage0_11001;
wire   [14:0] add_ln527_fu_6471_p2;
reg   [14:0] add_ln527_reg_6920;
reg    ap_enable_reg_pp2_iter0;
wire   [8:0] select_ln531_fu_6491_p3;
reg   [8:0] select_ln531_reg_6925;
wire   [8:0] select_ln531_1_fu_6499_p3;
reg   [8:0] select_ln531_1_reg_6930;
wire   [7:0] trunc_ln528_fu_6519_p1;
reg   [7:0] trunc_ln528_reg_6937;
reg   [7:0] frame_buffer_V_load_reg_6953;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state135_pp2_stage1_iter0;
wire    ap_block_pp2_stage1_11001;
reg   [7:0] frame_buffer_V_load_1_reg_6958;
wire   [8:0] j_fu_6591_p2;
reg   [8:0] j_reg_6973;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state131;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state134;
wire    ap_block_pp2_stage1_subdone;
reg   [8:0] t_V_reg_2730;
wire    ap_CS_fsm_state129;
reg   [14:0] ap_phi_mux_indvar_flatten_phi_fu_2756_p4;
reg   [8:0] ap_phi_mux_i_0_phi_fu_2767_p4;
reg   [8:0] ap_phi_mux_j_0_phi_fu_2778_p4;
reg   [15:0] counter_V_new_0_reg_2785;
wire    ap_CS_fsm_state137;
wire   [63:0] zext_ln321_fu_2826_p1;
wire   [63:0] tmp_258_fu_2837_p3;
wire   [63:0] tmp_259_fu_2851_p3;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_260_fu_2865_p3;
wire   [63:0] tmp_261_fu_2879_p3;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_262_fu_2893_p3;
wire   [63:0] tmp_263_fu_2907_p3;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_264_fu_2921_p3;
wire   [63:0] tmp_265_fu_2935_p3;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_266_fu_2949_p3;
wire   [63:0] tmp_267_fu_2963_p3;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_268_fu_2977_p3;
wire   [63:0] tmp_269_fu_2991_p3;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_270_fu_3005_p3;
wire   [63:0] tmp_271_fu_3019_p3;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_272_fu_3033_p3;
wire   [63:0] tmp_273_fu_3047_p3;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_274_fu_3061_p3;
wire   [63:0] tmp_275_fu_3075_p3;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_276_fu_3089_p3;
wire   [63:0] tmp_277_fu_3103_p3;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_278_fu_3117_p3;
wire   [63:0] tmp_279_fu_3131_p3;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_280_fu_3145_p3;
wire   [63:0] tmp_281_fu_3159_p3;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_282_fu_3173_p3;
wire   [63:0] tmp_283_fu_3187_p3;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_284_fu_3201_p3;
wire   [63:0] tmp_285_fu_3215_p3;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_286_fu_3229_p3;
wire   [63:0] tmp_287_fu_3243_p3;
wire    ap_CS_fsm_state17;
wire   [63:0] tmp_288_fu_3257_p3;
wire   [63:0] tmp_289_fu_3271_p3;
wire    ap_CS_fsm_state18;
wire   [63:0] tmp_290_fu_3285_p3;
wire   [63:0] tmp_291_fu_3299_p3;
wire    ap_CS_fsm_state19;
wire   [63:0] tmp_292_fu_3313_p3;
wire   [63:0] tmp_293_fu_3327_p3;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_294_fu_3341_p3;
wire   [63:0] tmp_295_fu_3355_p3;
wire    ap_CS_fsm_state21;
wire   [63:0] tmp_296_fu_3369_p3;
wire   [63:0] tmp_297_fu_3383_p3;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_298_fu_3397_p3;
wire   [63:0] tmp_299_fu_3411_p3;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_300_fu_3425_p3;
wire   [63:0] tmp_301_fu_3439_p3;
wire    ap_CS_fsm_state24;
wire   [63:0] tmp_302_fu_3453_p3;
wire   [63:0] tmp_303_fu_3467_p3;
wire    ap_CS_fsm_state25;
wire   [63:0] tmp_304_fu_3481_p3;
wire   [63:0] tmp_305_fu_3495_p3;
wire    ap_CS_fsm_state26;
wire   [63:0] tmp_306_fu_3509_p3;
wire   [63:0] tmp_307_fu_3523_p3;
wire    ap_CS_fsm_state27;
wire   [63:0] tmp_308_fu_3537_p3;
wire   [63:0] tmp_309_fu_3551_p3;
wire    ap_CS_fsm_state28;
wire   [63:0] tmp_310_fu_3565_p3;
wire   [63:0] tmp_311_fu_3579_p3;
wire    ap_CS_fsm_state29;
wire   [63:0] tmp_312_fu_3593_p3;
wire   [63:0] tmp_313_fu_3607_p3;
wire    ap_CS_fsm_state30;
wire   [63:0] tmp_314_fu_3621_p3;
wire   [63:0] tmp_315_fu_3635_p3;
wire    ap_CS_fsm_state31;
wire   [63:0] tmp_316_fu_3649_p3;
wire   [63:0] tmp_317_fu_3663_p3;
wire    ap_CS_fsm_state32;
wire   [63:0] tmp_318_fu_3677_p3;
wire   [63:0] tmp_319_fu_3691_p3;
wire    ap_CS_fsm_state33;
wire   [63:0] tmp_320_fu_3705_p3;
wire   [63:0] tmp_321_fu_3719_p3;
wire    ap_CS_fsm_state34;
wire   [63:0] tmp_322_fu_3733_p3;
wire   [63:0] tmp_323_fu_3747_p3;
wire    ap_CS_fsm_state35;
wire   [63:0] tmp_324_fu_3761_p3;
wire   [63:0] tmp_325_fu_3775_p3;
wire    ap_CS_fsm_state36;
wire   [63:0] tmp_326_fu_3789_p3;
wire   [63:0] tmp_327_fu_3803_p3;
wire    ap_CS_fsm_state37;
wire   [63:0] tmp_328_fu_3817_p3;
wire   [63:0] tmp_329_fu_3831_p3;
wire    ap_CS_fsm_state38;
wire   [63:0] tmp_330_fu_3845_p3;
wire   [63:0] tmp_331_fu_3859_p3;
wire    ap_CS_fsm_state39;
wire   [63:0] tmp_332_fu_3873_p3;
wire   [63:0] tmp_333_fu_3887_p3;
wire    ap_CS_fsm_state40;
wire   [63:0] tmp_334_fu_3901_p3;
wire   [63:0] tmp_335_fu_3915_p3;
wire    ap_CS_fsm_state41;
wire   [63:0] tmp_336_fu_3929_p3;
wire   [63:0] tmp_337_fu_3943_p3;
wire    ap_CS_fsm_state42;
wire   [63:0] tmp_338_fu_3957_p3;
wire   [63:0] tmp_339_fu_3971_p3;
wire    ap_CS_fsm_state43;
wire   [63:0] tmp_340_fu_3985_p3;
wire   [63:0] tmp_341_fu_3999_p3;
wire    ap_CS_fsm_state44;
wire   [63:0] tmp_342_fu_4013_p3;
wire   [63:0] tmp_343_fu_4027_p3;
wire    ap_CS_fsm_state45;
wire   [63:0] tmp_344_fu_4041_p3;
wire   [63:0] tmp_345_fu_4055_p3;
wire    ap_CS_fsm_state46;
wire   [63:0] tmp_346_fu_4069_p3;
wire   [63:0] tmp_347_fu_4083_p3;
wire    ap_CS_fsm_state47;
wire   [63:0] tmp_348_fu_4097_p3;
wire   [63:0] tmp_349_fu_4111_p3;
wire    ap_CS_fsm_state48;
wire   [63:0] tmp_350_fu_4125_p3;
wire   [63:0] tmp_351_fu_4139_p3;
wire    ap_CS_fsm_state49;
wire   [63:0] tmp_352_fu_4153_p3;
wire   [63:0] tmp_353_fu_4167_p3;
wire    ap_CS_fsm_state50;
wire   [63:0] tmp_354_fu_4181_p3;
wire   [63:0] tmp_355_fu_4195_p3;
wire    ap_CS_fsm_state51;
wire   [63:0] tmp_356_fu_4209_p3;
wire   [63:0] tmp_357_fu_4223_p3;
wire    ap_CS_fsm_state52;
wire   [63:0] tmp_358_fu_4237_p3;
wire   [63:0] tmp_359_fu_4251_p3;
wire    ap_CS_fsm_state53;
wire   [63:0] tmp_360_fu_4265_p3;
wire   [63:0] tmp_361_fu_4279_p3;
wire    ap_CS_fsm_state54;
wire   [63:0] tmp_362_fu_4293_p3;
wire   [63:0] tmp_363_fu_4307_p3;
wire    ap_CS_fsm_state55;
wire   [63:0] tmp_364_fu_4321_p3;
wire   [63:0] tmp_365_fu_4335_p3;
wire    ap_CS_fsm_state56;
wire   [63:0] tmp_366_fu_4349_p3;
wire   [63:0] tmp_367_fu_4363_p3;
wire    ap_CS_fsm_state57;
wire   [63:0] tmp_368_fu_4377_p3;
wire   [63:0] tmp_369_fu_4391_p3;
wire    ap_CS_fsm_state58;
wire   [63:0] tmp_370_fu_4405_p3;
wire   [63:0] tmp_371_fu_4419_p3;
wire    ap_CS_fsm_state59;
wire   [63:0] tmp_372_fu_4433_p3;
wire   [63:0] tmp_373_fu_4447_p3;
wire    ap_CS_fsm_state60;
wire   [63:0] tmp_374_fu_4461_p3;
wire   [63:0] tmp_375_fu_4475_p3;
wire    ap_CS_fsm_state61;
wire   [63:0] tmp_376_fu_4489_p3;
wire   [63:0] tmp_377_fu_4503_p3;
wire    ap_CS_fsm_state62;
wire   [63:0] tmp_378_fu_4517_p3;
wire   [63:0] tmp_379_fu_4531_p3;
wire    ap_CS_fsm_state63;
wire   [63:0] tmp_380_fu_4545_p3;
wire   [63:0] tmp_381_fu_4559_p3;
wire    ap_CS_fsm_state64;
wire   [63:0] tmp_382_fu_4573_p3;
wire   [63:0] tmp_383_fu_4587_p3;
wire    ap_CS_fsm_state65;
wire   [63:0] tmp_384_fu_4601_p3;
wire   [63:0] tmp_385_fu_4615_p3;
wire    ap_CS_fsm_state66;
wire   [63:0] tmp_386_fu_4629_p3;
wire   [63:0] tmp_387_fu_4643_p3;
wire    ap_CS_fsm_state67;
wire   [63:0] tmp_388_fu_4657_p3;
wire   [63:0] tmp_389_fu_4671_p3;
wire    ap_CS_fsm_state68;
wire   [63:0] tmp_390_fu_4685_p3;
wire   [63:0] tmp_391_fu_4699_p3;
wire    ap_CS_fsm_state69;
wire   [63:0] tmp_392_fu_4713_p3;
wire   [63:0] tmp_393_fu_4727_p3;
wire    ap_CS_fsm_state70;
wire   [63:0] tmp_394_fu_4741_p3;
wire   [63:0] tmp_395_fu_4755_p3;
wire    ap_CS_fsm_state71;
wire   [63:0] tmp_396_fu_4769_p3;
wire   [63:0] tmp_397_fu_4783_p3;
wire    ap_CS_fsm_state72;
wire   [63:0] tmp_398_fu_4797_p3;
wire   [63:0] tmp_399_fu_4811_p3;
wire    ap_CS_fsm_state73;
wire   [63:0] tmp_400_fu_4825_p3;
wire   [63:0] tmp_401_fu_4839_p3;
wire    ap_CS_fsm_state74;
wire   [63:0] tmp_402_fu_4853_p3;
wire   [63:0] tmp_403_fu_4867_p3;
wire    ap_CS_fsm_state75;
wire   [63:0] tmp_404_fu_4881_p3;
wire   [63:0] tmp_405_fu_4895_p3;
wire    ap_CS_fsm_state76;
wire   [63:0] tmp_406_fu_4909_p3;
wire   [63:0] tmp_407_fu_4923_p3;
wire    ap_CS_fsm_state77;
wire   [63:0] tmp_408_fu_4937_p3;
wire   [63:0] tmp_409_fu_4951_p3;
wire    ap_CS_fsm_state78;
wire   [63:0] tmp_410_fu_4965_p3;
wire   [63:0] tmp_411_fu_4979_p3;
wire    ap_CS_fsm_state79;
wire   [63:0] tmp_412_fu_4993_p3;
wire   [63:0] tmp_413_fu_5007_p3;
wire    ap_CS_fsm_state80;
wire   [63:0] tmp_414_fu_5021_p3;
wire   [63:0] tmp_415_fu_5035_p3;
wire    ap_CS_fsm_state81;
wire   [63:0] tmp_416_fu_5049_p3;
wire   [63:0] tmp_417_fu_5063_p3;
wire    ap_CS_fsm_state82;
wire   [63:0] tmp_418_fu_5077_p3;
wire   [63:0] tmp_419_fu_5091_p3;
wire    ap_CS_fsm_state83;
wire   [63:0] tmp_420_fu_5105_p3;
wire   [63:0] tmp_421_fu_5119_p3;
wire    ap_CS_fsm_state84;
wire   [63:0] tmp_422_fu_5133_p3;
wire   [63:0] tmp_423_fu_5147_p3;
wire    ap_CS_fsm_state85;
wire   [63:0] tmp_424_fu_5161_p3;
wire   [63:0] tmp_425_fu_5175_p3;
wire    ap_CS_fsm_state86;
wire   [63:0] tmp_426_fu_5189_p3;
wire   [63:0] tmp_427_fu_5203_p3;
wire    ap_CS_fsm_state87;
wire   [63:0] tmp_428_fu_5217_p3;
wire   [63:0] tmp_429_fu_5231_p3;
wire    ap_CS_fsm_state88;
wire   [63:0] tmp_430_fu_5245_p3;
wire   [63:0] tmp_431_fu_5259_p3;
wire    ap_CS_fsm_state89;
wire   [63:0] tmp_432_fu_5273_p3;
wire   [63:0] tmp_433_fu_5287_p3;
wire    ap_CS_fsm_state90;
wire   [63:0] tmp_434_fu_5301_p3;
wire   [63:0] tmp_435_fu_5315_p3;
wire    ap_CS_fsm_state91;
wire   [63:0] tmp_436_fu_5329_p3;
wire   [63:0] tmp_437_fu_5343_p3;
wire    ap_CS_fsm_state92;
wire   [63:0] tmp_438_fu_5357_p3;
wire   [63:0] tmp_439_fu_5371_p3;
wire    ap_CS_fsm_state93;
wire   [63:0] tmp_440_fu_5385_p3;
wire   [63:0] tmp_441_fu_5399_p3;
wire    ap_CS_fsm_state94;
wire   [63:0] tmp_442_fu_5413_p3;
wire   [63:0] tmp_443_fu_5427_p3;
wire    ap_CS_fsm_state95;
wire   [63:0] tmp_444_fu_5441_p3;
wire   [63:0] tmp_445_fu_5455_p3;
wire    ap_CS_fsm_state96;
wire   [63:0] tmp_446_fu_5469_p3;
wire   [63:0] tmp_447_fu_5483_p3;
wire    ap_CS_fsm_state97;
wire   [63:0] tmp_448_fu_5497_p3;
wire   [63:0] tmp_449_fu_5511_p3;
wire    ap_CS_fsm_state98;
wire   [63:0] tmp_450_fu_5525_p3;
wire   [63:0] tmp_451_fu_5539_p3;
wire    ap_CS_fsm_state99;
wire   [63:0] tmp_452_fu_5553_p3;
wire   [63:0] tmp_453_fu_5567_p3;
wire    ap_CS_fsm_state100;
wire   [63:0] tmp_454_fu_5581_p3;
wire   [63:0] tmp_455_fu_5595_p3;
wire    ap_CS_fsm_state101;
wire   [63:0] tmp_456_fu_5609_p3;
wire   [63:0] tmp_457_fu_5623_p3;
wire    ap_CS_fsm_state102;
wire   [63:0] tmp_458_fu_5637_p3;
wire   [63:0] tmp_459_fu_5651_p3;
wire    ap_CS_fsm_state103;
wire   [63:0] tmp_460_fu_5665_p3;
wire   [63:0] tmp_461_fu_5679_p3;
wire    ap_CS_fsm_state104;
wire   [63:0] tmp_462_fu_5693_p3;
wire   [63:0] tmp_463_fu_5707_p3;
wire    ap_CS_fsm_state105;
wire   [63:0] tmp_464_fu_5721_p3;
wire   [63:0] tmp_465_fu_5735_p3;
wire    ap_CS_fsm_state106;
wire   [63:0] tmp_466_fu_5749_p3;
wire   [63:0] tmp_467_fu_5763_p3;
wire    ap_CS_fsm_state107;
wire   [63:0] tmp_468_fu_5777_p3;
wire   [63:0] tmp_469_fu_5791_p3;
wire    ap_CS_fsm_state108;
wire   [63:0] tmp_470_fu_5805_p3;
wire   [63:0] tmp_471_fu_5819_p3;
wire    ap_CS_fsm_state109;
wire   [63:0] tmp_472_fu_5833_p3;
wire   [63:0] tmp_473_fu_5847_p3;
wire    ap_CS_fsm_state110;
wire   [63:0] tmp_474_fu_5861_p3;
wire   [63:0] tmp_475_fu_5875_p3;
wire    ap_CS_fsm_state111;
wire   [63:0] tmp_476_fu_5889_p3;
wire   [63:0] tmp_477_fu_5903_p3;
wire    ap_CS_fsm_state112;
wire   [63:0] tmp_478_fu_5917_p3;
wire   [63:0] tmp_479_fu_5931_p3;
wire    ap_CS_fsm_state113;
wire   [63:0] tmp_480_fu_5945_p3;
wire   [63:0] tmp_481_fu_5959_p3;
wire    ap_CS_fsm_state114;
wire   [63:0] tmp_482_fu_5973_p3;
wire   [63:0] tmp_483_fu_5987_p3;
wire    ap_CS_fsm_state115;
wire   [63:0] tmp_484_fu_6001_p3;
wire   [63:0] tmp_485_fu_6015_p3;
wire    ap_CS_fsm_state116;
wire   [63:0] tmp_486_fu_6029_p3;
wire   [63:0] tmp_487_fu_6043_p3;
wire    ap_CS_fsm_state117;
wire   [63:0] tmp_488_fu_6057_p3;
wire   [63:0] tmp_489_fu_6071_p3;
wire    ap_CS_fsm_state118;
wire   [63:0] tmp_490_fu_6085_p3;
wire   [63:0] tmp_491_fu_6099_p3;
wire    ap_CS_fsm_state119;
wire   [63:0] tmp_492_fu_6113_p3;
wire   [63:0] tmp_493_fu_6127_p3;
wire    ap_CS_fsm_state120;
wire   [63:0] tmp_494_fu_6141_p3;
wire   [63:0] tmp_495_fu_6155_p3;
wire    ap_CS_fsm_state121;
wire   [63:0] tmp_496_fu_6169_p3;
wire   [63:0] tmp_497_fu_6183_p3;
wire    ap_CS_fsm_state122;
wire   [63:0] tmp_498_fu_6197_p3;
wire   [63:0] tmp_499_fu_6211_p3;
wire    ap_CS_fsm_state123;
wire   [63:0] tmp_500_fu_6225_p3;
wire   [63:0] tmp_501_fu_6239_p3;
wire    ap_CS_fsm_state124;
wire   [63:0] tmp_502_fu_6253_p3;
wire   [63:0] tmp_503_fu_6267_p3;
wire    ap_CS_fsm_state125;
wire   [63:0] tmp_504_fu_6281_p3;
wire   [63:0] tmp_505_fu_6295_p3;
wire    ap_CS_fsm_state126;
wire   [63:0] tmp_506_fu_6309_p3;
wire   [63:0] tmp_507_fu_6323_p3;
wire    ap_CS_fsm_state127;
wire   [63:0] tmp_508_fu_6337_p3;
wire   [63:0] tmp_509_fu_6351_p3;
wire    ap_CS_fsm_state128;
wire   [63:0] tmp_510_fu_6365_p3;
wire   [63:0] tmp_511_fu_6379_p3;
wire   [63:0] tmp_512_fu_6393_p3;
wire   [63:0] zext_ln321_1_fu_6449_p1;
wire   [63:0] zext_ln215_10_fu_6533_p1;
wire   [63:0] zext_ln215_7_fu_6552_p1;
wire   [63:0] zext_ln215_8_fu_6569_p1;
wire    ap_block_pp2_stage1;
wire   [63:0] zext_ln215_9_fu_6586_p1;
wire    ap_CS_fsm_state138;
wire    ap_block_pp2_stage0_01001;
wire   [16:0] or_ln321_fu_2831_p2;
wire   [16:0] or_ln321_255_fu_2846_p2;
wire   [16:0] or_ln321_256_fu_2860_p2;
wire   [16:0] or_ln321_257_fu_2874_p2;
wire   [16:0] or_ln321_258_fu_2888_p2;
wire   [16:0] or_ln321_259_fu_2902_p2;
wire   [16:0] or_ln321_260_fu_2916_p2;
wire   [16:0] or_ln321_261_fu_2930_p2;
wire   [16:0] or_ln321_262_fu_2944_p2;
wire   [16:0] or_ln321_263_fu_2958_p2;
wire   [16:0] or_ln321_264_fu_2972_p2;
wire   [16:0] or_ln321_265_fu_2986_p2;
wire   [16:0] or_ln321_266_fu_3000_p2;
wire   [16:0] or_ln321_267_fu_3014_p2;
wire   [16:0] or_ln321_268_fu_3028_p2;
wire   [16:0] or_ln321_269_fu_3042_p2;
wire   [16:0] or_ln321_270_fu_3056_p2;
wire   [16:0] or_ln321_271_fu_3070_p2;
wire   [16:0] or_ln321_272_fu_3084_p2;
wire   [16:0] or_ln321_273_fu_3098_p2;
wire   [16:0] or_ln321_274_fu_3112_p2;
wire   [16:0] or_ln321_275_fu_3126_p2;
wire   [16:0] or_ln321_276_fu_3140_p2;
wire   [16:0] or_ln321_277_fu_3154_p2;
wire   [16:0] or_ln321_278_fu_3168_p2;
wire   [16:0] or_ln321_279_fu_3182_p2;
wire   [16:0] or_ln321_280_fu_3196_p2;
wire   [16:0] or_ln321_281_fu_3210_p2;
wire   [16:0] or_ln321_282_fu_3224_p2;
wire   [16:0] or_ln321_283_fu_3238_p2;
wire   [16:0] or_ln321_284_fu_3252_p2;
wire   [16:0] or_ln321_285_fu_3266_p2;
wire   [16:0] or_ln321_286_fu_3280_p2;
wire   [16:0] or_ln321_287_fu_3294_p2;
wire   [16:0] or_ln321_288_fu_3308_p2;
wire   [16:0] or_ln321_289_fu_3322_p2;
wire   [16:0] or_ln321_290_fu_3336_p2;
wire   [16:0] or_ln321_291_fu_3350_p2;
wire   [16:0] or_ln321_292_fu_3364_p2;
wire   [16:0] or_ln321_293_fu_3378_p2;
wire   [16:0] or_ln321_294_fu_3392_p2;
wire   [16:0] or_ln321_295_fu_3406_p2;
wire   [16:0] or_ln321_296_fu_3420_p2;
wire   [16:0] or_ln321_297_fu_3434_p2;
wire   [16:0] or_ln321_298_fu_3448_p2;
wire   [16:0] or_ln321_299_fu_3462_p2;
wire   [16:0] or_ln321_300_fu_3476_p2;
wire   [16:0] or_ln321_301_fu_3490_p2;
wire   [16:0] or_ln321_302_fu_3504_p2;
wire   [16:0] or_ln321_303_fu_3518_p2;
wire   [16:0] or_ln321_304_fu_3532_p2;
wire   [16:0] or_ln321_305_fu_3546_p2;
wire   [16:0] or_ln321_306_fu_3560_p2;
wire   [16:0] or_ln321_307_fu_3574_p2;
wire   [16:0] or_ln321_308_fu_3588_p2;
wire   [16:0] or_ln321_309_fu_3602_p2;
wire   [16:0] or_ln321_310_fu_3616_p2;
wire   [16:0] or_ln321_311_fu_3630_p2;
wire   [16:0] or_ln321_312_fu_3644_p2;
wire   [16:0] or_ln321_313_fu_3658_p2;
wire   [16:0] or_ln321_314_fu_3672_p2;
wire   [16:0] or_ln321_315_fu_3686_p2;
wire   [16:0] or_ln321_316_fu_3700_p2;
wire   [16:0] or_ln321_317_fu_3714_p2;
wire   [16:0] or_ln321_318_fu_3728_p2;
wire   [16:0] or_ln321_319_fu_3742_p2;
wire   [16:0] or_ln321_320_fu_3756_p2;
wire   [16:0] or_ln321_321_fu_3770_p2;
wire   [16:0] or_ln321_322_fu_3784_p2;
wire   [16:0] or_ln321_323_fu_3798_p2;
wire   [16:0] or_ln321_324_fu_3812_p2;
wire   [16:0] or_ln321_325_fu_3826_p2;
wire   [16:0] or_ln321_326_fu_3840_p2;
wire   [16:0] or_ln321_327_fu_3854_p2;
wire   [16:0] or_ln321_328_fu_3868_p2;
wire   [16:0] or_ln321_329_fu_3882_p2;
wire   [16:0] or_ln321_330_fu_3896_p2;
wire   [16:0] or_ln321_331_fu_3910_p2;
wire   [16:0] or_ln321_332_fu_3924_p2;
wire   [16:0] or_ln321_333_fu_3938_p2;
wire   [16:0] or_ln321_334_fu_3952_p2;
wire   [16:0] or_ln321_335_fu_3966_p2;
wire   [16:0] or_ln321_336_fu_3980_p2;
wire   [16:0] or_ln321_337_fu_3994_p2;
wire   [16:0] or_ln321_338_fu_4008_p2;
wire   [16:0] or_ln321_339_fu_4022_p2;
wire   [16:0] or_ln321_340_fu_4036_p2;
wire   [16:0] or_ln321_341_fu_4050_p2;
wire   [16:0] or_ln321_342_fu_4064_p2;
wire   [16:0] or_ln321_343_fu_4078_p2;
wire   [16:0] or_ln321_344_fu_4092_p2;
wire   [16:0] or_ln321_345_fu_4106_p2;
wire   [16:0] or_ln321_346_fu_4120_p2;
wire   [16:0] or_ln321_347_fu_4134_p2;
wire   [16:0] or_ln321_348_fu_4148_p2;
wire   [16:0] or_ln321_349_fu_4162_p2;
wire   [16:0] or_ln321_350_fu_4176_p2;
wire   [16:0] or_ln321_351_fu_4190_p2;
wire   [16:0] or_ln321_352_fu_4204_p2;
wire   [16:0] or_ln321_353_fu_4218_p2;
wire   [16:0] or_ln321_354_fu_4232_p2;
wire   [16:0] or_ln321_355_fu_4246_p2;
wire   [16:0] or_ln321_356_fu_4260_p2;
wire   [16:0] or_ln321_357_fu_4274_p2;
wire   [16:0] or_ln321_358_fu_4288_p2;
wire   [16:0] or_ln321_359_fu_4302_p2;
wire   [16:0] or_ln321_360_fu_4316_p2;
wire   [16:0] or_ln321_361_fu_4330_p2;
wire   [16:0] or_ln321_362_fu_4344_p2;
wire   [16:0] or_ln321_363_fu_4358_p2;
wire   [16:0] or_ln321_364_fu_4372_p2;
wire   [16:0] or_ln321_365_fu_4386_p2;
wire   [16:0] or_ln321_366_fu_4400_p2;
wire   [16:0] or_ln321_367_fu_4414_p2;
wire   [16:0] or_ln321_368_fu_4428_p2;
wire   [16:0] or_ln321_369_fu_4442_p2;
wire   [16:0] or_ln321_370_fu_4456_p2;
wire   [16:0] or_ln321_371_fu_4470_p2;
wire   [16:0] or_ln321_372_fu_4484_p2;
wire   [16:0] or_ln321_373_fu_4498_p2;
wire   [16:0] or_ln321_374_fu_4512_p2;
wire   [16:0] or_ln321_375_fu_4526_p2;
wire   [16:0] or_ln321_376_fu_4540_p2;
wire   [16:0] or_ln321_377_fu_4554_p2;
wire   [16:0] or_ln321_378_fu_4568_p2;
wire   [16:0] or_ln321_379_fu_4582_p2;
wire   [16:0] or_ln321_380_fu_4596_p2;
wire   [16:0] or_ln321_381_fu_4610_p2;
wire   [16:0] or_ln321_382_fu_4624_p2;
wire   [16:0] or_ln321_383_fu_4638_p2;
wire   [16:0] or_ln321_384_fu_4652_p2;
wire   [16:0] or_ln321_385_fu_4666_p2;
wire   [16:0] or_ln321_386_fu_4680_p2;
wire   [16:0] or_ln321_387_fu_4694_p2;
wire   [16:0] or_ln321_388_fu_4708_p2;
wire   [16:0] or_ln321_389_fu_4722_p2;
wire   [16:0] or_ln321_390_fu_4736_p2;
wire   [16:0] or_ln321_391_fu_4750_p2;
wire   [16:0] or_ln321_392_fu_4764_p2;
wire   [16:0] or_ln321_393_fu_4778_p2;
wire   [16:0] or_ln321_394_fu_4792_p2;
wire   [16:0] or_ln321_395_fu_4806_p2;
wire   [16:0] or_ln321_396_fu_4820_p2;
wire   [16:0] or_ln321_397_fu_4834_p2;
wire   [16:0] or_ln321_398_fu_4848_p2;
wire   [16:0] or_ln321_399_fu_4862_p2;
wire   [16:0] or_ln321_400_fu_4876_p2;
wire   [16:0] or_ln321_401_fu_4890_p2;
wire   [16:0] or_ln321_402_fu_4904_p2;
wire   [16:0] or_ln321_403_fu_4918_p2;
wire   [16:0] or_ln321_404_fu_4932_p2;
wire   [16:0] or_ln321_405_fu_4946_p2;
wire   [16:0] or_ln321_406_fu_4960_p2;
wire   [16:0] or_ln321_407_fu_4974_p2;
wire   [16:0] or_ln321_408_fu_4988_p2;
wire   [16:0] or_ln321_409_fu_5002_p2;
wire   [16:0] or_ln321_410_fu_5016_p2;
wire   [16:0] or_ln321_411_fu_5030_p2;
wire   [16:0] or_ln321_412_fu_5044_p2;
wire   [16:0] or_ln321_413_fu_5058_p2;
wire   [16:0] or_ln321_414_fu_5072_p2;
wire   [16:0] or_ln321_415_fu_5086_p2;
wire   [16:0] or_ln321_416_fu_5100_p2;
wire   [16:0] or_ln321_417_fu_5114_p2;
wire   [16:0] or_ln321_418_fu_5128_p2;
wire   [16:0] or_ln321_419_fu_5142_p2;
wire   [16:0] or_ln321_420_fu_5156_p2;
wire   [16:0] or_ln321_421_fu_5170_p2;
wire   [16:0] or_ln321_422_fu_5184_p2;
wire   [16:0] or_ln321_423_fu_5198_p2;
wire   [16:0] or_ln321_424_fu_5212_p2;
wire   [16:0] or_ln321_425_fu_5226_p2;
wire   [16:0] or_ln321_426_fu_5240_p2;
wire   [16:0] or_ln321_427_fu_5254_p2;
wire   [16:0] or_ln321_428_fu_5268_p2;
wire   [16:0] or_ln321_429_fu_5282_p2;
wire   [16:0] or_ln321_430_fu_5296_p2;
wire   [16:0] or_ln321_431_fu_5310_p2;
wire   [16:0] or_ln321_432_fu_5324_p2;
wire   [16:0] or_ln321_433_fu_5338_p2;
wire   [16:0] or_ln321_434_fu_5352_p2;
wire   [16:0] or_ln321_435_fu_5366_p2;
wire   [16:0] or_ln321_436_fu_5380_p2;
wire   [16:0] or_ln321_437_fu_5394_p2;
wire   [16:0] or_ln321_438_fu_5408_p2;
wire   [16:0] or_ln321_439_fu_5422_p2;
wire   [16:0] or_ln321_440_fu_5436_p2;
wire   [16:0] or_ln321_441_fu_5450_p2;
wire   [16:0] or_ln321_442_fu_5464_p2;
wire   [16:0] or_ln321_443_fu_5478_p2;
wire   [16:0] or_ln321_444_fu_5492_p2;
wire   [16:0] or_ln321_445_fu_5506_p2;
wire   [16:0] or_ln321_446_fu_5520_p2;
wire   [16:0] or_ln321_447_fu_5534_p2;
wire   [16:0] or_ln321_448_fu_5548_p2;
wire   [16:0] or_ln321_449_fu_5562_p2;
wire   [16:0] or_ln321_450_fu_5576_p2;
wire   [16:0] or_ln321_451_fu_5590_p2;
wire   [16:0] or_ln321_452_fu_5604_p2;
wire   [16:0] or_ln321_453_fu_5618_p2;
wire   [16:0] or_ln321_454_fu_5632_p2;
wire   [16:0] or_ln321_455_fu_5646_p2;
wire   [16:0] or_ln321_456_fu_5660_p2;
wire   [16:0] or_ln321_457_fu_5674_p2;
wire   [16:0] or_ln321_458_fu_5688_p2;
wire   [16:0] or_ln321_459_fu_5702_p2;
wire   [16:0] or_ln321_460_fu_5716_p2;
wire   [16:0] or_ln321_461_fu_5730_p2;
wire   [16:0] or_ln321_462_fu_5744_p2;
wire   [16:0] or_ln321_463_fu_5758_p2;
wire   [16:0] or_ln321_464_fu_5772_p2;
wire   [16:0] or_ln321_465_fu_5786_p2;
wire   [16:0] or_ln321_466_fu_5800_p2;
wire   [16:0] or_ln321_467_fu_5814_p2;
wire   [16:0] or_ln321_468_fu_5828_p2;
wire   [16:0] or_ln321_469_fu_5842_p2;
wire   [16:0] or_ln321_470_fu_5856_p2;
wire   [16:0] or_ln321_471_fu_5870_p2;
wire   [16:0] or_ln321_472_fu_5884_p2;
wire   [16:0] or_ln321_473_fu_5898_p2;
wire   [16:0] or_ln321_474_fu_5912_p2;
wire   [16:0] or_ln321_475_fu_5926_p2;
wire   [16:0] or_ln321_476_fu_5940_p2;
wire   [16:0] or_ln321_477_fu_5954_p2;
wire   [16:0] or_ln321_478_fu_5968_p2;
wire   [16:0] or_ln321_479_fu_5982_p2;
wire   [16:0] or_ln321_480_fu_5996_p2;
wire   [16:0] or_ln321_481_fu_6010_p2;
wire   [16:0] or_ln321_482_fu_6024_p2;
wire   [16:0] or_ln321_483_fu_6038_p2;
wire   [16:0] or_ln321_484_fu_6052_p2;
wire   [16:0] or_ln321_485_fu_6066_p2;
wire   [16:0] or_ln321_486_fu_6080_p2;
wire   [16:0] or_ln321_487_fu_6094_p2;
wire   [16:0] or_ln321_488_fu_6108_p2;
wire   [16:0] or_ln321_489_fu_6122_p2;
wire   [16:0] or_ln321_490_fu_6136_p2;
wire   [16:0] or_ln321_491_fu_6150_p2;
wire   [16:0] or_ln321_492_fu_6164_p2;
wire   [16:0] or_ln321_493_fu_6178_p2;
wire   [16:0] or_ln321_494_fu_6192_p2;
wire   [16:0] or_ln321_495_fu_6206_p2;
wire   [16:0] or_ln321_496_fu_6220_p2;
wire   [16:0] or_ln321_497_fu_6234_p2;
wire   [16:0] or_ln321_498_fu_6248_p2;
wire   [16:0] or_ln321_499_fu_6262_p2;
wire   [16:0] or_ln321_500_fu_6276_p2;
wire   [16:0] or_ln321_501_fu_6290_p2;
wire   [16:0] or_ln321_502_fu_6304_p2;
wire   [16:0] or_ln321_503_fu_6318_p2;
wire   [16:0] or_ln321_504_fu_6332_p2;
wire   [16:0] or_ln321_505_fu_6346_p2;
wire   [16:0] or_ln321_506_fu_6360_p2;
wire   [16:0] or_ln321_507_fu_6374_p2;
wire   [16:0] or_ln321_508_fu_6388_p2;
wire   [7:0] trunc_ln321_fu_6437_p1;
wire   [7:0] pixels_y_V_fu_6416_p4;
wire   [15:0] tmp_513_fu_6441_p3;
wire   [0:0] tmp_3_fu_6483_p3;
wire   [8:0] i_fu_6477_p2;
wire   [16:0] tmp_514_fu_6507_p3;
wire   [17:0] zext_ln528_fu_6515_p1;
wire   [17:0] zext_ln215_fu_6523_p1;
wire   [17:0] add_ln215_fu_6527_p2;
wire   [7:0] or_ln531_fu_6538_p2;
wire   [16:0] tmp_515_fu_6544_p3;
wire   [7:0] or_ln531_1_fu_6557_p2;
wire   [16:0] tmp_516_fu_6562_p3;
wire   [7:0] or_ln531_2_fu_6574_p2;
wire   [16:0] tmp_517_fu_6579_p3;
reg   [135:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 136'd1;
#0 counter_V = 16'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

coloringFB_bot_m_mb6 #(
    .DataWidth( 8 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
frame_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(frame_buffer_V_address0),
    .ce0(frame_buffer_V_ce0),
    .we0(frame_buffer_V_we0),
    .d0(frame_buffer_V_d0),
    .q0(frame_buffer_V_q0),
    .address1(frame_buffer_V_address1),
    .ce1(frame_buffer_V_ce1),
    .we1(frame_buffer_V_we1),
    .d1(8'd0),
    .q1(frame_buffer_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state131) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state131))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state131);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state134) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        counter_V_new_0_reg_2785 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state133) & (icmp_ln879_2_fu_6459_p2 == 1'd0))) begin
        counter_V_new_0_reg_2785 <= add_ln700_fu_6454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
        i_0_reg_2763 <= 9'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        i_0_reg_2763 <= select_ln531_1_reg_6930;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
        indvar_flatten_reg_2752 <= 15'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        indvar_flatten_reg_2752 <= add_ln527_reg_6920;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
        j_0_reg_2774 <= 9'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        j_0_reg_2774 <= j_reg_6973;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln515_fu_6405_p2 == 1'd0))) begin
        t_V_7_reg_2741 <= i_V_1_fu_6410_p2;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        t_V_7_reg_2741 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (icmp_ln879_fu_2800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_2730 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        t_V_reg_2730 <= i_V_reg_6630;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln527_reg_6920 <= add_ln527_fu_6471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        counter_V <= counter_V_new_0_reg_2785;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        empty_16_reg_6893 <= empty_16_fu_6402_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln527_reg_6916 == 1'd0))) begin
        frame_buffer_V_load_1_reg_6958 <= frame_buffer_V_q0;
        frame_buffer_V_load_reg_6953 <= frame_buffer_V_q1;
        j_reg_6973 <= j_fu_6591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_6630 <= i_V_fu_2812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln515_reg_6898 <= icmp_ln515_fu_6405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln527_reg_6916 <= icmp_ln527_fu_6465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_fu_6465_p2 == 1'd0))) begin
        select_ln531_1_reg_6930 <= select_ln531_1_fu_6499_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_fu_6465_p2 == 1'd0))) begin
        select_ln531_reg_6925 <= select_ln531_fu_6491_p3;
        trunc_ln528_reg_6937 <= trunc_ln528_fu_6519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_6_reg_6618 <= counter_V;
        tmp_V_reg_6613 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2806_p2 == 1'd0))) begin
        tmp_s_reg_6635[16 : 8] <= tmp_s_fu_2818_p3[16 : 8];
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln515_reg_6898 == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_empty_n;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln515_reg_6898 == 1'd0)) | (~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_read = 1'b1;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln515_fu_6405_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state131 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state131 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln527_fu_6465_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state134 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state134 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state138) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_2767_p4 = select_ln531_1_reg_6930;
    end else begin
        ap_phi_mux_i_0_phi_fu_2767_p4 = i_0_reg_2763;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_2756_p4 = add_ln527_reg_6920;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_2756_p4 = indvar_flatten_reg_2752;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln527_reg_6916 == 1'd0))) begin
        ap_phi_mux_j_0_phi_fu_2778_p4 = j_reg_6973;
    end else begin
        ap_phi_mux_j_0_phi_fu_2778_p4 = j_0_reg_2774;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        frame_buffer_V_address0 = zext_ln215_9_fu_6586_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        frame_buffer_V_address0 = zext_ln215_7_fu_6552_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        frame_buffer_V_address0 = zext_ln321_1_fu_6449_p1;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        frame_buffer_V_address0 = tmp_511_fu_6379_p3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        frame_buffer_V_address0 = tmp_509_fu_6351_p3;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        frame_buffer_V_address0 = tmp_507_fu_6323_p3;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        frame_buffer_V_address0 = tmp_505_fu_6295_p3;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        frame_buffer_V_address0 = tmp_503_fu_6267_p3;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        frame_buffer_V_address0 = tmp_501_fu_6239_p3;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        frame_buffer_V_address0 = tmp_499_fu_6211_p3;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        frame_buffer_V_address0 = tmp_497_fu_6183_p3;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        frame_buffer_V_address0 = tmp_495_fu_6155_p3;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        frame_buffer_V_address0 = tmp_493_fu_6127_p3;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        frame_buffer_V_address0 = tmp_491_fu_6099_p3;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        frame_buffer_V_address0 = tmp_489_fu_6071_p3;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        frame_buffer_V_address0 = tmp_487_fu_6043_p3;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        frame_buffer_V_address0 = tmp_485_fu_6015_p3;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        frame_buffer_V_address0 = tmp_483_fu_5987_p3;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        frame_buffer_V_address0 = tmp_481_fu_5959_p3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        frame_buffer_V_address0 = tmp_479_fu_5931_p3;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        frame_buffer_V_address0 = tmp_477_fu_5903_p3;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        frame_buffer_V_address0 = tmp_475_fu_5875_p3;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        frame_buffer_V_address0 = tmp_473_fu_5847_p3;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        frame_buffer_V_address0 = tmp_471_fu_5819_p3;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        frame_buffer_V_address0 = tmp_469_fu_5791_p3;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        frame_buffer_V_address0 = tmp_467_fu_5763_p3;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        frame_buffer_V_address0 = tmp_465_fu_5735_p3;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        frame_buffer_V_address0 = tmp_463_fu_5707_p3;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        frame_buffer_V_address0 = tmp_461_fu_5679_p3;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        frame_buffer_V_address0 = tmp_459_fu_5651_p3;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        frame_buffer_V_address0 = tmp_457_fu_5623_p3;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        frame_buffer_V_address0 = tmp_455_fu_5595_p3;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        frame_buffer_V_address0 = tmp_453_fu_5567_p3;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        frame_buffer_V_address0 = tmp_451_fu_5539_p3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        frame_buffer_V_address0 = tmp_449_fu_5511_p3;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        frame_buffer_V_address0 = tmp_447_fu_5483_p3;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        frame_buffer_V_address0 = tmp_445_fu_5455_p3;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        frame_buffer_V_address0 = tmp_443_fu_5427_p3;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        frame_buffer_V_address0 = tmp_441_fu_5399_p3;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        frame_buffer_V_address0 = tmp_439_fu_5371_p3;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        frame_buffer_V_address0 = tmp_437_fu_5343_p3;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        frame_buffer_V_address0 = tmp_435_fu_5315_p3;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        frame_buffer_V_address0 = tmp_433_fu_5287_p3;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        frame_buffer_V_address0 = tmp_431_fu_5259_p3;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        frame_buffer_V_address0 = tmp_429_fu_5231_p3;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        frame_buffer_V_address0 = tmp_427_fu_5203_p3;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        frame_buffer_V_address0 = tmp_425_fu_5175_p3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        frame_buffer_V_address0 = tmp_423_fu_5147_p3;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        frame_buffer_V_address0 = tmp_421_fu_5119_p3;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        frame_buffer_V_address0 = tmp_419_fu_5091_p3;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        frame_buffer_V_address0 = tmp_417_fu_5063_p3;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        frame_buffer_V_address0 = tmp_415_fu_5035_p3;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        frame_buffer_V_address0 = tmp_413_fu_5007_p3;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        frame_buffer_V_address0 = tmp_411_fu_4979_p3;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        frame_buffer_V_address0 = tmp_409_fu_4951_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        frame_buffer_V_address0 = tmp_407_fu_4923_p3;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        frame_buffer_V_address0 = tmp_405_fu_4895_p3;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        frame_buffer_V_address0 = tmp_403_fu_4867_p3;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        frame_buffer_V_address0 = tmp_401_fu_4839_p3;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        frame_buffer_V_address0 = tmp_399_fu_4811_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        frame_buffer_V_address0 = tmp_397_fu_4783_p3;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        frame_buffer_V_address0 = tmp_395_fu_4755_p3;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        frame_buffer_V_address0 = tmp_393_fu_4727_p3;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        frame_buffer_V_address0 = tmp_391_fu_4699_p3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        frame_buffer_V_address0 = tmp_389_fu_4671_p3;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        frame_buffer_V_address0 = tmp_387_fu_4643_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        frame_buffer_V_address0 = tmp_385_fu_4615_p3;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        frame_buffer_V_address0 = tmp_383_fu_4587_p3;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        frame_buffer_V_address0 = tmp_381_fu_4559_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        frame_buffer_V_address0 = tmp_379_fu_4531_p3;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        frame_buffer_V_address0 = tmp_377_fu_4503_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        frame_buffer_V_address0 = tmp_375_fu_4475_p3;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        frame_buffer_V_address0 = tmp_373_fu_4447_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        frame_buffer_V_address0 = tmp_371_fu_4419_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        frame_buffer_V_address0 = tmp_369_fu_4391_p3;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        frame_buffer_V_address0 = tmp_367_fu_4363_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        frame_buffer_V_address0 = tmp_365_fu_4335_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        frame_buffer_V_address0 = tmp_363_fu_4307_p3;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        frame_buffer_V_address0 = tmp_361_fu_4279_p3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        frame_buffer_V_address0 = tmp_359_fu_4251_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        frame_buffer_V_address0 = tmp_357_fu_4223_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        frame_buffer_V_address0 = tmp_355_fu_4195_p3;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        frame_buffer_V_address0 = tmp_353_fu_4167_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        frame_buffer_V_address0 = tmp_351_fu_4139_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        frame_buffer_V_address0 = tmp_349_fu_4111_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        frame_buffer_V_address0 = tmp_347_fu_4083_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        frame_buffer_V_address0 = tmp_345_fu_4055_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        frame_buffer_V_address0 = tmp_343_fu_4027_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        frame_buffer_V_address0 = tmp_341_fu_3999_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        frame_buffer_V_address0 = tmp_339_fu_3971_p3;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        frame_buffer_V_address0 = tmp_337_fu_3943_p3;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        frame_buffer_V_address0 = tmp_335_fu_3915_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        frame_buffer_V_address0 = tmp_333_fu_3887_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        frame_buffer_V_address0 = tmp_331_fu_3859_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        frame_buffer_V_address0 = tmp_329_fu_3831_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        frame_buffer_V_address0 = tmp_327_fu_3803_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        frame_buffer_V_address0 = tmp_325_fu_3775_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        frame_buffer_V_address0 = tmp_323_fu_3747_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        frame_buffer_V_address0 = tmp_321_fu_3719_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        frame_buffer_V_address0 = tmp_319_fu_3691_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        frame_buffer_V_address0 = tmp_317_fu_3663_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        frame_buffer_V_address0 = tmp_315_fu_3635_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        frame_buffer_V_address0 = tmp_313_fu_3607_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        frame_buffer_V_address0 = tmp_311_fu_3579_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        frame_buffer_V_address0 = tmp_309_fu_3551_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        frame_buffer_V_address0 = tmp_307_fu_3523_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        frame_buffer_V_address0 = tmp_305_fu_3495_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        frame_buffer_V_address0 = tmp_303_fu_3467_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        frame_buffer_V_address0 = tmp_301_fu_3439_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        frame_buffer_V_address0 = tmp_299_fu_3411_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        frame_buffer_V_address0 = tmp_297_fu_3383_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        frame_buffer_V_address0 = tmp_295_fu_3355_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        frame_buffer_V_address0 = tmp_293_fu_3327_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        frame_buffer_V_address0 = tmp_291_fu_3299_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        frame_buffer_V_address0 = tmp_289_fu_3271_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        frame_buffer_V_address0 = tmp_287_fu_3243_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        frame_buffer_V_address0 = tmp_285_fu_3215_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        frame_buffer_V_address0 = tmp_283_fu_3187_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        frame_buffer_V_address0 = tmp_281_fu_3159_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        frame_buffer_V_address0 = tmp_279_fu_3131_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        frame_buffer_V_address0 = tmp_277_fu_3103_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        frame_buffer_V_address0 = tmp_275_fu_3075_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        frame_buffer_V_address0 = tmp_273_fu_3047_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        frame_buffer_V_address0 = tmp_271_fu_3019_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_buffer_V_address0 = tmp_269_fu_2991_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        frame_buffer_V_address0 = tmp_267_fu_2963_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        frame_buffer_V_address0 = tmp_265_fu_2935_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        frame_buffer_V_address0 = tmp_263_fu_2907_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        frame_buffer_V_address0 = tmp_261_fu_2879_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_buffer_V_address0 = tmp_259_fu_2851_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_buffer_V_address0 = zext_ln321_fu_2826_p1;
    end else begin
        frame_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        frame_buffer_V_address1 = zext_ln215_8_fu_6569_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        frame_buffer_V_address1 = zext_ln215_10_fu_6533_p1;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        frame_buffer_V_address1 = tmp_512_fu_6393_p3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        frame_buffer_V_address1 = tmp_510_fu_6365_p3;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        frame_buffer_V_address1 = tmp_508_fu_6337_p3;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        frame_buffer_V_address1 = tmp_506_fu_6309_p3;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        frame_buffer_V_address1 = tmp_504_fu_6281_p3;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        frame_buffer_V_address1 = tmp_502_fu_6253_p3;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        frame_buffer_V_address1 = tmp_500_fu_6225_p3;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        frame_buffer_V_address1 = tmp_498_fu_6197_p3;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        frame_buffer_V_address1 = tmp_496_fu_6169_p3;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        frame_buffer_V_address1 = tmp_494_fu_6141_p3;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        frame_buffer_V_address1 = tmp_492_fu_6113_p3;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        frame_buffer_V_address1 = tmp_490_fu_6085_p3;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        frame_buffer_V_address1 = tmp_488_fu_6057_p3;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        frame_buffer_V_address1 = tmp_486_fu_6029_p3;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        frame_buffer_V_address1 = tmp_484_fu_6001_p3;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        frame_buffer_V_address1 = tmp_482_fu_5973_p3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        frame_buffer_V_address1 = tmp_480_fu_5945_p3;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        frame_buffer_V_address1 = tmp_478_fu_5917_p3;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        frame_buffer_V_address1 = tmp_476_fu_5889_p3;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        frame_buffer_V_address1 = tmp_474_fu_5861_p3;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        frame_buffer_V_address1 = tmp_472_fu_5833_p3;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        frame_buffer_V_address1 = tmp_470_fu_5805_p3;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        frame_buffer_V_address1 = tmp_468_fu_5777_p3;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        frame_buffer_V_address1 = tmp_466_fu_5749_p3;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        frame_buffer_V_address1 = tmp_464_fu_5721_p3;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        frame_buffer_V_address1 = tmp_462_fu_5693_p3;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        frame_buffer_V_address1 = tmp_460_fu_5665_p3;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        frame_buffer_V_address1 = tmp_458_fu_5637_p3;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        frame_buffer_V_address1 = tmp_456_fu_5609_p3;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        frame_buffer_V_address1 = tmp_454_fu_5581_p3;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        frame_buffer_V_address1 = tmp_452_fu_5553_p3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        frame_buffer_V_address1 = tmp_450_fu_5525_p3;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        frame_buffer_V_address1 = tmp_448_fu_5497_p3;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        frame_buffer_V_address1 = tmp_446_fu_5469_p3;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        frame_buffer_V_address1 = tmp_444_fu_5441_p3;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        frame_buffer_V_address1 = tmp_442_fu_5413_p3;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        frame_buffer_V_address1 = tmp_440_fu_5385_p3;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        frame_buffer_V_address1 = tmp_438_fu_5357_p3;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        frame_buffer_V_address1 = tmp_436_fu_5329_p3;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        frame_buffer_V_address1 = tmp_434_fu_5301_p3;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        frame_buffer_V_address1 = tmp_432_fu_5273_p3;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        frame_buffer_V_address1 = tmp_430_fu_5245_p3;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        frame_buffer_V_address1 = tmp_428_fu_5217_p3;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        frame_buffer_V_address1 = tmp_426_fu_5189_p3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        frame_buffer_V_address1 = tmp_424_fu_5161_p3;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        frame_buffer_V_address1 = tmp_422_fu_5133_p3;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        frame_buffer_V_address1 = tmp_420_fu_5105_p3;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        frame_buffer_V_address1 = tmp_418_fu_5077_p3;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        frame_buffer_V_address1 = tmp_416_fu_5049_p3;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        frame_buffer_V_address1 = tmp_414_fu_5021_p3;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        frame_buffer_V_address1 = tmp_412_fu_4993_p3;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        frame_buffer_V_address1 = tmp_410_fu_4965_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        frame_buffer_V_address1 = tmp_408_fu_4937_p3;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        frame_buffer_V_address1 = tmp_406_fu_4909_p3;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        frame_buffer_V_address1 = tmp_404_fu_4881_p3;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        frame_buffer_V_address1 = tmp_402_fu_4853_p3;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        frame_buffer_V_address1 = tmp_400_fu_4825_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        frame_buffer_V_address1 = tmp_398_fu_4797_p3;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        frame_buffer_V_address1 = tmp_396_fu_4769_p3;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        frame_buffer_V_address1 = tmp_394_fu_4741_p3;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        frame_buffer_V_address1 = tmp_392_fu_4713_p3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        frame_buffer_V_address1 = tmp_390_fu_4685_p3;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        frame_buffer_V_address1 = tmp_388_fu_4657_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        frame_buffer_V_address1 = tmp_386_fu_4629_p3;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        frame_buffer_V_address1 = tmp_384_fu_4601_p3;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        frame_buffer_V_address1 = tmp_382_fu_4573_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        frame_buffer_V_address1 = tmp_380_fu_4545_p3;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        frame_buffer_V_address1 = tmp_378_fu_4517_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        frame_buffer_V_address1 = tmp_376_fu_4489_p3;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        frame_buffer_V_address1 = tmp_374_fu_4461_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        frame_buffer_V_address1 = tmp_372_fu_4433_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        frame_buffer_V_address1 = tmp_370_fu_4405_p3;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        frame_buffer_V_address1 = tmp_368_fu_4377_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        frame_buffer_V_address1 = tmp_366_fu_4349_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        frame_buffer_V_address1 = tmp_364_fu_4321_p3;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        frame_buffer_V_address1 = tmp_362_fu_4293_p3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        frame_buffer_V_address1 = tmp_360_fu_4265_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        frame_buffer_V_address1 = tmp_358_fu_4237_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        frame_buffer_V_address1 = tmp_356_fu_4209_p3;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        frame_buffer_V_address1 = tmp_354_fu_4181_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        frame_buffer_V_address1 = tmp_352_fu_4153_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        frame_buffer_V_address1 = tmp_350_fu_4125_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        frame_buffer_V_address1 = tmp_348_fu_4097_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        frame_buffer_V_address1 = tmp_346_fu_4069_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        frame_buffer_V_address1 = tmp_344_fu_4041_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        frame_buffer_V_address1 = tmp_342_fu_4013_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        frame_buffer_V_address1 = tmp_340_fu_3985_p3;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        frame_buffer_V_address1 = tmp_338_fu_3957_p3;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        frame_buffer_V_address1 = tmp_336_fu_3929_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        frame_buffer_V_address1 = tmp_334_fu_3901_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        frame_buffer_V_address1 = tmp_332_fu_3873_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        frame_buffer_V_address1 = tmp_330_fu_3845_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        frame_buffer_V_address1 = tmp_328_fu_3817_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        frame_buffer_V_address1 = tmp_326_fu_3789_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        frame_buffer_V_address1 = tmp_324_fu_3761_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        frame_buffer_V_address1 = tmp_322_fu_3733_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        frame_buffer_V_address1 = tmp_320_fu_3705_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        frame_buffer_V_address1 = tmp_318_fu_3677_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        frame_buffer_V_address1 = tmp_316_fu_3649_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        frame_buffer_V_address1 = tmp_314_fu_3621_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        frame_buffer_V_address1 = tmp_312_fu_3593_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        frame_buffer_V_address1 = tmp_310_fu_3565_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        frame_buffer_V_address1 = tmp_308_fu_3537_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        frame_buffer_V_address1 = tmp_306_fu_3509_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        frame_buffer_V_address1 = tmp_304_fu_3481_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        frame_buffer_V_address1 = tmp_302_fu_3453_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        frame_buffer_V_address1 = tmp_300_fu_3425_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        frame_buffer_V_address1 = tmp_298_fu_3397_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        frame_buffer_V_address1 = tmp_296_fu_3369_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        frame_buffer_V_address1 = tmp_294_fu_3341_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        frame_buffer_V_address1 = tmp_292_fu_3313_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        frame_buffer_V_address1 = tmp_290_fu_3285_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        frame_buffer_V_address1 = tmp_288_fu_3257_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        frame_buffer_V_address1 = tmp_286_fu_3229_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        frame_buffer_V_address1 = tmp_284_fu_3201_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        frame_buffer_V_address1 = tmp_282_fu_3173_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        frame_buffer_V_address1 = tmp_280_fu_3145_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        frame_buffer_V_address1 = tmp_278_fu_3117_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        frame_buffer_V_address1 = tmp_276_fu_3089_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        frame_buffer_V_address1 = tmp_274_fu_3061_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        frame_buffer_V_address1 = tmp_272_fu_3033_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_buffer_V_address1 = tmp_270_fu_3005_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        frame_buffer_V_address1 = tmp_268_fu_2977_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        frame_buffer_V_address1 = tmp_266_fu_2949_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        frame_buffer_V_address1 = tmp_264_fu_2921_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        frame_buffer_V_address1 = tmp_262_fu_2893_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_buffer_V_address1 = tmp_260_fu_2865_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_buffer_V_address1 = tmp_258_fu_2837_p3;
    end else begin
        frame_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        frame_buffer_V_ce0 = 1'b1;
    end else begin
        frame_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        frame_buffer_V_ce1 = 1'b1;
    end else begin
        frame_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        frame_buffer_V_d0 = {{Input_1_V_V_dout[23:16]}};
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71))) begin
        frame_buffer_V_d0 = 8'd0;
    end else begin
        frame_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2806_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln515_reg_6898 == 1'd0)))) begin
        frame_buffer_V_we0 = 1'b1;
    end else begin
        frame_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2806_p2 == 1'd0)))) begin
        frame_buffer_V_we1 = 1'b1;
    end else begin
        frame_buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (icmp_ln879_fu_2800_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_2800_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2806_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln515_fu_6405_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln515_fu_6405_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state133 : begin
            if (((icmp_ln879_2_fu_6459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln527_fu_6465_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln527_fu_6465_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = {{{{frame_buffer_V_q0}, {frame_buffer_V_q1}}, {frame_buffer_V_load_1_reg_6958}}, {frame_buffer_V_load_reg_6953}};

assign add_ln215_fu_6527_p2 = (zext_ln528_fu_6515_p1 + zext_ln215_fu_6523_p1);

assign add_ln527_fu_6471_p2 = (ap_phi_mux_indvar_flatten_phi_fu_2756_p4 + 15'd1);

assign add_ln700_fu_6454_p2 = (t_V_6_reg_6618 + 16'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln515_reg_6898 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln515_reg_6898 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state136_io));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state136_io));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0));
end

assign ap_block_state131_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state132_pp1_stage0_iter1 = ((1'b0 == Input_1_V_V_empty_n) & (icmp_ln515_reg_6898 == 1'd0));
end

assign ap_block_state134_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state136_io = ((1'b0 == Output_1_V_V_ap_ack) & (icmp_ln527_reg_6916 == 1'd0));
end

assign ap_block_state136_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_16_fu_6402_p1 = tmp_V_reg_6613[15:0];

assign i_V_1_fu_6410_p2 = (t_V_7_reg_2741 + 16'd1);

assign i_V_fu_2812_p2 = (t_V_reg_2730 + 9'd1);

assign i_fu_6477_p2 = (9'd1 + ap_phi_mux_i_0_phi_fu_2767_p4);

assign icmp_ln515_fu_6405_p2 = ((t_V_7_reg_2741 == empty_16_reg_6893) ? 1'b1 : 1'b0);

assign icmp_ln527_fu_6465_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_2756_p4 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_6459_p2 = ((add_ln700_fu_6454_p2 == 16'd3192) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_2800_p2 = ((counter_V == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_2806_p2 = ((t_V_reg_2730 == 9'd256) ? 1'b1 : 1'b0);

assign j_fu_6591_p2 = (9'd4 + select_ln531_reg_6925);

assign or_ln321_255_fu_2846_p2 = (tmp_s_reg_6635 | 17'd2);

assign or_ln321_256_fu_2860_p2 = (tmp_s_reg_6635 | 17'd3);

assign or_ln321_257_fu_2874_p2 = (tmp_s_reg_6635 | 17'd4);

assign or_ln321_258_fu_2888_p2 = (tmp_s_reg_6635 | 17'd5);

assign or_ln321_259_fu_2902_p2 = (tmp_s_reg_6635 | 17'd6);

assign or_ln321_260_fu_2916_p2 = (tmp_s_reg_6635 | 17'd7);

assign or_ln321_261_fu_2930_p2 = (tmp_s_reg_6635 | 17'd8);

assign or_ln321_262_fu_2944_p2 = (tmp_s_reg_6635 | 17'd9);

assign or_ln321_263_fu_2958_p2 = (tmp_s_reg_6635 | 17'd10);

assign or_ln321_264_fu_2972_p2 = (tmp_s_reg_6635 | 17'd11);

assign or_ln321_265_fu_2986_p2 = (tmp_s_reg_6635 | 17'd12);

assign or_ln321_266_fu_3000_p2 = (tmp_s_reg_6635 | 17'd13);

assign or_ln321_267_fu_3014_p2 = (tmp_s_reg_6635 | 17'd14);

assign or_ln321_268_fu_3028_p2 = (tmp_s_reg_6635 | 17'd15);

assign or_ln321_269_fu_3042_p2 = (tmp_s_reg_6635 | 17'd16);

assign or_ln321_270_fu_3056_p2 = (tmp_s_reg_6635 | 17'd17);

assign or_ln321_271_fu_3070_p2 = (tmp_s_reg_6635 | 17'd18);

assign or_ln321_272_fu_3084_p2 = (tmp_s_reg_6635 | 17'd19);

assign or_ln321_273_fu_3098_p2 = (tmp_s_reg_6635 | 17'd20);

assign or_ln321_274_fu_3112_p2 = (tmp_s_reg_6635 | 17'd21);

assign or_ln321_275_fu_3126_p2 = (tmp_s_reg_6635 | 17'd22);

assign or_ln321_276_fu_3140_p2 = (tmp_s_reg_6635 | 17'd23);

assign or_ln321_277_fu_3154_p2 = (tmp_s_reg_6635 | 17'd24);

assign or_ln321_278_fu_3168_p2 = (tmp_s_reg_6635 | 17'd25);

assign or_ln321_279_fu_3182_p2 = (tmp_s_reg_6635 | 17'd26);

assign or_ln321_280_fu_3196_p2 = (tmp_s_reg_6635 | 17'd27);

assign or_ln321_281_fu_3210_p2 = (tmp_s_reg_6635 | 17'd28);

assign or_ln321_282_fu_3224_p2 = (tmp_s_reg_6635 | 17'd29);

assign or_ln321_283_fu_3238_p2 = (tmp_s_reg_6635 | 17'd30);

assign or_ln321_284_fu_3252_p2 = (tmp_s_reg_6635 | 17'd31);

assign or_ln321_285_fu_3266_p2 = (tmp_s_reg_6635 | 17'd32);

assign or_ln321_286_fu_3280_p2 = (tmp_s_reg_6635 | 17'd33);

assign or_ln321_287_fu_3294_p2 = (tmp_s_reg_6635 | 17'd34);

assign or_ln321_288_fu_3308_p2 = (tmp_s_reg_6635 | 17'd35);

assign or_ln321_289_fu_3322_p2 = (tmp_s_reg_6635 | 17'd36);

assign or_ln321_290_fu_3336_p2 = (tmp_s_reg_6635 | 17'd37);

assign or_ln321_291_fu_3350_p2 = (tmp_s_reg_6635 | 17'd38);

assign or_ln321_292_fu_3364_p2 = (tmp_s_reg_6635 | 17'd39);

assign or_ln321_293_fu_3378_p2 = (tmp_s_reg_6635 | 17'd40);

assign or_ln321_294_fu_3392_p2 = (tmp_s_reg_6635 | 17'd41);

assign or_ln321_295_fu_3406_p2 = (tmp_s_reg_6635 | 17'd42);

assign or_ln321_296_fu_3420_p2 = (tmp_s_reg_6635 | 17'd43);

assign or_ln321_297_fu_3434_p2 = (tmp_s_reg_6635 | 17'd44);

assign or_ln321_298_fu_3448_p2 = (tmp_s_reg_6635 | 17'd45);

assign or_ln321_299_fu_3462_p2 = (tmp_s_reg_6635 | 17'd46);

assign or_ln321_300_fu_3476_p2 = (tmp_s_reg_6635 | 17'd47);

assign or_ln321_301_fu_3490_p2 = (tmp_s_reg_6635 | 17'd48);

assign or_ln321_302_fu_3504_p2 = (tmp_s_reg_6635 | 17'd49);

assign or_ln321_303_fu_3518_p2 = (tmp_s_reg_6635 | 17'd50);

assign or_ln321_304_fu_3532_p2 = (tmp_s_reg_6635 | 17'd51);

assign or_ln321_305_fu_3546_p2 = (tmp_s_reg_6635 | 17'd52);

assign or_ln321_306_fu_3560_p2 = (tmp_s_reg_6635 | 17'd53);

assign or_ln321_307_fu_3574_p2 = (tmp_s_reg_6635 | 17'd54);

assign or_ln321_308_fu_3588_p2 = (tmp_s_reg_6635 | 17'd55);

assign or_ln321_309_fu_3602_p2 = (tmp_s_reg_6635 | 17'd56);

assign or_ln321_310_fu_3616_p2 = (tmp_s_reg_6635 | 17'd57);

assign or_ln321_311_fu_3630_p2 = (tmp_s_reg_6635 | 17'd58);

assign or_ln321_312_fu_3644_p2 = (tmp_s_reg_6635 | 17'd59);

assign or_ln321_313_fu_3658_p2 = (tmp_s_reg_6635 | 17'd60);

assign or_ln321_314_fu_3672_p2 = (tmp_s_reg_6635 | 17'd61);

assign or_ln321_315_fu_3686_p2 = (tmp_s_reg_6635 | 17'd62);

assign or_ln321_316_fu_3700_p2 = (tmp_s_reg_6635 | 17'd63);

assign or_ln321_317_fu_3714_p2 = (tmp_s_reg_6635 | 17'd64);

assign or_ln321_318_fu_3728_p2 = (tmp_s_reg_6635 | 17'd65);

assign or_ln321_319_fu_3742_p2 = (tmp_s_reg_6635 | 17'd66);

assign or_ln321_320_fu_3756_p2 = (tmp_s_reg_6635 | 17'd67);

assign or_ln321_321_fu_3770_p2 = (tmp_s_reg_6635 | 17'd68);

assign or_ln321_322_fu_3784_p2 = (tmp_s_reg_6635 | 17'd69);

assign or_ln321_323_fu_3798_p2 = (tmp_s_reg_6635 | 17'd70);

assign or_ln321_324_fu_3812_p2 = (tmp_s_reg_6635 | 17'd71);

assign or_ln321_325_fu_3826_p2 = (tmp_s_reg_6635 | 17'd72);

assign or_ln321_326_fu_3840_p2 = (tmp_s_reg_6635 | 17'd73);

assign or_ln321_327_fu_3854_p2 = (tmp_s_reg_6635 | 17'd74);

assign or_ln321_328_fu_3868_p2 = (tmp_s_reg_6635 | 17'd75);

assign or_ln321_329_fu_3882_p2 = (tmp_s_reg_6635 | 17'd76);

assign or_ln321_330_fu_3896_p2 = (tmp_s_reg_6635 | 17'd77);

assign or_ln321_331_fu_3910_p2 = (tmp_s_reg_6635 | 17'd78);

assign or_ln321_332_fu_3924_p2 = (tmp_s_reg_6635 | 17'd79);

assign or_ln321_333_fu_3938_p2 = (tmp_s_reg_6635 | 17'd80);

assign or_ln321_334_fu_3952_p2 = (tmp_s_reg_6635 | 17'd81);

assign or_ln321_335_fu_3966_p2 = (tmp_s_reg_6635 | 17'd82);

assign or_ln321_336_fu_3980_p2 = (tmp_s_reg_6635 | 17'd83);

assign or_ln321_337_fu_3994_p2 = (tmp_s_reg_6635 | 17'd84);

assign or_ln321_338_fu_4008_p2 = (tmp_s_reg_6635 | 17'd85);

assign or_ln321_339_fu_4022_p2 = (tmp_s_reg_6635 | 17'd86);

assign or_ln321_340_fu_4036_p2 = (tmp_s_reg_6635 | 17'd87);

assign or_ln321_341_fu_4050_p2 = (tmp_s_reg_6635 | 17'd88);

assign or_ln321_342_fu_4064_p2 = (tmp_s_reg_6635 | 17'd89);

assign or_ln321_343_fu_4078_p2 = (tmp_s_reg_6635 | 17'd90);

assign or_ln321_344_fu_4092_p2 = (tmp_s_reg_6635 | 17'd91);

assign or_ln321_345_fu_4106_p2 = (tmp_s_reg_6635 | 17'd92);

assign or_ln321_346_fu_4120_p2 = (tmp_s_reg_6635 | 17'd93);

assign or_ln321_347_fu_4134_p2 = (tmp_s_reg_6635 | 17'd94);

assign or_ln321_348_fu_4148_p2 = (tmp_s_reg_6635 | 17'd95);

assign or_ln321_349_fu_4162_p2 = (tmp_s_reg_6635 | 17'd96);

assign or_ln321_350_fu_4176_p2 = (tmp_s_reg_6635 | 17'd97);

assign or_ln321_351_fu_4190_p2 = (tmp_s_reg_6635 | 17'd98);

assign or_ln321_352_fu_4204_p2 = (tmp_s_reg_6635 | 17'd99);

assign or_ln321_353_fu_4218_p2 = (tmp_s_reg_6635 | 17'd100);

assign or_ln321_354_fu_4232_p2 = (tmp_s_reg_6635 | 17'd101);

assign or_ln321_355_fu_4246_p2 = (tmp_s_reg_6635 | 17'd102);

assign or_ln321_356_fu_4260_p2 = (tmp_s_reg_6635 | 17'd103);

assign or_ln321_357_fu_4274_p2 = (tmp_s_reg_6635 | 17'd104);

assign or_ln321_358_fu_4288_p2 = (tmp_s_reg_6635 | 17'd105);

assign or_ln321_359_fu_4302_p2 = (tmp_s_reg_6635 | 17'd106);

assign or_ln321_360_fu_4316_p2 = (tmp_s_reg_6635 | 17'd107);

assign or_ln321_361_fu_4330_p2 = (tmp_s_reg_6635 | 17'd108);

assign or_ln321_362_fu_4344_p2 = (tmp_s_reg_6635 | 17'd109);

assign or_ln321_363_fu_4358_p2 = (tmp_s_reg_6635 | 17'd110);

assign or_ln321_364_fu_4372_p2 = (tmp_s_reg_6635 | 17'd111);

assign or_ln321_365_fu_4386_p2 = (tmp_s_reg_6635 | 17'd112);

assign or_ln321_366_fu_4400_p2 = (tmp_s_reg_6635 | 17'd113);

assign or_ln321_367_fu_4414_p2 = (tmp_s_reg_6635 | 17'd114);

assign or_ln321_368_fu_4428_p2 = (tmp_s_reg_6635 | 17'd115);

assign or_ln321_369_fu_4442_p2 = (tmp_s_reg_6635 | 17'd116);

assign or_ln321_370_fu_4456_p2 = (tmp_s_reg_6635 | 17'd117);

assign or_ln321_371_fu_4470_p2 = (tmp_s_reg_6635 | 17'd118);

assign or_ln321_372_fu_4484_p2 = (tmp_s_reg_6635 | 17'd119);

assign or_ln321_373_fu_4498_p2 = (tmp_s_reg_6635 | 17'd120);

assign or_ln321_374_fu_4512_p2 = (tmp_s_reg_6635 | 17'd121);

assign or_ln321_375_fu_4526_p2 = (tmp_s_reg_6635 | 17'd122);

assign or_ln321_376_fu_4540_p2 = (tmp_s_reg_6635 | 17'd123);

assign or_ln321_377_fu_4554_p2 = (tmp_s_reg_6635 | 17'd124);

assign or_ln321_378_fu_4568_p2 = (tmp_s_reg_6635 | 17'd125);

assign or_ln321_379_fu_4582_p2 = (tmp_s_reg_6635 | 17'd126);

assign or_ln321_380_fu_4596_p2 = (tmp_s_reg_6635 | 17'd127);

assign or_ln321_381_fu_4610_p2 = (tmp_s_reg_6635 | 17'd128);

assign or_ln321_382_fu_4624_p2 = (tmp_s_reg_6635 | 17'd129);

assign or_ln321_383_fu_4638_p2 = (tmp_s_reg_6635 | 17'd130);

assign or_ln321_384_fu_4652_p2 = (tmp_s_reg_6635 | 17'd131);

assign or_ln321_385_fu_4666_p2 = (tmp_s_reg_6635 | 17'd132);

assign or_ln321_386_fu_4680_p2 = (tmp_s_reg_6635 | 17'd133);

assign or_ln321_387_fu_4694_p2 = (tmp_s_reg_6635 | 17'd134);

assign or_ln321_388_fu_4708_p2 = (tmp_s_reg_6635 | 17'd135);

assign or_ln321_389_fu_4722_p2 = (tmp_s_reg_6635 | 17'd136);

assign or_ln321_390_fu_4736_p2 = (tmp_s_reg_6635 | 17'd137);

assign or_ln321_391_fu_4750_p2 = (tmp_s_reg_6635 | 17'd138);

assign or_ln321_392_fu_4764_p2 = (tmp_s_reg_6635 | 17'd139);

assign or_ln321_393_fu_4778_p2 = (tmp_s_reg_6635 | 17'd140);

assign or_ln321_394_fu_4792_p2 = (tmp_s_reg_6635 | 17'd141);

assign or_ln321_395_fu_4806_p2 = (tmp_s_reg_6635 | 17'd142);

assign or_ln321_396_fu_4820_p2 = (tmp_s_reg_6635 | 17'd143);

assign or_ln321_397_fu_4834_p2 = (tmp_s_reg_6635 | 17'd144);

assign or_ln321_398_fu_4848_p2 = (tmp_s_reg_6635 | 17'd145);

assign or_ln321_399_fu_4862_p2 = (tmp_s_reg_6635 | 17'd146);

assign or_ln321_400_fu_4876_p2 = (tmp_s_reg_6635 | 17'd147);

assign or_ln321_401_fu_4890_p2 = (tmp_s_reg_6635 | 17'd148);

assign or_ln321_402_fu_4904_p2 = (tmp_s_reg_6635 | 17'd149);

assign or_ln321_403_fu_4918_p2 = (tmp_s_reg_6635 | 17'd150);

assign or_ln321_404_fu_4932_p2 = (tmp_s_reg_6635 | 17'd151);

assign or_ln321_405_fu_4946_p2 = (tmp_s_reg_6635 | 17'd152);

assign or_ln321_406_fu_4960_p2 = (tmp_s_reg_6635 | 17'd153);

assign or_ln321_407_fu_4974_p2 = (tmp_s_reg_6635 | 17'd154);

assign or_ln321_408_fu_4988_p2 = (tmp_s_reg_6635 | 17'd155);

assign or_ln321_409_fu_5002_p2 = (tmp_s_reg_6635 | 17'd156);

assign or_ln321_410_fu_5016_p2 = (tmp_s_reg_6635 | 17'd157);

assign or_ln321_411_fu_5030_p2 = (tmp_s_reg_6635 | 17'd158);

assign or_ln321_412_fu_5044_p2 = (tmp_s_reg_6635 | 17'd159);

assign or_ln321_413_fu_5058_p2 = (tmp_s_reg_6635 | 17'd160);

assign or_ln321_414_fu_5072_p2 = (tmp_s_reg_6635 | 17'd161);

assign or_ln321_415_fu_5086_p2 = (tmp_s_reg_6635 | 17'd162);

assign or_ln321_416_fu_5100_p2 = (tmp_s_reg_6635 | 17'd163);

assign or_ln321_417_fu_5114_p2 = (tmp_s_reg_6635 | 17'd164);

assign or_ln321_418_fu_5128_p2 = (tmp_s_reg_6635 | 17'd165);

assign or_ln321_419_fu_5142_p2 = (tmp_s_reg_6635 | 17'd166);

assign or_ln321_420_fu_5156_p2 = (tmp_s_reg_6635 | 17'd167);

assign or_ln321_421_fu_5170_p2 = (tmp_s_reg_6635 | 17'd168);

assign or_ln321_422_fu_5184_p2 = (tmp_s_reg_6635 | 17'd169);

assign or_ln321_423_fu_5198_p2 = (tmp_s_reg_6635 | 17'd170);

assign or_ln321_424_fu_5212_p2 = (tmp_s_reg_6635 | 17'd171);

assign or_ln321_425_fu_5226_p2 = (tmp_s_reg_6635 | 17'd172);

assign or_ln321_426_fu_5240_p2 = (tmp_s_reg_6635 | 17'd173);

assign or_ln321_427_fu_5254_p2 = (tmp_s_reg_6635 | 17'd174);

assign or_ln321_428_fu_5268_p2 = (tmp_s_reg_6635 | 17'd175);

assign or_ln321_429_fu_5282_p2 = (tmp_s_reg_6635 | 17'd176);

assign or_ln321_430_fu_5296_p2 = (tmp_s_reg_6635 | 17'd177);

assign or_ln321_431_fu_5310_p2 = (tmp_s_reg_6635 | 17'd178);

assign or_ln321_432_fu_5324_p2 = (tmp_s_reg_6635 | 17'd179);

assign or_ln321_433_fu_5338_p2 = (tmp_s_reg_6635 | 17'd180);

assign or_ln321_434_fu_5352_p2 = (tmp_s_reg_6635 | 17'd181);

assign or_ln321_435_fu_5366_p2 = (tmp_s_reg_6635 | 17'd182);

assign or_ln321_436_fu_5380_p2 = (tmp_s_reg_6635 | 17'd183);

assign or_ln321_437_fu_5394_p2 = (tmp_s_reg_6635 | 17'd184);

assign or_ln321_438_fu_5408_p2 = (tmp_s_reg_6635 | 17'd185);

assign or_ln321_439_fu_5422_p2 = (tmp_s_reg_6635 | 17'd186);

assign or_ln321_440_fu_5436_p2 = (tmp_s_reg_6635 | 17'd187);

assign or_ln321_441_fu_5450_p2 = (tmp_s_reg_6635 | 17'd188);

assign or_ln321_442_fu_5464_p2 = (tmp_s_reg_6635 | 17'd189);

assign or_ln321_443_fu_5478_p2 = (tmp_s_reg_6635 | 17'd190);

assign or_ln321_444_fu_5492_p2 = (tmp_s_reg_6635 | 17'd191);

assign or_ln321_445_fu_5506_p2 = (tmp_s_reg_6635 | 17'd192);

assign or_ln321_446_fu_5520_p2 = (tmp_s_reg_6635 | 17'd193);

assign or_ln321_447_fu_5534_p2 = (tmp_s_reg_6635 | 17'd194);

assign or_ln321_448_fu_5548_p2 = (tmp_s_reg_6635 | 17'd195);

assign or_ln321_449_fu_5562_p2 = (tmp_s_reg_6635 | 17'd196);

assign or_ln321_450_fu_5576_p2 = (tmp_s_reg_6635 | 17'd197);

assign or_ln321_451_fu_5590_p2 = (tmp_s_reg_6635 | 17'd198);

assign or_ln321_452_fu_5604_p2 = (tmp_s_reg_6635 | 17'd199);

assign or_ln321_453_fu_5618_p2 = (tmp_s_reg_6635 | 17'd200);

assign or_ln321_454_fu_5632_p2 = (tmp_s_reg_6635 | 17'd201);

assign or_ln321_455_fu_5646_p2 = (tmp_s_reg_6635 | 17'd202);

assign or_ln321_456_fu_5660_p2 = (tmp_s_reg_6635 | 17'd203);

assign or_ln321_457_fu_5674_p2 = (tmp_s_reg_6635 | 17'd204);

assign or_ln321_458_fu_5688_p2 = (tmp_s_reg_6635 | 17'd205);

assign or_ln321_459_fu_5702_p2 = (tmp_s_reg_6635 | 17'd206);

assign or_ln321_460_fu_5716_p2 = (tmp_s_reg_6635 | 17'd207);

assign or_ln321_461_fu_5730_p2 = (tmp_s_reg_6635 | 17'd208);

assign or_ln321_462_fu_5744_p2 = (tmp_s_reg_6635 | 17'd209);

assign or_ln321_463_fu_5758_p2 = (tmp_s_reg_6635 | 17'd210);

assign or_ln321_464_fu_5772_p2 = (tmp_s_reg_6635 | 17'd211);

assign or_ln321_465_fu_5786_p2 = (tmp_s_reg_6635 | 17'd212);

assign or_ln321_466_fu_5800_p2 = (tmp_s_reg_6635 | 17'd213);

assign or_ln321_467_fu_5814_p2 = (tmp_s_reg_6635 | 17'd214);

assign or_ln321_468_fu_5828_p2 = (tmp_s_reg_6635 | 17'd215);

assign or_ln321_469_fu_5842_p2 = (tmp_s_reg_6635 | 17'd216);

assign or_ln321_470_fu_5856_p2 = (tmp_s_reg_6635 | 17'd217);

assign or_ln321_471_fu_5870_p2 = (tmp_s_reg_6635 | 17'd218);

assign or_ln321_472_fu_5884_p2 = (tmp_s_reg_6635 | 17'd219);

assign or_ln321_473_fu_5898_p2 = (tmp_s_reg_6635 | 17'd220);

assign or_ln321_474_fu_5912_p2 = (tmp_s_reg_6635 | 17'd221);

assign or_ln321_475_fu_5926_p2 = (tmp_s_reg_6635 | 17'd222);

assign or_ln321_476_fu_5940_p2 = (tmp_s_reg_6635 | 17'd223);

assign or_ln321_477_fu_5954_p2 = (tmp_s_reg_6635 | 17'd224);

assign or_ln321_478_fu_5968_p2 = (tmp_s_reg_6635 | 17'd225);

assign or_ln321_479_fu_5982_p2 = (tmp_s_reg_6635 | 17'd226);

assign or_ln321_480_fu_5996_p2 = (tmp_s_reg_6635 | 17'd227);

assign or_ln321_481_fu_6010_p2 = (tmp_s_reg_6635 | 17'd228);

assign or_ln321_482_fu_6024_p2 = (tmp_s_reg_6635 | 17'd229);

assign or_ln321_483_fu_6038_p2 = (tmp_s_reg_6635 | 17'd230);

assign or_ln321_484_fu_6052_p2 = (tmp_s_reg_6635 | 17'd231);

assign or_ln321_485_fu_6066_p2 = (tmp_s_reg_6635 | 17'd232);

assign or_ln321_486_fu_6080_p2 = (tmp_s_reg_6635 | 17'd233);

assign or_ln321_487_fu_6094_p2 = (tmp_s_reg_6635 | 17'd234);

assign or_ln321_488_fu_6108_p2 = (tmp_s_reg_6635 | 17'd235);

assign or_ln321_489_fu_6122_p2 = (tmp_s_reg_6635 | 17'd236);

assign or_ln321_490_fu_6136_p2 = (tmp_s_reg_6635 | 17'd237);

assign or_ln321_491_fu_6150_p2 = (tmp_s_reg_6635 | 17'd238);

assign or_ln321_492_fu_6164_p2 = (tmp_s_reg_6635 | 17'd239);

assign or_ln321_493_fu_6178_p2 = (tmp_s_reg_6635 | 17'd240);

assign or_ln321_494_fu_6192_p2 = (tmp_s_reg_6635 | 17'd241);

assign or_ln321_495_fu_6206_p2 = (tmp_s_reg_6635 | 17'd242);

assign or_ln321_496_fu_6220_p2 = (tmp_s_reg_6635 | 17'd243);

assign or_ln321_497_fu_6234_p2 = (tmp_s_reg_6635 | 17'd244);

assign or_ln321_498_fu_6248_p2 = (tmp_s_reg_6635 | 17'd245);

assign or_ln321_499_fu_6262_p2 = (tmp_s_reg_6635 | 17'd246);

assign or_ln321_500_fu_6276_p2 = (tmp_s_reg_6635 | 17'd247);

assign or_ln321_501_fu_6290_p2 = (tmp_s_reg_6635 | 17'd248);

assign or_ln321_502_fu_6304_p2 = (tmp_s_reg_6635 | 17'd249);

assign or_ln321_503_fu_6318_p2 = (tmp_s_reg_6635 | 17'd250);

assign or_ln321_504_fu_6332_p2 = (tmp_s_reg_6635 | 17'd251);

assign or_ln321_505_fu_6346_p2 = (tmp_s_reg_6635 | 17'd252);

assign or_ln321_506_fu_6360_p2 = (tmp_s_reg_6635 | 17'd253);

assign or_ln321_507_fu_6374_p2 = (tmp_s_reg_6635 | 17'd254);

assign or_ln321_508_fu_6388_p2 = (tmp_s_reg_6635 | 17'd255);

assign or_ln321_fu_2831_p2 = (tmp_s_fu_2818_p3 | 17'd1);

assign or_ln531_1_fu_6557_p2 = (trunc_ln528_reg_6937 | 8'd2);

assign or_ln531_2_fu_6574_p2 = (trunc_ln528_reg_6937 | 8'd3);

assign or_ln531_fu_6538_p2 = (trunc_ln528_fu_6519_p1 | 8'd1);

assign pixels_y_V_fu_6416_p4 = {{Input_1_V_V_dout[15:8]}};

assign select_ln531_1_fu_6499_p3 = ((tmp_3_fu_6483_p3[0:0] === 1'b1) ? i_fu_6477_p2 : ap_phi_mux_i_0_phi_fu_2767_p4);

assign select_ln531_fu_6491_p3 = ((tmp_3_fu_6483_p3[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_j_0_phi_fu_2778_p4);

assign tmp_258_fu_2837_p3 = {{47'd0}, {or_ln321_fu_2831_p2}};

assign tmp_259_fu_2851_p3 = {{47'd0}, {or_ln321_255_fu_2846_p2}};

assign tmp_260_fu_2865_p3 = {{47'd0}, {or_ln321_256_fu_2860_p2}};

assign tmp_261_fu_2879_p3 = {{47'd0}, {or_ln321_257_fu_2874_p2}};

assign tmp_262_fu_2893_p3 = {{47'd0}, {or_ln321_258_fu_2888_p2}};

assign tmp_263_fu_2907_p3 = {{47'd0}, {or_ln321_259_fu_2902_p2}};

assign tmp_264_fu_2921_p3 = {{47'd0}, {or_ln321_260_fu_2916_p2}};

assign tmp_265_fu_2935_p3 = {{47'd0}, {or_ln321_261_fu_2930_p2}};

assign tmp_266_fu_2949_p3 = {{47'd0}, {or_ln321_262_fu_2944_p2}};

assign tmp_267_fu_2963_p3 = {{47'd0}, {or_ln321_263_fu_2958_p2}};

assign tmp_268_fu_2977_p3 = {{47'd0}, {or_ln321_264_fu_2972_p2}};

assign tmp_269_fu_2991_p3 = {{47'd0}, {or_ln321_265_fu_2986_p2}};

assign tmp_270_fu_3005_p3 = {{47'd0}, {or_ln321_266_fu_3000_p2}};

assign tmp_271_fu_3019_p3 = {{47'd0}, {or_ln321_267_fu_3014_p2}};

assign tmp_272_fu_3033_p3 = {{47'd0}, {or_ln321_268_fu_3028_p2}};

assign tmp_273_fu_3047_p3 = {{47'd0}, {or_ln321_269_fu_3042_p2}};

assign tmp_274_fu_3061_p3 = {{47'd0}, {or_ln321_270_fu_3056_p2}};

assign tmp_275_fu_3075_p3 = {{47'd0}, {or_ln321_271_fu_3070_p2}};

assign tmp_276_fu_3089_p3 = {{47'd0}, {or_ln321_272_fu_3084_p2}};

assign tmp_277_fu_3103_p3 = {{47'd0}, {or_ln321_273_fu_3098_p2}};

assign tmp_278_fu_3117_p3 = {{47'd0}, {or_ln321_274_fu_3112_p2}};

assign tmp_279_fu_3131_p3 = {{47'd0}, {or_ln321_275_fu_3126_p2}};

assign tmp_280_fu_3145_p3 = {{47'd0}, {or_ln321_276_fu_3140_p2}};

assign tmp_281_fu_3159_p3 = {{47'd0}, {or_ln321_277_fu_3154_p2}};

assign tmp_282_fu_3173_p3 = {{47'd0}, {or_ln321_278_fu_3168_p2}};

assign tmp_283_fu_3187_p3 = {{47'd0}, {or_ln321_279_fu_3182_p2}};

assign tmp_284_fu_3201_p3 = {{47'd0}, {or_ln321_280_fu_3196_p2}};

assign tmp_285_fu_3215_p3 = {{47'd0}, {or_ln321_281_fu_3210_p2}};

assign tmp_286_fu_3229_p3 = {{47'd0}, {or_ln321_282_fu_3224_p2}};

assign tmp_287_fu_3243_p3 = {{47'd0}, {or_ln321_283_fu_3238_p2}};

assign tmp_288_fu_3257_p3 = {{47'd0}, {or_ln321_284_fu_3252_p2}};

assign tmp_289_fu_3271_p3 = {{47'd0}, {or_ln321_285_fu_3266_p2}};

assign tmp_290_fu_3285_p3 = {{47'd0}, {or_ln321_286_fu_3280_p2}};

assign tmp_291_fu_3299_p3 = {{47'd0}, {or_ln321_287_fu_3294_p2}};

assign tmp_292_fu_3313_p3 = {{47'd0}, {or_ln321_288_fu_3308_p2}};

assign tmp_293_fu_3327_p3 = {{47'd0}, {or_ln321_289_fu_3322_p2}};

assign tmp_294_fu_3341_p3 = {{47'd0}, {or_ln321_290_fu_3336_p2}};

assign tmp_295_fu_3355_p3 = {{47'd0}, {or_ln321_291_fu_3350_p2}};

assign tmp_296_fu_3369_p3 = {{47'd0}, {or_ln321_292_fu_3364_p2}};

assign tmp_297_fu_3383_p3 = {{47'd0}, {or_ln321_293_fu_3378_p2}};

assign tmp_298_fu_3397_p3 = {{47'd0}, {or_ln321_294_fu_3392_p2}};

assign tmp_299_fu_3411_p3 = {{47'd0}, {or_ln321_295_fu_3406_p2}};

assign tmp_300_fu_3425_p3 = {{47'd0}, {or_ln321_296_fu_3420_p2}};

assign tmp_301_fu_3439_p3 = {{47'd0}, {or_ln321_297_fu_3434_p2}};

assign tmp_302_fu_3453_p3 = {{47'd0}, {or_ln321_298_fu_3448_p2}};

assign tmp_303_fu_3467_p3 = {{47'd0}, {or_ln321_299_fu_3462_p2}};

assign tmp_304_fu_3481_p3 = {{47'd0}, {or_ln321_300_fu_3476_p2}};

assign tmp_305_fu_3495_p3 = {{47'd0}, {or_ln321_301_fu_3490_p2}};

assign tmp_306_fu_3509_p3 = {{47'd0}, {or_ln321_302_fu_3504_p2}};

assign tmp_307_fu_3523_p3 = {{47'd0}, {or_ln321_303_fu_3518_p2}};

assign tmp_308_fu_3537_p3 = {{47'd0}, {or_ln321_304_fu_3532_p2}};

assign tmp_309_fu_3551_p3 = {{47'd0}, {or_ln321_305_fu_3546_p2}};

assign tmp_310_fu_3565_p3 = {{47'd0}, {or_ln321_306_fu_3560_p2}};

assign tmp_311_fu_3579_p3 = {{47'd0}, {or_ln321_307_fu_3574_p2}};

assign tmp_312_fu_3593_p3 = {{47'd0}, {or_ln321_308_fu_3588_p2}};

assign tmp_313_fu_3607_p3 = {{47'd0}, {or_ln321_309_fu_3602_p2}};

assign tmp_314_fu_3621_p3 = {{47'd0}, {or_ln321_310_fu_3616_p2}};

assign tmp_315_fu_3635_p3 = {{47'd0}, {or_ln321_311_fu_3630_p2}};

assign tmp_316_fu_3649_p3 = {{47'd0}, {or_ln321_312_fu_3644_p2}};

assign tmp_317_fu_3663_p3 = {{47'd0}, {or_ln321_313_fu_3658_p2}};

assign tmp_318_fu_3677_p3 = {{47'd0}, {or_ln321_314_fu_3672_p2}};

assign tmp_319_fu_3691_p3 = {{47'd0}, {or_ln321_315_fu_3686_p2}};

assign tmp_320_fu_3705_p3 = {{47'd0}, {or_ln321_316_fu_3700_p2}};

assign tmp_321_fu_3719_p3 = {{47'd0}, {or_ln321_317_fu_3714_p2}};

assign tmp_322_fu_3733_p3 = {{47'd0}, {or_ln321_318_fu_3728_p2}};

assign tmp_323_fu_3747_p3 = {{47'd0}, {or_ln321_319_fu_3742_p2}};

assign tmp_324_fu_3761_p3 = {{47'd0}, {or_ln321_320_fu_3756_p2}};

assign tmp_325_fu_3775_p3 = {{47'd0}, {or_ln321_321_fu_3770_p2}};

assign tmp_326_fu_3789_p3 = {{47'd0}, {or_ln321_322_fu_3784_p2}};

assign tmp_327_fu_3803_p3 = {{47'd0}, {or_ln321_323_fu_3798_p2}};

assign tmp_328_fu_3817_p3 = {{47'd0}, {or_ln321_324_fu_3812_p2}};

assign tmp_329_fu_3831_p3 = {{47'd0}, {or_ln321_325_fu_3826_p2}};

assign tmp_330_fu_3845_p3 = {{47'd0}, {or_ln321_326_fu_3840_p2}};

assign tmp_331_fu_3859_p3 = {{47'd0}, {or_ln321_327_fu_3854_p2}};

assign tmp_332_fu_3873_p3 = {{47'd0}, {or_ln321_328_fu_3868_p2}};

assign tmp_333_fu_3887_p3 = {{47'd0}, {or_ln321_329_fu_3882_p2}};

assign tmp_334_fu_3901_p3 = {{47'd0}, {or_ln321_330_fu_3896_p2}};

assign tmp_335_fu_3915_p3 = {{47'd0}, {or_ln321_331_fu_3910_p2}};

assign tmp_336_fu_3929_p3 = {{47'd0}, {or_ln321_332_fu_3924_p2}};

assign tmp_337_fu_3943_p3 = {{47'd0}, {or_ln321_333_fu_3938_p2}};

assign tmp_338_fu_3957_p3 = {{47'd0}, {or_ln321_334_fu_3952_p2}};

assign tmp_339_fu_3971_p3 = {{47'd0}, {or_ln321_335_fu_3966_p2}};

assign tmp_340_fu_3985_p3 = {{47'd0}, {or_ln321_336_fu_3980_p2}};

assign tmp_341_fu_3999_p3 = {{47'd0}, {or_ln321_337_fu_3994_p2}};

assign tmp_342_fu_4013_p3 = {{47'd0}, {or_ln321_338_fu_4008_p2}};

assign tmp_343_fu_4027_p3 = {{47'd0}, {or_ln321_339_fu_4022_p2}};

assign tmp_344_fu_4041_p3 = {{47'd0}, {or_ln321_340_fu_4036_p2}};

assign tmp_345_fu_4055_p3 = {{47'd0}, {or_ln321_341_fu_4050_p2}};

assign tmp_346_fu_4069_p3 = {{47'd0}, {or_ln321_342_fu_4064_p2}};

assign tmp_347_fu_4083_p3 = {{47'd0}, {or_ln321_343_fu_4078_p2}};

assign tmp_348_fu_4097_p3 = {{47'd0}, {or_ln321_344_fu_4092_p2}};

assign tmp_349_fu_4111_p3 = {{47'd0}, {or_ln321_345_fu_4106_p2}};

assign tmp_350_fu_4125_p3 = {{47'd0}, {or_ln321_346_fu_4120_p2}};

assign tmp_351_fu_4139_p3 = {{47'd0}, {or_ln321_347_fu_4134_p2}};

assign tmp_352_fu_4153_p3 = {{47'd0}, {or_ln321_348_fu_4148_p2}};

assign tmp_353_fu_4167_p3 = {{47'd0}, {or_ln321_349_fu_4162_p2}};

assign tmp_354_fu_4181_p3 = {{47'd0}, {or_ln321_350_fu_4176_p2}};

assign tmp_355_fu_4195_p3 = {{47'd0}, {or_ln321_351_fu_4190_p2}};

assign tmp_356_fu_4209_p3 = {{47'd0}, {or_ln321_352_fu_4204_p2}};

assign tmp_357_fu_4223_p3 = {{47'd0}, {or_ln321_353_fu_4218_p2}};

assign tmp_358_fu_4237_p3 = {{47'd0}, {or_ln321_354_fu_4232_p2}};

assign tmp_359_fu_4251_p3 = {{47'd0}, {or_ln321_355_fu_4246_p2}};

assign tmp_360_fu_4265_p3 = {{47'd0}, {or_ln321_356_fu_4260_p2}};

assign tmp_361_fu_4279_p3 = {{47'd0}, {or_ln321_357_fu_4274_p2}};

assign tmp_362_fu_4293_p3 = {{47'd0}, {or_ln321_358_fu_4288_p2}};

assign tmp_363_fu_4307_p3 = {{47'd0}, {or_ln321_359_fu_4302_p2}};

assign tmp_364_fu_4321_p3 = {{47'd0}, {or_ln321_360_fu_4316_p2}};

assign tmp_365_fu_4335_p3 = {{47'd0}, {or_ln321_361_fu_4330_p2}};

assign tmp_366_fu_4349_p3 = {{47'd0}, {or_ln321_362_fu_4344_p2}};

assign tmp_367_fu_4363_p3 = {{47'd0}, {or_ln321_363_fu_4358_p2}};

assign tmp_368_fu_4377_p3 = {{47'd0}, {or_ln321_364_fu_4372_p2}};

assign tmp_369_fu_4391_p3 = {{47'd0}, {or_ln321_365_fu_4386_p2}};

assign tmp_370_fu_4405_p3 = {{47'd0}, {or_ln321_366_fu_4400_p2}};

assign tmp_371_fu_4419_p3 = {{47'd0}, {or_ln321_367_fu_4414_p2}};

assign tmp_372_fu_4433_p3 = {{47'd0}, {or_ln321_368_fu_4428_p2}};

assign tmp_373_fu_4447_p3 = {{47'd0}, {or_ln321_369_fu_4442_p2}};

assign tmp_374_fu_4461_p3 = {{47'd0}, {or_ln321_370_fu_4456_p2}};

assign tmp_375_fu_4475_p3 = {{47'd0}, {or_ln321_371_fu_4470_p2}};

assign tmp_376_fu_4489_p3 = {{47'd0}, {or_ln321_372_fu_4484_p2}};

assign tmp_377_fu_4503_p3 = {{47'd0}, {or_ln321_373_fu_4498_p2}};

assign tmp_378_fu_4517_p3 = {{47'd0}, {or_ln321_374_fu_4512_p2}};

assign tmp_379_fu_4531_p3 = {{47'd0}, {or_ln321_375_fu_4526_p2}};

assign tmp_380_fu_4545_p3 = {{47'd0}, {or_ln321_376_fu_4540_p2}};

assign tmp_381_fu_4559_p3 = {{47'd0}, {or_ln321_377_fu_4554_p2}};

assign tmp_382_fu_4573_p3 = {{47'd0}, {or_ln321_378_fu_4568_p2}};

assign tmp_383_fu_4587_p3 = {{47'd0}, {or_ln321_379_fu_4582_p2}};

assign tmp_384_fu_4601_p3 = {{47'd0}, {or_ln321_380_fu_4596_p2}};

assign tmp_385_fu_4615_p3 = {{47'd0}, {or_ln321_381_fu_4610_p2}};

assign tmp_386_fu_4629_p3 = {{47'd0}, {or_ln321_382_fu_4624_p2}};

assign tmp_387_fu_4643_p3 = {{47'd0}, {or_ln321_383_fu_4638_p2}};

assign tmp_388_fu_4657_p3 = {{47'd0}, {or_ln321_384_fu_4652_p2}};

assign tmp_389_fu_4671_p3 = {{47'd0}, {or_ln321_385_fu_4666_p2}};

assign tmp_390_fu_4685_p3 = {{47'd0}, {or_ln321_386_fu_4680_p2}};

assign tmp_391_fu_4699_p3 = {{47'd0}, {or_ln321_387_fu_4694_p2}};

assign tmp_392_fu_4713_p3 = {{47'd0}, {or_ln321_388_fu_4708_p2}};

assign tmp_393_fu_4727_p3 = {{47'd0}, {or_ln321_389_fu_4722_p2}};

assign tmp_394_fu_4741_p3 = {{47'd0}, {or_ln321_390_fu_4736_p2}};

assign tmp_395_fu_4755_p3 = {{47'd0}, {or_ln321_391_fu_4750_p2}};

assign tmp_396_fu_4769_p3 = {{47'd0}, {or_ln321_392_fu_4764_p2}};

assign tmp_397_fu_4783_p3 = {{47'd0}, {or_ln321_393_fu_4778_p2}};

assign tmp_398_fu_4797_p3 = {{47'd0}, {or_ln321_394_fu_4792_p2}};

assign tmp_399_fu_4811_p3 = {{47'd0}, {or_ln321_395_fu_4806_p2}};

assign tmp_3_fu_6483_p3 = ap_phi_mux_j_0_phi_fu_2778_p4[32'd8];

assign tmp_400_fu_4825_p3 = {{47'd0}, {or_ln321_396_fu_4820_p2}};

assign tmp_401_fu_4839_p3 = {{47'd0}, {or_ln321_397_fu_4834_p2}};

assign tmp_402_fu_4853_p3 = {{47'd0}, {or_ln321_398_fu_4848_p2}};

assign tmp_403_fu_4867_p3 = {{47'd0}, {or_ln321_399_fu_4862_p2}};

assign tmp_404_fu_4881_p3 = {{47'd0}, {or_ln321_400_fu_4876_p2}};

assign tmp_405_fu_4895_p3 = {{47'd0}, {or_ln321_401_fu_4890_p2}};

assign tmp_406_fu_4909_p3 = {{47'd0}, {or_ln321_402_fu_4904_p2}};

assign tmp_407_fu_4923_p3 = {{47'd0}, {or_ln321_403_fu_4918_p2}};

assign tmp_408_fu_4937_p3 = {{47'd0}, {or_ln321_404_fu_4932_p2}};

assign tmp_409_fu_4951_p3 = {{47'd0}, {or_ln321_405_fu_4946_p2}};

assign tmp_410_fu_4965_p3 = {{47'd0}, {or_ln321_406_fu_4960_p2}};

assign tmp_411_fu_4979_p3 = {{47'd0}, {or_ln321_407_fu_4974_p2}};

assign tmp_412_fu_4993_p3 = {{47'd0}, {or_ln321_408_fu_4988_p2}};

assign tmp_413_fu_5007_p3 = {{47'd0}, {or_ln321_409_fu_5002_p2}};

assign tmp_414_fu_5021_p3 = {{47'd0}, {or_ln321_410_fu_5016_p2}};

assign tmp_415_fu_5035_p3 = {{47'd0}, {or_ln321_411_fu_5030_p2}};

assign tmp_416_fu_5049_p3 = {{47'd0}, {or_ln321_412_fu_5044_p2}};

assign tmp_417_fu_5063_p3 = {{47'd0}, {or_ln321_413_fu_5058_p2}};

assign tmp_418_fu_5077_p3 = {{47'd0}, {or_ln321_414_fu_5072_p2}};

assign tmp_419_fu_5091_p3 = {{47'd0}, {or_ln321_415_fu_5086_p2}};

assign tmp_420_fu_5105_p3 = {{47'd0}, {or_ln321_416_fu_5100_p2}};

assign tmp_421_fu_5119_p3 = {{47'd0}, {or_ln321_417_fu_5114_p2}};

assign tmp_422_fu_5133_p3 = {{47'd0}, {or_ln321_418_fu_5128_p2}};

assign tmp_423_fu_5147_p3 = {{47'd0}, {or_ln321_419_fu_5142_p2}};

assign tmp_424_fu_5161_p3 = {{47'd0}, {or_ln321_420_fu_5156_p2}};

assign tmp_425_fu_5175_p3 = {{47'd0}, {or_ln321_421_fu_5170_p2}};

assign tmp_426_fu_5189_p3 = {{47'd0}, {or_ln321_422_fu_5184_p2}};

assign tmp_427_fu_5203_p3 = {{47'd0}, {or_ln321_423_fu_5198_p2}};

assign tmp_428_fu_5217_p3 = {{47'd0}, {or_ln321_424_fu_5212_p2}};

assign tmp_429_fu_5231_p3 = {{47'd0}, {or_ln321_425_fu_5226_p2}};

assign tmp_430_fu_5245_p3 = {{47'd0}, {or_ln321_426_fu_5240_p2}};

assign tmp_431_fu_5259_p3 = {{47'd0}, {or_ln321_427_fu_5254_p2}};

assign tmp_432_fu_5273_p3 = {{47'd0}, {or_ln321_428_fu_5268_p2}};

assign tmp_433_fu_5287_p3 = {{47'd0}, {or_ln321_429_fu_5282_p2}};

assign tmp_434_fu_5301_p3 = {{47'd0}, {or_ln321_430_fu_5296_p2}};

assign tmp_435_fu_5315_p3 = {{47'd0}, {or_ln321_431_fu_5310_p2}};

assign tmp_436_fu_5329_p3 = {{47'd0}, {or_ln321_432_fu_5324_p2}};

assign tmp_437_fu_5343_p3 = {{47'd0}, {or_ln321_433_fu_5338_p2}};

assign tmp_438_fu_5357_p3 = {{47'd0}, {or_ln321_434_fu_5352_p2}};

assign tmp_439_fu_5371_p3 = {{47'd0}, {or_ln321_435_fu_5366_p2}};

assign tmp_440_fu_5385_p3 = {{47'd0}, {or_ln321_436_fu_5380_p2}};

assign tmp_441_fu_5399_p3 = {{47'd0}, {or_ln321_437_fu_5394_p2}};

assign tmp_442_fu_5413_p3 = {{47'd0}, {or_ln321_438_fu_5408_p2}};

assign tmp_443_fu_5427_p3 = {{47'd0}, {or_ln321_439_fu_5422_p2}};

assign tmp_444_fu_5441_p3 = {{47'd0}, {or_ln321_440_fu_5436_p2}};

assign tmp_445_fu_5455_p3 = {{47'd0}, {or_ln321_441_fu_5450_p2}};

assign tmp_446_fu_5469_p3 = {{47'd0}, {or_ln321_442_fu_5464_p2}};

assign tmp_447_fu_5483_p3 = {{47'd0}, {or_ln321_443_fu_5478_p2}};

assign tmp_448_fu_5497_p3 = {{47'd0}, {or_ln321_444_fu_5492_p2}};

assign tmp_449_fu_5511_p3 = {{47'd0}, {or_ln321_445_fu_5506_p2}};

assign tmp_450_fu_5525_p3 = {{47'd0}, {or_ln321_446_fu_5520_p2}};

assign tmp_451_fu_5539_p3 = {{47'd0}, {or_ln321_447_fu_5534_p2}};

assign tmp_452_fu_5553_p3 = {{47'd0}, {or_ln321_448_fu_5548_p2}};

assign tmp_453_fu_5567_p3 = {{47'd0}, {or_ln321_449_fu_5562_p2}};

assign tmp_454_fu_5581_p3 = {{47'd0}, {or_ln321_450_fu_5576_p2}};

assign tmp_455_fu_5595_p3 = {{47'd0}, {or_ln321_451_fu_5590_p2}};

assign tmp_456_fu_5609_p3 = {{47'd0}, {or_ln321_452_fu_5604_p2}};

assign tmp_457_fu_5623_p3 = {{47'd0}, {or_ln321_453_fu_5618_p2}};

assign tmp_458_fu_5637_p3 = {{47'd0}, {or_ln321_454_fu_5632_p2}};

assign tmp_459_fu_5651_p3 = {{47'd0}, {or_ln321_455_fu_5646_p2}};

assign tmp_460_fu_5665_p3 = {{47'd0}, {or_ln321_456_fu_5660_p2}};

assign tmp_461_fu_5679_p3 = {{47'd0}, {or_ln321_457_fu_5674_p2}};

assign tmp_462_fu_5693_p3 = {{47'd0}, {or_ln321_458_fu_5688_p2}};

assign tmp_463_fu_5707_p3 = {{47'd0}, {or_ln321_459_fu_5702_p2}};

assign tmp_464_fu_5721_p3 = {{47'd0}, {or_ln321_460_fu_5716_p2}};

assign tmp_465_fu_5735_p3 = {{47'd0}, {or_ln321_461_fu_5730_p2}};

assign tmp_466_fu_5749_p3 = {{47'd0}, {or_ln321_462_fu_5744_p2}};

assign tmp_467_fu_5763_p3 = {{47'd0}, {or_ln321_463_fu_5758_p2}};

assign tmp_468_fu_5777_p3 = {{47'd0}, {or_ln321_464_fu_5772_p2}};

assign tmp_469_fu_5791_p3 = {{47'd0}, {or_ln321_465_fu_5786_p2}};

assign tmp_470_fu_5805_p3 = {{47'd0}, {or_ln321_466_fu_5800_p2}};

assign tmp_471_fu_5819_p3 = {{47'd0}, {or_ln321_467_fu_5814_p2}};

assign tmp_472_fu_5833_p3 = {{47'd0}, {or_ln321_468_fu_5828_p2}};

assign tmp_473_fu_5847_p3 = {{47'd0}, {or_ln321_469_fu_5842_p2}};

assign tmp_474_fu_5861_p3 = {{47'd0}, {or_ln321_470_fu_5856_p2}};

assign tmp_475_fu_5875_p3 = {{47'd0}, {or_ln321_471_fu_5870_p2}};

assign tmp_476_fu_5889_p3 = {{47'd0}, {or_ln321_472_fu_5884_p2}};

assign tmp_477_fu_5903_p3 = {{47'd0}, {or_ln321_473_fu_5898_p2}};

assign tmp_478_fu_5917_p3 = {{47'd0}, {or_ln321_474_fu_5912_p2}};

assign tmp_479_fu_5931_p3 = {{47'd0}, {or_ln321_475_fu_5926_p2}};

assign tmp_480_fu_5945_p3 = {{47'd0}, {or_ln321_476_fu_5940_p2}};

assign tmp_481_fu_5959_p3 = {{47'd0}, {or_ln321_477_fu_5954_p2}};

assign tmp_482_fu_5973_p3 = {{47'd0}, {or_ln321_478_fu_5968_p2}};

assign tmp_483_fu_5987_p3 = {{47'd0}, {or_ln321_479_fu_5982_p2}};

assign tmp_484_fu_6001_p3 = {{47'd0}, {or_ln321_480_fu_5996_p2}};

assign tmp_485_fu_6015_p3 = {{47'd0}, {or_ln321_481_fu_6010_p2}};

assign tmp_486_fu_6029_p3 = {{47'd0}, {or_ln321_482_fu_6024_p2}};

assign tmp_487_fu_6043_p3 = {{47'd0}, {or_ln321_483_fu_6038_p2}};

assign tmp_488_fu_6057_p3 = {{47'd0}, {or_ln321_484_fu_6052_p2}};

assign tmp_489_fu_6071_p3 = {{47'd0}, {or_ln321_485_fu_6066_p2}};

assign tmp_490_fu_6085_p3 = {{47'd0}, {or_ln321_486_fu_6080_p2}};

assign tmp_491_fu_6099_p3 = {{47'd0}, {or_ln321_487_fu_6094_p2}};

assign tmp_492_fu_6113_p3 = {{47'd0}, {or_ln321_488_fu_6108_p2}};

assign tmp_493_fu_6127_p3 = {{47'd0}, {or_ln321_489_fu_6122_p2}};

assign tmp_494_fu_6141_p3 = {{47'd0}, {or_ln321_490_fu_6136_p2}};

assign tmp_495_fu_6155_p3 = {{47'd0}, {or_ln321_491_fu_6150_p2}};

assign tmp_496_fu_6169_p3 = {{47'd0}, {or_ln321_492_fu_6164_p2}};

assign tmp_497_fu_6183_p3 = {{47'd0}, {or_ln321_493_fu_6178_p2}};

assign tmp_498_fu_6197_p3 = {{47'd0}, {or_ln321_494_fu_6192_p2}};

assign tmp_499_fu_6211_p3 = {{47'd0}, {or_ln321_495_fu_6206_p2}};

assign tmp_500_fu_6225_p3 = {{47'd0}, {or_ln321_496_fu_6220_p2}};

assign tmp_501_fu_6239_p3 = {{47'd0}, {or_ln321_497_fu_6234_p2}};

assign tmp_502_fu_6253_p3 = {{47'd0}, {or_ln321_498_fu_6248_p2}};

assign tmp_503_fu_6267_p3 = {{47'd0}, {or_ln321_499_fu_6262_p2}};

assign tmp_504_fu_6281_p3 = {{47'd0}, {or_ln321_500_fu_6276_p2}};

assign tmp_505_fu_6295_p3 = {{47'd0}, {or_ln321_501_fu_6290_p2}};

assign tmp_506_fu_6309_p3 = {{47'd0}, {or_ln321_502_fu_6304_p2}};

assign tmp_507_fu_6323_p3 = {{47'd0}, {or_ln321_503_fu_6318_p2}};

assign tmp_508_fu_6337_p3 = {{47'd0}, {or_ln321_504_fu_6332_p2}};

assign tmp_509_fu_6351_p3 = {{47'd0}, {or_ln321_505_fu_6346_p2}};

assign tmp_510_fu_6365_p3 = {{47'd0}, {or_ln321_506_fu_6360_p2}};

assign tmp_511_fu_6379_p3 = {{47'd0}, {or_ln321_507_fu_6374_p2}};

assign tmp_512_fu_6393_p3 = {{47'd0}, {or_ln321_508_fu_6388_p2}};

assign tmp_513_fu_6441_p3 = {{trunc_ln321_fu_6437_p1}, {pixels_y_V_fu_6416_p4}};

assign tmp_514_fu_6507_p3 = {{select_ln531_1_fu_6499_p3}, {8'd0}};

assign tmp_515_fu_6544_p3 = {{select_ln531_1_fu_6499_p3}, {or_ln531_fu_6538_p2}};

assign tmp_516_fu_6562_p3 = {{select_ln531_1_reg_6930}, {or_ln531_1_fu_6557_p2}};

assign tmp_517_fu_6579_p3 = {{select_ln531_1_reg_6930}, {or_ln531_2_fu_6574_p2}};

assign tmp_s_fu_2818_p3 = {{t_V_reg_2730}, {8'd0}};

assign trunc_ln321_fu_6437_p1 = Input_1_V_V_dout[7:0];

assign trunc_ln528_fu_6519_p1 = select_ln531_fu_6491_p3[7:0];

assign zext_ln215_10_fu_6533_p1 = add_ln215_fu_6527_p2;

assign zext_ln215_7_fu_6552_p1 = tmp_515_fu_6544_p3;

assign zext_ln215_8_fu_6569_p1 = tmp_516_fu_6562_p3;

assign zext_ln215_9_fu_6586_p1 = tmp_517_fu_6579_p3;

assign zext_ln215_fu_6523_p1 = select_ln531_fu_6491_p3;

assign zext_ln321_1_fu_6449_p1 = tmp_513_fu_6441_p3;

assign zext_ln321_fu_2826_p1 = tmp_s_fu_2818_p3;

assign zext_ln528_fu_6515_p1 = tmp_514_fu_6507_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_6635[7:0] <= 8'b00000000;
end

endmodule //coloringFB_bot_m
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_redir_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] tmp_V_reg_111;
reg    ap_block_state1;
reg   [31:0] tmp_V_14_reg_116;
reg   [7:0] triangle_2ds_1_x0_V_reg_121;
reg   [7:0] triangle_2ds_1_y0_V_reg_126;
reg   [7:0] triangle_2ds_1_x1_V_reg_131;
reg   [7:0] triangle_2ds_1_y1_V_reg_136;
reg   [7:0] triangle_2ds_1_x2_V_reg_141;
reg   [7:0] triangle_2ds_1_y2_V_reg_146;
reg   [7:0] triangle_2ds_1_z_V_reg_151;
wire    grp_rasterization1_odd_m_fu_50_ap_start;
wire    grp_rasterization1_odd_m_fu_50_ap_done;
wire    grp_rasterization1_odd_m_fu_50_ap_idle;
wire    grp_rasterization1_odd_m_fu_50_ap_ready;
wire   [31:0] grp_rasterization1_odd_m_fu_50_Output_1_V_V_din;
wire    grp_rasterization1_odd_m_fu_50_Output_1_V_V_write;
wire    call_ret_projection_odd_m_fu_75_ap_ready;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_0;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_1;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_2;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_3;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_4;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_5;
wire   [7:0] call_ret_projection_odd_m_fu_75_ap_return_6;
reg    grp_rasterization1_odd_m_fu_50_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_rasterization1_odd_m_fu_50_ap_start_reg = 1'b0;
end

rasterization1_odd_m grp_rasterization1_odd_m_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization1_odd_m_fu_50_ap_start),
    .ap_done(grp_rasterization1_odd_m_fu_50_ap_done),
    .ap_idle(grp_rasterization1_odd_m_fu_50_ap_idle),
    .ap_ready(grp_rasterization1_odd_m_fu_50_ap_ready),
    .triangle_2d_x0_V(triangle_2ds_1_x0_V_reg_121),
    .triangle_2d_y0_V(triangle_2ds_1_y0_V_reg_126),
    .triangle_2d_x1_V(triangle_2ds_1_x1_V_reg_131),
    .triangle_2d_y1_V(triangle_2ds_1_y1_V_reg_136),
    .triangle_2d_x2_V(triangle_2ds_1_x2_V_reg_141),
    .triangle_2d_y2_V(triangle_2ds_1_y2_V_reg_146),
    .triangle_2d_z_V(triangle_2ds_1_z_V_reg_151),
    .Output_1_V_V_din(grp_rasterization1_odd_m_fu_50_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_1_V_V_full_n),
    .Output_1_V_V_write(grp_rasterization1_odd_m_fu_50_Output_1_V_V_write)
);

projection_odd_m call_ret_projection_odd_m_fu_75(
    .ap_ready(call_ret_projection_odd_m_fu_75_ap_ready),
    .input_lo_V(tmp_V_reg_111),
    .input_mi_V(tmp_V_14_reg_116),
    .input_hi_V(Input_1_V_V),
    .ap_return_0(call_ret_projection_odd_m_fu_75_ap_return_0),
    .ap_return_1(call_ret_projection_odd_m_fu_75_ap_return_1),
    .ap_return_2(call_ret_projection_odd_m_fu_75_ap_return_2),
    .ap_return_3(call_ret_projection_odd_m_fu_75_ap_return_3),
    .ap_return_4(call_ret_projection_odd_m_fu_75_ap_return_4),
    .ap_return_5(call_ret_projection_odd_m_fu_75_ap_return_5),
    .ap_return_6(call_ret_projection_odd_m_fu_75_ap_return_6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization1_odd_m_fu_50_ap_ready == 1'b1)) begin
            grp_rasterization1_odd_m_fu_50_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_14_reg_116 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_111 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        triangle_2ds_1_x0_V_reg_121 <= call_ret_projection_odd_m_fu_75_ap_return_0;
        triangle_2ds_1_x1_V_reg_131 <= call_ret_projection_odd_m_fu_75_ap_return_2;
        triangle_2ds_1_x2_V_reg_141 <= call_ret_projection_odd_m_fu_75_ap_return_4;
        triangle_2ds_1_y0_V_reg_126 <= call_ret_projection_odd_m_fu_75_ap_return_1;
        triangle_2ds_1_y1_V_reg_136 <= call_ret_projection_odd_m_fu_75_ap_return_3;
        triangle_2ds_1_y2_V_reg_146 <= call_ret_projection_odd_m_fu_75_ap_return_5;
        triangle_2ds_1_z_V_reg_151 <= call_ret_projection_odd_m_fu_75_ap_return_6;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Output_1_V_V_write = grp_rasterization1_odd_m_fu_50_Output_1_V_V_write;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_rasterization1_odd_m_fu_50_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_din = grp_rasterization1_odd_m_fu_50_Output_1_V_V_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

assign grp_rasterization1_odd_m_fu_50_ap_start = grp_rasterization1_odd_m_fu_50_ap_start_reg;

endmodule //data_redir_m
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module fifo_w32_d1024_A
#(parameter
    MEM_STYLE   = "block",
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 10,
    DEPTH       = 1024
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
(* ram_style = MEM_STYLE *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [DATA_WIDTH-1:0] q_buf = 1'b0;
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH-1:0] usedw = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;
reg  [DATA_WIDTH-1:0] q_tmp = 1'b0;
reg                   show_ahead = 1'b0;
reg  [DATA_WIDTH-1:0] dout_buf = 1'b0;
reg                   dout_valid = 1'b0;


//------------------------Instantiation------------------

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = dout_valid;
assign if_dout    = dout_buf;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & (~dout_valid | if_read);
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// usedw
always @(posedge clk) begin
    if (reset == 1'b1)
        usedw <= 1'b0;
    else if (push & ~pop)
        usedw <= usedw + 1'b1;
    else if (~push & pop)
        usedw <= usedw - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (usedw != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (usedw != 1'b1);
end

// mem
always @(posedge clk) begin
    if (push)
        mem[waddr] <= if_din;
end

// q_buf
always @(posedge clk) begin
    q_buf <= mem[rnext];
end

// q_tmp
always @(posedge clk) begin
    if (reset == 1'b1)
        q_tmp <= 1'b0;
    else if (push)
        q_tmp <= if_din;
end

// show_ahead
always @(posedge clk) begin
    if (reset == 1'b1)
        show_ahead <= 1'b0;
    else if (push && usedw == pop)
        show_ahead <= 1'b1;
    else
        show_ahead <= 1'b0;
end

// dout_buf
always @(posedge clk) begin
    if (reset == 1'b1)
        dout_buf <= 1'b0;
    else if (pop)
        dout_buf <= show_ahead? q_tmp : q_buf;
end

// dout_valid
always @(posedge clk) begin
    if (reset == 1'b1)
        dout_valid <= 1'b0;
    else if (pop)
        dout_valid <= 1'b1;
    else if (if_read_ce & if_read)
        dout_valid <= 1'b0;
end

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_TRIANGLES_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] i_V_fu_203_p2;
reg   [11:0] i_V_reg_230;
wire    ap_CS_fsm_state2;
wire    grp_rasterization2_m_fu_143_ap_start;
wire    grp_rasterization2_m_fu_143_ap_done;
wire    grp_rasterization2_m_fu_143_ap_idle;
wire    grp_rasterization2_m_fu_143_ap_ready;
wire    grp_rasterization2_m_fu_143_Input_1_V_V_read;
wire   [31:0] grp_rasterization2_m_fu_143_Output_1_V_V_din;
wire    grp_rasterization2_m_fu_143_Output_1_V_V_write;
wire    grp_coloringFB_bot_m_fu_157_ap_start;
wire    grp_coloringFB_bot_m_fu_157_ap_done;
wire    grp_coloringFB_bot_m_fu_157_ap_idle;
wire    grp_coloringFB_bot_m_fu_157_ap_ready;
wire    grp_coloringFB_bot_m_fu_157_Input_1_V_V_read;
wire   [31:0] grp_coloringFB_bot_m_fu_157_Output_1_V_V;
wire    grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_vld;
wire    grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_ack;
wire    grp_zculling_top_fu_168_ap_start;
wire    grp_zculling_top_fu_168_ap_done;
wire    grp_zculling_top_fu_168_ap_idle;
wire    grp_zculling_top_fu_168_ap_ready;
wire    grp_zculling_top_fu_168_Input_1_V_V_read;
wire   [31:0] grp_zculling_top_fu_168_Output_1_V_V_din;
wire    grp_zculling_top_fu_168_Output_1_V_V_write;
wire    grp_data_redir_m_fu_178_ap_start;
wire    grp_data_redir_m_fu_178_ap_done;
wire    grp_data_redir_m_fu_178_ap_idle;
wire    grp_data_redir_m_fu_178_ap_ready;
wire    grp_data_redir_m_fu_178_Input_1_V_V_ap_ack;
wire   [31:0] grp_data_redir_m_fu_178_Output_1_V_V_din;
wire    grp_data_redir_m_fu_178_Output_1_V_V_write;
reg   [11:0] t_V_reg_132;
reg    ap_block_state1;
wire    ap_CS_fsm_state9;
reg    grp_rasterization2_m_fu_143_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [31:0] Output_redir_odd_V_V_dout;
wire    Output_redir_odd_V_V_empty_n;
reg    Output_redir_odd_V_V_read;
wire    ap_CS_fsm_state5;
wire    Output_r2_odd_top_V_s_full_n;
reg    Output_r2_odd_top_V_s_write;
reg    grp_coloringFB_bot_m_fu_157_ap_start_reg;
wire    ap_CS_fsm_state8;
wire   [31:0] Output_zcu_top_V_V_dout;
wire    Output_zcu_top_V_V_empty_n;
reg    Output_zcu_top_V_V_read;
reg    grp_zculling_top_fu_168_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [31:0] Output_r2_odd_top_V_s_dout;
wire    Output_r2_odd_top_V_s_empty_n;
reg    Output_r2_odd_top_V_s_read;
wire    ap_CS_fsm_state7;
wire    Output_zcu_top_V_V_full_n;
reg    Output_zcu_top_V_V_write;
reg    grp_data_redir_m_fu_178_ap_start_reg;
wire   [0:0] icmp_ln887_fu_197_p2;
wire    ap_CS_fsm_state3;
wire    Output_redir_odd_V_V_full_n;
reg    Output_redir_odd_V_V_write;
wire    ap_CS_fsm_state10;
wire    regslice_forward_Output_1_V_V_U_apdone_blk;
reg   [9:0] ap_NS_fsm;
wire    Output_1_V_V_ap_ack_int;
wire    regslice_forward_Output_1_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 grp_rasterization2_m_fu_143_ap_start_reg = 1'b0;
#0 grp_coloringFB_bot_m_fu_157_ap_start_reg = 1'b0;
#0 grp_zculling_top_fu_168_ap_start_reg = 1'b0;
#0 grp_data_redir_m_fu_178_ap_start_reg = 1'b0;
end

rasterization2_m grp_rasterization2_m_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization2_m_fu_143_ap_start),
    .ap_done(grp_rasterization2_m_fu_143_ap_done),
    .ap_idle(grp_rasterization2_m_fu_143_ap_idle),
    .ap_ready(grp_rasterization2_m_fu_143_ap_ready),
    .Input_1_V_V_dout(Output_redir_odd_V_V_dout),
    .Input_1_V_V_empty_n(Output_redir_odd_V_V_empty_n),
    .Input_1_V_V_read(grp_rasterization2_m_fu_143_Input_1_V_V_read),
    .Output_1_V_V_din(grp_rasterization2_m_fu_143_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_r2_odd_top_V_s_full_n),
    .Output_1_V_V_write(grp_rasterization2_m_fu_143_Output_1_V_V_write)
);

coloringFB_bot_m grp_coloringFB_bot_m_fu_157(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_coloringFB_bot_m_fu_157_ap_start),
    .ap_done(grp_coloringFB_bot_m_fu_157_ap_done),
    .ap_idle(grp_coloringFB_bot_m_fu_157_ap_idle),
    .ap_ready(grp_coloringFB_bot_m_fu_157_ap_ready),
    .Input_1_V_V_dout(Output_zcu_top_V_V_dout),
    .Input_1_V_V_empty_n(Output_zcu_top_V_V_empty_n),
    .Input_1_V_V_read(grp_coloringFB_bot_m_fu_157_Input_1_V_V_read),
    .Output_1_V_V(grp_coloringFB_bot_m_fu_157_Output_1_V_V),
    .Output_1_V_V_ap_vld(grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_ack)
);

zculling_top grp_zculling_top_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_zculling_top_fu_168_ap_start),
    .ap_done(grp_zculling_top_fu_168_ap_done),
    .ap_idle(grp_zculling_top_fu_168_ap_idle),
    .ap_ready(grp_zculling_top_fu_168_ap_ready),
    .Input_1_V_V_dout(Output_r2_odd_top_V_s_dout),
    .Input_1_V_V_empty_n(Output_r2_odd_top_V_s_empty_n),
    .Input_1_V_V_read(grp_zculling_top_fu_168_Input_1_V_V_read),
    .Output_1_V_V_din(grp_zculling_top_fu_168_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_zcu_top_V_V_full_n),
    .Output_1_V_V_write(grp_zculling_top_fu_168_Output_1_V_V_write)
);

data_redir_m grp_data_redir_m_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_data_redir_m_fu_178_ap_start),
    .ap_done(grp_data_redir_m_fu_178_ap_done),
    .ap_idle(grp_data_redir_m_fu_178_ap_idle),
    .ap_ready(grp_data_redir_m_fu_178_ap_ready),
    .Input_1_V_V(Input_1_V_V),
    .Input_1_V_V_ap_vld(Input_1_V_V_ap_vld),
    .Input_1_V_V_ap_ack(grp_data_redir_m_fu_178_Input_1_V_V_ap_ack),
    .Output_1_V_V_din(grp_data_redir_m_fu_178_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_redir_odd_V_V_full_n),
    .Output_1_V_V_write(grp_data_redir_m_fu_178_Output_1_V_V_write)
);

fifo_w32_d1024_A Output_redir_odd_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_data_redir_m_fu_178_Output_1_V_V_din),
    .if_full_n(Output_redir_odd_V_V_full_n),
    .if_write(Output_redir_odd_V_V_write),
    .if_dout(Output_redir_odd_V_V_dout),
    .if_empty_n(Output_redir_odd_V_V_empty_n),
    .if_read(Output_redir_odd_V_V_read)
);

fifo_w32_d1024_A Output_r2_odd_top_V_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_rasterization2_m_fu_143_Output_1_V_V_din),
    .if_full_n(Output_r2_odd_top_V_s_full_n),
    .if_write(Output_r2_odd_top_V_s_write),
    .if_dout(Output_r2_odd_top_V_s_dout),
    .if_empty_n(Output_r2_odd_top_V_s_empty_n),
    .if_read(Output_r2_odd_top_V_s_read)
);

fifo_w32_d1024_A Output_zcu_top_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_zculling_top_fu_168_Output_1_V_V_din),
    .if_full_n(Output_zcu_top_V_V_full_n),
    .if_write(Output_zcu_top_V_V_write),
    .if_dout(Output_zcu_top_V_V_dout),
    .if_empty_n(Output_zcu_top_V_V_empty_n),
    .if_read(Output_zcu_top_V_V_read)
);

regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_Output_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(grp_coloringFB_bot_m_fu_157_Output_1_V_V),
    .vld_in(grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_vld),
    .ack_in(Output_1_V_V_ap_ack_int),
    .data_out(Output_1_V_V),
    .vld_out(regslice_forward_Output_1_V_V_U_vld_out),
    .ack_out(Output_1_V_V_ap_ack),
    .apdone_blk(regslice_forward_Output_1_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_coloringFB_bot_m_fu_157_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_coloringFB_bot_m_fu_157_ap_start_reg <= 1'b1;
        end else if ((grp_coloringFB_bot_m_fu_157_ap_ready == 1'b1)) begin
            grp_coloringFB_bot_m_fu_157_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_data_redir_m_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln887_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_data_redir_m_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_data_redir_m_fu_178_ap_ready == 1'b1)) begin
            grp_data_redir_m_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization2_m_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_rasterization2_m_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization2_m_fu_143_ap_ready == 1'b1)) begin
            grp_rasterization2_m_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_zculling_top_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_zculling_top_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_zculling_top_fu_168_ap_ready == 1'b1)) begin
            grp_zculling_top_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_coloringFB_bot_m_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        t_V_reg_132 <= i_V_reg_230;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_132 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_230 <= i_V_fu_203_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Input_1_V_V_ap_ack = grp_data_redir_m_fu_178_Input_1_V_V_ap_ack;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Output_r2_odd_top_V_s_read = grp_zculling_top_fu_168_Input_1_V_V_read;
    end else begin
        Output_r2_odd_top_V_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Output_r2_odd_top_V_s_write = grp_rasterization2_m_fu_143_Output_1_V_V_write;
    end else begin
        Output_r2_odd_top_V_s_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Output_redir_odd_V_V_read = grp_rasterization2_m_fu_143_Input_1_V_V_read;
    end else begin
        Output_redir_odd_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Output_redir_odd_V_V_write = grp_data_redir_m_fu_178_Output_1_V_V_write;
    end else begin
        Output_redir_odd_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Output_zcu_top_V_V_read = grp_coloringFB_bot_m_fu_157_Input_1_V_V_read;
    end else begin
        Output_zcu_top_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Output_zcu_top_V_V_write = grp_zculling_top_fu_168_Output_1_V_V_write;
    end else begin
        Output_zcu_top_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_data_redir_m_fu_178_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_rasterization2_m_fu_143_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_zculling_top_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_coloringFB_bot_m_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_ap_vld = regslice_forward_Output_1_V_V_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_coloringFB_bot_m_fu_157_Output_1_V_V_ap_ack = (ap_CS_fsm_state9 & Output_1_V_V_ap_ack_int);

assign grp_coloringFB_bot_m_fu_157_ap_start = grp_coloringFB_bot_m_fu_157_ap_start_reg;

assign grp_data_redir_m_fu_178_ap_start = grp_data_redir_m_fu_178_ap_start_reg;

assign grp_rasterization2_m_fu_143_ap_start = grp_rasterization2_m_fu_143_ap_start_reg;

assign grp_zculling_top_fu_168_ap_start = grp_zculling_top_fu_168_ap_start_reg;

assign i_V_fu_203_p2 = (t_V_reg_132 + 12'd1);

assign icmp_ln887_fu_197_p2 = ((t_V_reg_132 == 12'd3192) ? 1'b1 : 1'b0);

endmodule //Loop_TRIANGLES_proc1
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module projection_odd_m (
        ap_ready,
        input_lo_V,
        input_mi_V,
        input_hi_V,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6
);


output   ap_ready;
input  [31:0] input_lo_V;
input  [31:0] input_mi_V;
input  [31:0] input_hi_V;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;

wire   [7:0] tmp_fu_98_p4;
wire   [7:0] mul_ln1371_fu_112_p1;
wire   [17:0] mul_ln1371_fu_112_p2;
wire   [7:0] tmp_2_fu_128_p4;
wire   [7:0] mul_ln1371_1_fu_142_p1;
wire   [17:0] mul_ln1371_1_fu_142_p2;
wire   [7:0] trunc_ln1371_fu_158_p1;
wire   [7:0] mul_ln1371_2_fu_166_p1;
wire   [17:0] mul_ln1371_2_fu_166_p2;
wire   [7:0] udiv_ln1371_2_fu_172_p4;
wire   [7:0] udiv_ln_fu_118_p4;
wire   [7:0] udiv_ln1371_1_fu_148_p4;
wire   [7:0] add_ln214_fu_182_p2;
wire   [7:0] triangle_3d_x0_V_fu_50_p1;
wire   [7:0] triangle_3d_y1_V_fu_74_p1;
wire   [7:0] add_ln214_1_fu_188_p2;
wire   [17:0] mul_ln1371_1_fu_142_p10;
wire   [17:0] mul_ln1371_2_fu_166_p10;
wire   [17:0] mul_ln1371_fu_112_p10;

assign add_ln214_1_fu_188_p2 = (udiv_ln1371_1_fu_148_p4 + add_ln214_fu_182_p2);

assign add_ln214_fu_182_p2 = (udiv_ln1371_2_fu_172_p4 + udiv_ln_fu_118_p4);

assign ap_ready = 1'b1;

assign ap_return_0 = triangle_3d_x0_V_fu_50_p1;

assign ap_return_1 = {{input_lo_V[15:8]}};

assign ap_return_2 = {{input_lo_V[31:24]}};

assign ap_return_3 = triangle_3d_y1_V_fu_74_p1;

assign ap_return_4 = {{input_mi_V[23:16]}};

assign ap_return_5 = {{input_mi_V[31:24]}};

assign ap_return_6 = add_ln214_1_fu_188_p2;

assign mul_ln1371_1_fu_142_p1 = mul_ln1371_1_fu_142_p10;

assign mul_ln1371_1_fu_142_p10 = tmp_2_fu_128_p4;

assign mul_ln1371_1_fu_142_p2 = (18'd342 * mul_ln1371_1_fu_142_p1);

assign mul_ln1371_2_fu_166_p1 = mul_ln1371_2_fu_166_p10;

assign mul_ln1371_2_fu_166_p10 = trunc_ln1371_fu_158_p1;

assign mul_ln1371_2_fu_166_p2 = (18'd342 * mul_ln1371_2_fu_166_p1);

assign mul_ln1371_fu_112_p1 = mul_ln1371_fu_112_p10;

assign mul_ln1371_fu_112_p10 = tmp_fu_98_p4;

assign mul_ln1371_fu_112_p2 = (18'd342 * mul_ln1371_fu_112_p1);

assign tmp_2_fu_128_p4 = {{input_mi_V[15:8]}};

assign tmp_fu_98_p4 = {{input_lo_V[23:16]}};

assign triangle_3d_x0_V_fu_50_p1 = input_lo_V[7:0];

assign triangle_3d_y1_V_fu_74_p1 = input_mi_V[7:0];

assign trunc_ln1371_fu_158_p1 = input_hi_V[7:0];

assign udiv_ln1371_1_fu_148_p4 = {{mul_ln1371_1_fu_142_p2[17:10]}};

assign udiv_ln1371_2_fu_172_p4 = {{mul_ln1371_2_fu_166_p2[17:10]}};

assign udiv_ln_fu_118_p4 = {{mul_ln1371_fu_112_p2[17:10]}};

endmodule //projection_odd_m
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization1_odd_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0_V,
        triangle_2d_y0_V,
        triangle_2d_x1_V,
        triangle_2d_y1_V,
        triangle_2d_x2_V,
        triangle_2d_y2_V,
        triangle_2d_z_V,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0_V;
input  [7:0] triangle_2d_y0_V;
input  [7:0] triangle_2d_x1_V;
input  [7:0] triangle_2d_y1_V;
input  [7:0] triangle_2d_x2_V;
input  [7:0] triangle_2d_y2_V;
input  [7:0] triangle_2d_z_V;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] max_min_V_0;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V_2;
reg   [15:0] max_index_V_0;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_4;
reg    Output_1_V_V_blk_n;
wire   [0:0] icmp_ln208_fu_209_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln208_reg_578;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [7:0] max_min_V_0_load_reg_582;
reg   [7:0] max_min_V_1_load_reg_587;
reg   [7:0] max_min_V_2_load_reg_592;
wire   [7:0] triangle_2d_same_x0_s_fu_235_p3;
reg   [7:0] triangle_2d_same_x0_s_reg_597;
wire   [7:0] triangle_2d_same_y0_s_fu_243_p3;
reg   [7:0] triangle_2d_same_y0_s_reg_607;
wire   [7:0] triangle_2d_same_x1_s_fu_251_p3;
reg   [7:0] triangle_2d_same_x1_s_reg_617;
wire   [7:0] triangle_2d_same_y1_s_fu_259_p3;
reg   [7:0] triangle_2d_same_y1_s_reg_627;
wire   [7:0] select_ln887_fu_304_p3;
reg   [7:0] select_ln887_reg_638;
wire   [7:0] select_ln895_fu_342_p3;
reg   [7:0] select_ln895_reg_645;
wire   [7:0] select_ln887_1_fu_380_p3;
reg   [7:0] select_ln887_1_reg_652;
wire   [7:0] select_ln895_1_fu_418_p3;
reg   [7:0] select_ln895_1_reg_658;
wire   [7:0] sub_ln214_fu_441_p2;
reg   [7:0] sub_ln214_reg_664;
wire   [15:0] mul_ln214_fu_483_p2;
wire   [31:0] p_Result_2_fu_267_p5;
wire   [31:0] p_Result_3_fu_432_p5;
wire   [31:0] p_Result_4_fu_495_p4;
wire   [31:0] p_Result_5_fu_504_p5;
reg    ap_block_state4;
wire   [31:0] p_Result_1_fu_522_p5;
wire   [31:0] p_Result_s_fu_538_p4;
wire   [8:0] lhs_V_18_fu_119_p1;
wire   [8:0] rhs_V_13_fu_123_p1;
wire   [8:0] lhs_V_19_fu_133_p1;
wire   [8:0] rhs_V_14_fu_137_p1;
wire   [8:0] ret_V_23_fu_127_p2;
wire   [8:0] ret_V_24_fu_141_p2;
wire  signed [8:0] ret_V_25_fu_155_p0;
wire  signed [8:0] ret_V_25_fu_155_p1;
wire   [17:0] ret_V_25_fu_155_p2;
wire   [8:0] lhs_V_21_fu_165_p1;
wire   [8:0] lhs_V_22_fu_175_p1;
wire   [8:0] ret_V_26_fu_169_p2;
wire   [8:0] ret_V_27_fu_179_p2;
wire  signed [8:0] ret_V_28_fu_193_p0;
wire  signed [8:0] ret_V_28_fu_193_p1;
wire   [17:0] ret_V_28_fu_193_p2;
wire   [16:0] trunc_ln1352_fu_161_p1;
wire   [16:0] trunc_ln1352_1_fu_199_p1;
wire   [17:0] ret_V_29_fu_203_p2;
wire   [0:0] tmp_fu_227_p3;
wire   [0:0] icmp_ln887_2_fu_284_p2;
wire   [0:0] icmp_ln887_3_fu_294_p2;
wire   [0:0] icmp_ln887_fu_280_p2;
wire   [7:0] select_ln119_fu_288_p3;
wire   [7:0] select_ln126_fu_298_p3;
wire   [0:0] icmp_ln895_1_fu_322_p2;
wire   [0:0] icmp_ln895_2_fu_332_p2;
wire   [0:0] icmp_ln895_fu_318_p2;
wire   [7:0] select_ln100_fu_326_p3;
wire   [7:0] select_ln107_fu_336_p3;
wire   [0:0] icmp_ln887_5_fu_360_p2;
wire   [0:0] icmp_ln887_6_fu_370_p2;
wire   [0:0] icmp_ln887_4_fu_356_p2;
wire   [7:0] select_ln119_1_fu_364_p3;
wire   [7:0] select_ln126_1_fu_374_p3;
wire   [0:0] icmp_ln895_4_fu_398_p2;
wire   [0:0] icmp_ln895_5_fu_408_p2;
wire   [0:0] icmp_ln895_3_fu_394_p2;
wire   [7:0] select_ln100_1_fu_402_p3;
wire   [7:0] select_ln107_1_fu_412_p3;
wire   [8:0] lhs_V_fu_451_p1;
wire   [8:0] rhs_V_fu_454_p1;
wire   [8:0] lhs_V_24_fu_463_p1;
wire   [8:0] rhs_V_17_fu_466_p1;
wire   [8:0] ret_V_fu_457_p2;
wire   [8:0] ret_V_30_fu_469_p2;
wire  signed [8:0] mul_ln214_fu_483_p0;
wire  signed [8:0] mul_ln214_fu_483_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 max_min_V_0 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_index_V_0 = 16'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_4 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln208_reg_578 <= icmp_ln208_fu_209_p2;
        max_min_V_0_load_reg_582 <= max_min_V_0;
        max_min_V_1_load_reg_587 <= max_min_V_1;
        max_min_V_2_load_reg_592 <= max_min_V_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
        max_index_V_0 <= mul_ln214_fu_483_p2;
        max_min_V_4 <= sub_ln214_fu_441_p2;
        sub_ln214_reg_664 <= sub_ln214_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
        max_min_V_0 <= select_ln887_fu_304_p3;
        max_min_V_1 <= select_ln895_fu_342_p3;
        max_min_V_2 <= select_ln887_1_fu_380_p3;
        max_min_V_3 <= select_ln895_1_fu_418_p3;
        select_ln887_1_reg_652 <= select_ln887_1_fu_380_p3;
        select_ln887_reg_638 <= select_ln887_fu_304_p3;
        select_ln895_1_reg_658 <= select_ln895_1_fu_418_p3;
        select_ln895_reg_645 <= select_ln895_fu_342_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        triangle_2d_same_x0_s_reg_597 <= triangle_2d_same_x0_s_fu_235_p3;
        triangle_2d_same_x1_s_reg_617 <= triangle_2d_same_x1_s_fu_251_p3;
        triangle_2d_same_y0_s_reg_607 <= triangle_2d_same_y0_s_fu_243_p3;
        triangle_2d_same_y1_s_reg_627 <= triangle_2d_same_y1_s_fu_259_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6))) begin
        Output_1_V_V_din = p_Result_s_fu_538_p4;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5))) begin
        Output_1_V_V_din = 32'd0;
    end else if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V_din = p_Result_1_fu_522_p5;
    end else if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V_din = p_Result_5_fu_504_p5;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
        Output_1_V_V_din = p_Result_4_fu_495_p4;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
        Output_1_V_V_din = p_Result_3_fu_432_p5;
    end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_din = 32'd1;
    end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_din = p_Result_2_fu_267_p5;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2)) | (~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_reg_578 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5)) | (~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln208_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((icmp_ln208_fu_209_p2 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_fu_209_p2 == 1'd1) & (1'b0 == Output_1_V_V_full_n)));
end

always @ (*) begin
    ap_block_state4 = (((icmp_ln208_reg_578 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln208_reg_578 == 1'd1) & (1'b0 == Output_1_V_V_full_n)));
end

assign icmp_ln208_fu_209_p2 = ((trunc_ln1352_fu_161_p1 == trunc_ln1352_1_fu_199_p1) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_284_p2 = ((triangle_2d_same_x0_s_reg_597 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_294_p2 = ((triangle_2d_same_x1_s_reg_617 < triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_4_fu_356_p2 = ((triangle_2d_same_y0_s_reg_607 < triangle_2d_same_y1_s_reg_627) ? 1'b1 : 1'b0);

assign icmp_ln887_5_fu_360_p2 = ((triangle_2d_same_y0_s_reg_607 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_6_fu_370_p2 = ((triangle_2d_same_y1_s_reg_627 < triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_280_p2 = ((triangle_2d_same_x0_s_reg_597 < triangle_2d_same_x1_s_reg_617) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_322_p2 = ((triangle_2d_same_x0_s_reg_597 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_332_p2 = ((triangle_2d_same_x1_s_reg_617 > triangle_2d_x2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_394_p2 = ((triangle_2d_same_y0_s_reg_607 > triangle_2d_same_y1_s_reg_627) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_398_p2 = ((triangle_2d_same_y0_s_reg_607 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_5_fu_408_p2 = ((triangle_2d_same_y1_s_reg_627 > triangle_2d_y2_V) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_318_p2 = ((triangle_2d_same_x0_s_reg_597 > triangle_2d_same_x1_s_reg_617) ? 1'b1 : 1'b0);

assign lhs_V_18_fu_119_p1 = triangle_2d_x2_V;

assign lhs_V_19_fu_133_p1 = triangle_2d_y1_V;

assign lhs_V_21_fu_165_p1 = triangle_2d_y2_V;

assign lhs_V_22_fu_175_p1 = triangle_2d_x1_V;

assign lhs_V_24_fu_463_p1 = select_ln895_1_reg_658;

assign lhs_V_fu_451_p1 = select_ln895_reg_645;

assign mul_ln214_fu_483_p0 = ret_V_30_fu_469_p2;

assign mul_ln214_fu_483_p1 = ret_V_fu_457_p2;

assign mul_ln214_fu_483_p2 = ($signed(mul_ln214_fu_483_p0) * $signed(mul_ln214_fu_483_p1));

assign p_Result_1_fu_522_p5 = {{{{{{8'd0}, {max_min_V_4}}}, {max_min_V_3}}}, {max_min_V_2_load_reg_592}};

assign p_Result_2_fu_267_p5 = {{{{triangle_2d_same_x1_s_fu_251_p3}, {triangle_2d_same_y0_s_fu_243_p3}}, {triangle_2d_same_x0_s_fu_235_p3}}, {8'd0}};

assign p_Result_3_fu_432_p5 = {{{{triangle_2d_z_V}, {triangle_2d_y2_V}}, {triangle_2d_x2_V}}, {triangle_2d_same_y1_s_reg_627}};

assign p_Result_4_fu_495_p4 = {{{select_ln895_reg_645}, {select_ln887_reg_638}}, {mul_ln214_fu_483_p2}};

assign p_Result_5_fu_504_p5 = {{{{{{8'd0}, {sub_ln214_reg_664}}}, {select_ln895_1_reg_658}}}, {select_ln887_1_reg_652}};

assign p_Result_s_fu_538_p4 = {{{max_min_V_1_load_reg_587}, {max_min_V_0_load_reg_582}}, {max_index_V_0}};

assign ret_V_23_fu_127_p2 = (lhs_V_18_fu_119_p1 - rhs_V_13_fu_123_p1);

assign ret_V_24_fu_141_p2 = (lhs_V_19_fu_133_p1 - rhs_V_14_fu_137_p1);

assign ret_V_25_fu_155_p0 = ret_V_24_fu_141_p2;

assign ret_V_25_fu_155_p1 = ret_V_23_fu_127_p2;

assign ret_V_25_fu_155_p2 = ($signed(ret_V_25_fu_155_p0) * $signed(ret_V_25_fu_155_p1));

assign ret_V_26_fu_169_p2 = (lhs_V_21_fu_165_p1 - rhs_V_14_fu_137_p1);

assign ret_V_27_fu_179_p2 = (lhs_V_22_fu_175_p1 - rhs_V_13_fu_123_p1);

assign ret_V_28_fu_193_p0 = ret_V_27_fu_179_p2;

assign ret_V_28_fu_193_p1 = ret_V_26_fu_169_p2;

assign ret_V_28_fu_193_p2 = ($signed(ret_V_28_fu_193_p0) * $signed(ret_V_28_fu_193_p1));

assign ret_V_29_fu_203_p2 = (ret_V_25_fu_155_p2 - ret_V_28_fu_193_p2);

assign ret_V_30_fu_469_p2 = (lhs_V_24_fu_463_p1 - rhs_V_17_fu_466_p1);

assign ret_V_fu_457_p2 = (lhs_V_fu_451_p1 - rhs_V_fu_454_p1);

assign rhs_V_13_fu_123_p1 = triangle_2d_x0_V;

assign rhs_V_14_fu_137_p1 = triangle_2d_y0_V;

assign rhs_V_17_fu_466_p1 = select_ln887_1_reg_652;

assign rhs_V_fu_454_p1 = select_ln887_reg_638;

assign select_ln100_1_fu_402_p3 = ((icmp_ln895_4_fu_398_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_607 : triangle_2d_y2_V);

assign select_ln100_fu_326_p3 = ((icmp_ln895_1_fu_322_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_597 : triangle_2d_x2_V);

assign select_ln107_1_fu_412_p3 = ((icmp_ln895_5_fu_408_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_627 : triangle_2d_y2_V);

assign select_ln107_fu_336_p3 = ((icmp_ln895_2_fu_332_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_617 : triangle_2d_x2_V);

assign select_ln119_1_fu_364_p3 = ((icmp_ln887_5_fu_360_p2[0:0] === 1'b1) ? triangle_2d_same_y0_s_reg_607 : triangle_2d_y2_V);

assign select_ln119_fu_288_p3 = ((icmp_ln887_2_fu_284_p2[0:0] === 1'b1) ? triangle_2d_same_x0_s_reg_597 : triangle_2d_x2_V);

assign select_ln126_1_fu_374_p3 = ((icmp_ln887_6_fu_370_p2[0:0] === 1'b1) ? triangle_2d_same_y1_s_reg_627 : triangle_2d_y2_V);

assign select_ln126_fu_298_p3 = ((icmp_ln887_3_fu_294_p2[0:0] === 1'b1) ? triangle_2d_same_x1_s_reg_617 : triangle_2d_x2_V);

assign select_ln887_1_fu_380_p3 = ((icmp_ln887_4_fu_356_p2[0:0] === 1'b1) ? select_ln119_1_fu_364_p3 : select_ln126_1_fu_374_p3);

assign select_ln887_fu_304_p3 = ((icmp_ln887_fu_280_p2[0:0] === 1'b1) ? select_ln119_fu_288_p3 : select_ln126_fu_298_p3);

assign select_ln895_1_fu_418_p3 = ((icmp_ln895_3_fu_394_p2[0:0] === 1'b1) ? select_ln100_1_fu_402_p3 : select_ln107_1_fu_412_p3);

assign select_ln895_fu_342_p3 = ((icmp_ln895_fu_318_p2[0:0] === 1'b1) ? select_ln100_fu_326_p3 : select_ln107_fu_336_p3);

assign sub_ln214_fu_441_p2 = (select_ln895_reg_645 - select_ln887_reg_638);

assign tmp_fu_227_p3 = ret_V_29_fu_203_p2[32'd17];

assign triangle_2d_same_x0_s_fu_235_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_x1_V : triangle_2d_x0_V);

assign triangle_2d_same_x1_s_fu_251_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_x0_V : triangle_2d_x1_V);

assign triangle_2d_same_y0_s_fu_243_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_y1_V : triangle_2d_y0_V);

assign triangle_2d_same_y1_s_fu_259_p3 = ((tmp_fu_227_p3[0:0] === 1'b1) ? triangle_2d_y0_V : triangle_2d_y1_V);

assign trunc_ln1352_1_fu_199_p1 = ret_V_28_fu_193_p2[16:0];

assign trunc_ln1352_fu_161_p1 = ret_V_25_fu_155_p2[16:0];

endmodule //rasterization1_odd_m
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_read;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_rasterization2_odd_fu_48_ap_start;
wire    grp_rasterization2_odd_fu_48_ap_done;
wire    grp_rasterization2_odd_fu_48_ap_idle;
wire    grp_rasterization2_odd_fu_48_ap_ready;
wire    grp_rasterization2_odd_fu_48_Input_1_V_V_read;
wire   [31:0] grp_rasterization2_odd_fu_48_Output_1_V_V_din;
wire    grp_rasterization2_odd_fu_48_Output_1_V_V_write;
reg    grp_rasterization2_odd_fu_48_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_rasterization2_odd_fu_48_ap_start_reg = 1'b0;
end

rasterization2_odd grp_rasterization2_odd_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization2_odd_fu_48_ap_start),
    .ap_done(grp_rasterization2_odd_fu_48_ap_done),
    .ap_idle(grp_rasterization2_odd_fu_48_ap_idle),
    .ap_ready(grp_rasterization2_odd_fu_48_ap_ready),
    .Input_1_V_V_dout(Input_1_V_V_dout),
    .Input_1_V_V_empty_n(Input_1_V_V_empty_n),
    .Input_1_V_V_read(grp_rasterization2_odd_fu_48_Input_1_V_V_read),
    .Output_1_V_V_din(grp_rasterization2_odd_fu_48_Output_1_V_V_din),
    .Output_1_V_V_full_n(Output_1_V_V_full_n),
    .Output_1_V_V_write(grp_rasterization2_odd_fu_48_Output_1_V_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization2_odd_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_rasterization2_odd_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization2_odd_fu_48_ap_ready == 1'b1)) begin
            grp_rasterization2_odd_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Input_1_V_V_read = grp_rasterization2_odd_fu_48_Input_1_V_V_read;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Output_1_V_V_write = grp_rasterization2_odd_fu_48_Output_1_V_V_write;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_rasterization2_odd_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_rasterization2_odd_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_rasterization2_odd_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_din = grp_rasterization2_odd_fu_48_Output_1_V_V_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_rasterization2_odd_fu_48_ap_start = grp_rasterization2_odd_fu_48_ap_start_reg;

endmodule //rasterization2_m
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module rasterization2_odbkb_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 9;
parameter MEM_SIZE = 500;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("./rasterization2_odbkb_ram.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module rasterization2_odbkb(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd500;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



rasterization2_odbkb_ram rasterization2_odbkb_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_state25 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state28 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_read;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] fragment_x_V_address0;
reg    fragment_x_V_ce0;
reg    fragment_x_V_we0;
wire   [7:0] fragment_x_V_q0;
reg   [8:0] fragment_y_V_address0;
reg    fragment_y_V_ce0;
reg    fragment_y_V_we0;
wire   [7:0] fragment_y_V_q0;
reg   [8:0] fragment_z_V_address0;
reg    fragment_z_V_ce0;
reg    fragment_z_V_we0;
wire   [7:0] fragment_z_V_q0;
reg   [8:0] fragment_color_V_address0;
reg    fragment_color_V_ce0;
reg    fragment_color_V_we0;
wire   [7:0] fragment_color_V_q0;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    Output_1_V_V_blk_n;
reg   [0:0] icmp_ln358_reg_620;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln384_reg_751;
reg   [15:0] t_V_5_reg_205;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
wire    ap_block_state22_pp0_stage0_iter17;
wire    ap_block_state23_pp0_stage0_iter18;
wire    ap_block_state24_pp0_stage0_iter19;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] i_op_assign_reg_217;
reg   [7:0] triangle_2d_same_x0_s_reg_605;
reg    ap_block_state1;
wire   [7:0] grp_fu_238_p4;
reg   [7:0] triangle_2d_same_y0_s_reg_610;
reg   [7:0] triangle_2d_same_x1_s_reg_615;
wire   [0:0] icmp_ln358_fu_268_p2;
wire   [7:0] triangle_2d_same_y1_s_fu_274_p1;
reg   [7:0] triangle_2d_same_y1_s_reg_624;
reg   [7:0] triangle_2d_same_x2_s_reg_629;
reg   [7:0] triangle_2d_same_y2_s_reg_634;
reg   [7:0] triangle_2d_same_z_V_reg_639;
wire   [15:0] trunc_ln647_fu_278_p1;
reg   [15:0] trunc_ln647_reg_644;
reg   [7:0] p_Result_1_reg_649;
wire   [7:0] trunc_ln647_1_fu_282_p1;
reg   [7:0] trunc_ln647_1_reg_654;
reg    ap_block_state4;
wire   [15:0] zext_ln1371_fu_286_p1;
reg   [15:0] zext_ln1371_reg_673;
wire   [8:0] rhs_V_11_fu_290_p1;
reg   [8:0] rhs_V_11_reg_679;
wire   [8:0] lhs_V_14_fu_293_p1;
reg   [8:0] lhs_V_14_reg_684;
wire   [8:0] rhs_V_12_fu_296_p1;
reg   [8:0] rhs_V_12_reg_689;
wire  signed [17:0] rhs_V_2_fu_305_p1;
reg  signed [17:0] rhs_V_2_reg_694;
wire   [8:0] lhs_V_15_fu_309_p1;
reg   [8:0] lhs_V_15_reg_699;
wire  signed [17:0] rhs_V_3_fu_318_p1;
reg  signed [17:0] rhs_V_3_reg_704;
wire   [8:0] lhs_V_16_fu_322_p1;
reg   [8:0] lhs_V_16_reg_709;
wire  signed [17:0] rhs_V_6_fu_331_p1;
reg  signed [17:0] rhs_V_6_reg_714;
wire   [8:0] lhs_V_17_fu_335_p1;
reg   [8:0] lhs_V_17_reg_719;
wire  signed [17:0] rhs_V_7_fu_344_p1;
reg  signed [17:0] rhs_V_7_reg_724;
wire  signed [17:0] rhs_V_10_fu_354_p1;
reg  signed [17:0] rhs_V_10_reg_729;
wire  signed [17:0] rhs_V_fu_364_p1;
reg  signed [17:0] rhs_V_reg_734;
wire   [0:0] icmp_ln366_fu_378_p2;
reg   [0:0] icmp_ln366_reg_739;
wire   [15:0] k_V_fu_383_p2;
reg   [15:0] k_V_reg_743;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln384_fu_548_p2;
wire    ap_block_state26_pp1_stage0_iter0;
reg    ap_block_state27_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_fu_554_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg   [15:0] ap_phi_mux_t_V_5_phi_fu_209_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln544_fu_513_p1;
wire   [0:0] tmp_1_fu_505_p3;
wire   [63:0] zext_ln386_fu_560_p1;
reg   [15:0] t_V_4_fu_98;
wire   [15:0] i_top_V_fu_527_p2;
reg   [15:0] t_V_fu_102;
wire   [15:0] i_V_fu_521_p2;
wire   [31:0] tmp_V_fu_543_p1;
wire   [31:0] p_Result_s_fu_568_p5;
reg    ap_block_pp1_stage0_01001;
wire   [7:0] x_V_fu_403_p2;
wire   [7:0] y_V_fu_413_p2;
wire   [1:0] flag_V_fu_264_p1;
wire   [8:0] ret_V_3_fu_299_p2;
wire   [8:0] ret_V_6_fu_312_p2;
wire   [8:0] ret_V_10_fu_325_p2;
wire   [8:0] ret_V_13_fu_338_p2;
wire   [8:0] ret_V_17_fu_348_p2;
wire   [8:0] ret_V_20_fu_358_p2;
wire   [7:0] grp_fu_389_p1;
wire   [7:0] grp_fu_394_p1;
wire   [7:0] grp_fu_389_p2;
wire   [7:0] ret_V_fu_399_p1;
wire   [7:0] grp_fu_394_p2;
wire   [7:0] trunc_ln209_fu_409_p1;
wire   [8:0] lhs_V_fu_419_p1;
wire   [8:0] ret_V_2_fu_423_p2;
wire  signed [8:0] ret_V_4_fu_432_p0;
wire  signed [8:0] ret_V_4_fu_432_p1;
wire   [8:0] lhs_V_3_fu_437_p1;
wire  signed [8:0] ret_V_5_fu_441_p2;
wire   [8:0] ret_V_9_fu_450_p2;
wire  signed [8:0] ret_V_11_fu_459_p0;
wire  signed [8:0] ret_V_11_fu_459_p1;
wire  signed [8:0] ret_V_12_fu_464_p2;
wire   [8:0] ret_V_16_fu_473_p2;
wire  signed [8:0] ret_V_18_fu_482_p0;
wire  signed [8:0] ret_V_18_fu_482_p1;
wire  signed [8:0] ret_V_19_fu_487_p2;
wire  signed [17:0] grp_fu_581_p3;
wire  signed [17:0] grp_fu_589_p3;
wire   [17:0] or_ln91_fu_496_p2;
wire  signed [17:0] grp_fu_597_p3;
wire   [17:0] or_ln91_1_fu_500_p2;
wire  signed [8:0] grp_fu_581_p0;
wire   [17:0] grp_fu_581_p2;
wire  signed [8:0] grp_fu_589_p0;
wire   [17:0] grp_fu_589_p2;
wire  signed [8:0] grp_fu_597_p0;
wire   [17:0] grp_fu_597_p2;
wire    ap_CS_fsm_state28;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_address0),
    .ce0(fragment_x_V_ce0),
    .we0(fragment_x_V_we0),
    .d0(x_V_fu_403_p2),
    .q0(fragment_x_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_address0),
    .ce0(fragment_y_V_ce0),
    .we0(fragment_y_V_we0),
    .d0(y_V_fu_413_p2),
    .q0(fragment_y_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_address0),
    .ce0(fragment_z_V_ce0),
    .we0(fragment_z_V_we0),
    .d0(triangle_2d_same_z_V_reg_639),
    .q0(fragment_z_V_q0)
);

rasterization2_odbkb #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_address0),
    .ce0(fragment_color_V_ce0),
    .we0(fragment_color_V_we0),
    .d0(8'd100),
    .q0(fragment_color_V_q0)
);

rendering_m_urem_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rendering_m_urem_fYi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_5_phi_fu_209_p4),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

rendering_m_udiv_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rendering_m_udiv_g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_5_phi_fu_209_p4),
    .din1(grp_fu_394_p1),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

rendering_m_mac_mhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_m_mac_mhbi_U16(
    .din0(grp_fu_581_p0),
    .din1(ret_V_5_fu_441_p2),
    .din2(grp_fu_581_p2),
    .dout(grp_fu_581_p3)
);

rendering_m_mac_mhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_m_mac_mhbi_U17(
    .din0(grp_fu_589_p0),
    .din1(ret_V_12_fu_464_p2),
    .din2(grp_fu_589_p2),
    .dout(grp_fu_589_p3)
);

rendering_m_mac_mhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rendering_m_mac_mhbi_U18(
    .din0(grp_fu_597_p0),
    .din1(ret_V_19_fu_487_p2),
    .din2(grp_fu_597_p2),
    .dout(grp_fu_597_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln384_fu_548_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_op_assign_reg_217 <= j_fu_554_p2;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
        i_op_assign_reg_217 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_4_fu_98 <= i_top_V_fu_527_p2;
    end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_4_fu_98 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_5_reg_205 <= 16'd0;
    end else if (((icmp_ln366_reg_739 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_5_reg_205 <= k_V_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_fu_102 <= i_V_fu_521_p2;
    end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_fu_102 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln358_reg_620 <= icmp_ln358_fu_268_p2;
        triangle_2d_same_x0_s_reg_605 <= {{Input_1_V_V_dout[15:8]}};
        triangle_2d_same_x1_s_reg_615 <= {{Input_1_V_V_dout[31:24]}};
        triangle_2d_same_y0_s_reg_610 <= {{Input_1_V_V_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln366_reg_739 <= icmp_ln366_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln384_reg_751 <= icmp_ln384_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_reg_743 <= k_V_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        lhs_V_14_reg_684[7 : 0] <= lhs_V_14_fu_293_p1[7 : 0];
        lhs_V_15_reg_699[7 : 0] <= lhs_V_15_fu_309_p1[7 : 0];
        lhs_V_16_reg_709[7 : 0] <= lhs_V_16_fu_322_p1[7 : 0];
        lhs_V_17_reg_719[7 : 0] <= lhs_V_17_fu_335_p1[7 : 0];
        rhs_V_10_reg_729 <= rhs_V_10_fu_354_p1;
        rhs_V_11_reg_679[7 : 0] <= rhs_V_11_fu_290_p1[7 : 0];
        rhs_V_12_reg_689[7 : 0] <= rhs_V_12_fu_296_p1[7 : 0];
        rhs_V_2_reg_694 <= rhs_V_2_fu_305_p1;
        rhs_V_3_reg_704 <= rhs_V_3_fu_318_p1;
        rhs_V_6_reg_714 <= rhs_V_6_fu_331_p1;
        rhs_V_7_reg_724 <= rhs_V_7_fu_344_p1;
        rhs_V_reg_734 <= rhs_V_fu_364_p1;
        zext_ln1371_reg_673[7 : 0] <= zext_ln1371_fu_286_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Result_1_reg_649 <= {{Input_1_V_V_dout[23:16]}};
        trunc_ln647_reg_644 <= trunc_ln647_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state2))) begin
        triangle_2d_same_x2_s_reg_629 <= {{Input_1_V_V_dout[15:8]}};
        triangle_2d_same_y1_s_reg_624 <= triangle_2d_same_y1_s_fu_274_p1;
        triangle_2d_same_y2_s_reg_634 <= {{Input_1_V_V_dout[23:16]}};
        triangle_2d_same_z_V_reg_639 <= {{Input_1_V_V_dout[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4))) begin
        trunc_ln647_1_reg_654 <= trunc_ln647_1_fu_282_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_empty_n;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_read = 1'b1;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((icmp_ln358_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln384_reg_751 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln384_reg_751 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Output_1_V_V_din = p_Result_s_fu_568_p5;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
        Output_1_V_V_din = tmp_V_fu_543_p1;
    end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_V_din = 32'd0;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln384_reg_751 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln366_fu_378_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln384_fu_548_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln366_reg_739 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_5_phi_fu_209_p4 = k_V_reg_743;
    end else begin
        ap_phi_mux_t_V_5_phi_fu_209_p4 = t_V_5_reg_205;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_color_V_address0 = zext_ln386_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        fragment_color_V_address0 = zext_ln544_fu_513_p1;
    end else begin
        fragment_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_color_V_ce0 = 1'b1;
    end else begin
        fragment_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_color_V_we0 = 1'b1;
    end else begin
        fragment_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_x_V_address0 = zext_ln386_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        fragment_x_V_address0 = zext_ln544_fu_513_p1;
    end else begin
        fragment_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_x_V_ce0 = 1'b1;
    end else begin
        fragment_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_x_V_we0 = 1'b1;
    end else begin
        fragment_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_y_V_address0 = zext_ln386_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        fragment_y_V_address0 = zext_ln544_fu_513_p1;
    end else begin
        fragment_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_y_V_ce0 = 1'b1;
    end else begin
        fragment_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_y_V_we0 = 1'b1;
    end else begin
        fragment_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_z_V_address0 = zext_ln386_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        fragment_z_V_address0 = zext_ln544_fu_513_p1;
    end else begin
        fragment_z_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        fragment_z_V_ce0 = 1'b1;
    end else begin
        fragment_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_z_V_we0 = 1'b1;
    end else begin
        fragment_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n))) & (icmp_ln358_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln366_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter18 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter18 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln366_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln384_fu_548_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln384_fu_548_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln384_reg_751 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln384_reg_751 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln384_reg_751 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp1_stage0_iter1 = ((icmp_ln384_reg_751 == 1'd0) & (1'b0 == Output_1_V_V_full_n));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == Input_1_V_V_empty_n) | ((icmp_ln358_reg_620 == 1'd0) & (1'b0 == Output_1_V_V_full_n)));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign flag_V_fu_264_p1 = Input_1_V_V_dout[1:0];

assign grp_fu_238_p4 = {{Input_1_V_V_dout[23:16]}};

assign grp_fu_389_p1 = zext_ln1371_reg_673;

assign grp_fu_394_p1 = zext_ln1371_reg_673;

assign grp_fu_581_p0 = rhs_V_3_reg_704;

assign grp_fu_581_p2 = ($signed(ret_V_4_fu_432_p0) * $signed(ret_V_4_fu_432_p1));

assign grp_fu_589_p0 = rhs_V_7_reg_724;

assign grp_fu_589_p2 = ($signed(ret_V_11_fu_459_p0) * $signed(ret_V_11_fu_459_p1));

assign grp_fu_597_p0 = rhs_V_reg_734;

assign grp_fu_597_p2 = ($signed(ret_V_18_fu_482_p0) * $signed(ret_V_18_fu_482_p1));

assign i_V_fu_521_p2 = (t_V_fu_102 + 16'd1);

assign i_top_V_fu_527_p2 = (t_V_4_fu_98 + 16'd1);

assign icmp_ln358_fu_268_p2 = ((flag_V_fu_264_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln366_fu_378_p2 = ((ap_phi_mux_t_V_5_phi_fu_209_p4 == trunc_ln647_reg_644) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_548_p2 = ((i_op_assign_reg_217 == t_V_fu_102) ? 1'b1 : 1'b0);

assign j_fu_554_p2 = (i_op_assign_reg_217 + 16'd1);

assign k_V_fu_383_p2 = (ap_phi_mux_t_V_5_phi_fu_209_p4 + 16'd1);

assign lhs_V_14_fu_293_p1 = triangle_2d_same_y1_s_reg_624;

assign lhs_V_15_fu_309_p1 = triangle_2d_same_x1_s_reg_615;

assign lhs_V_16_fu_322_p1 = triangle_2d_same_y2_s_reg_634;

assign lhs_V_17_fu_335_p1 = triangle_2d_same_x2_s_reg_629;

assign lhs_V_3_fu_437_p1 = y_V_fu_413_p2;

assign lhs_V_fu_419_p1 = x_V_fu_403_p2;

assign or_ln91_1_fu_500_p2 = (or_ln91_fu_496_p2 | grp_fu_597_p3);

assign or_ln91_fu_496_p2 = (grp_fu_589_p3 | grp_fu_581_p3);

assign p_Result_s_fu_568_p5 = {{{{fragment_color_V_q0}, {fragment_z_V_q0}}, {fragment_y_V_q0}}, {fragment_x_V_q0}};

assign ret_V_10_fu_325_p2 = (lhs_V_16_fu_322_p1 - lhs_V_14_fu_293_p1);

assign ret_V_11_fu_459_p0 = rhs_V_6_reg_714;

assign ret_V_11_fu_459_p1 = ret_V_9_fu_450_p2;

assign ret_V_12_fu_464_p2 = (lhs_V_3_fu_437_p1 - lhs_V_14_reg_684);

assign ret_V_13_fu_338_p2 = (lhs_V_17_fu_335_p1 - lhs_V_15_fu_309_p1);

assign ret_V_16_fu_473_p2 = (lhs_V_fu_419_p1 - lhs_V_17_reg_719);

assign ret_V_17_fu_348_p2 = (rhs_V_12_fu_296_p1 - lhs_V_16_fu_322_p1);

assign ret_V_18_fu_482_p0 = ret_V_16_fu_473_p2;

assign ret_V_18_fu_482_p1 = rhs_V_10_reg_729;

assign ret_V_19_fu_487_p2 = (lhs_V_3_fu_437_p1 - lhs_V_16_reg_709);

assign ret_V_20_fu_358_p2 = (rhs_V_11_fu_290_p1 - lhs_V_17_fu_335_p1);

assign ret_V_2_fu_423_p2 = (lhs_V_fu_419_p1 - rhs_V_11_reg_679);

assign ret_V_3_fu_299_p2 = (lhs_V_14_fu_293_p1 - rhs_V_12_fu_296_p1);

assign ret_V_4_fu_432_p0 = rhs_V_2_reg_694;

assign ret_V_4_fu_432_p1 = ret_V_2_fu_423_p2;

assign ret_V_5_fu_441_p2 = (lhs_V_3_fu_437_p1 - rhs_V_12_reg_689);

assign ret_V_6_fu_312_p2 = (lhs_V_15_fu_309_p1 - rhs_V_11_fu_290_p1);

assign ret_V_9_fu_450_p2 = (lhs_V_fu_419_p1 - lhs_V_15_reg_699);

assign ret_V_fu_399_p1 = grp_fu_389_p2[7:0];

assign rhs_V_10_fu_354_p1 = $signed(ret_V_17_fu_348_p2);

assign rhs_V_11_fu_290_p1 = triangle_2d_same_x0_s_reg_605;

assign rhs_V_12_fu_296_p1 = triangle_2d_same_y0_s_reg_610;

assign rhs_V_2_fu_305_p1 = $signed(ret_V_3_fu_299_p2);

assign rhs_V_3_fu_318_p1 = $signed(ret_V_6_fu_312_p2);

assign rhs_V_6_fu_331_p1 = $signed(ret_V_10_fu_325_p2);

assign rhs_V_7_fu_344_p1 = $signed(ret_V_13_fu_338_p2);

assign rhs_V_fu_364_p1 = $signed(ret_V_20_fu_358_p2);

assign tmp_1_fu_505_p3 = or_ln91_1_fu_500_p2[32'd17];

assign tmp_V_fu_543_p1 = t_V_4_fu_98;

assign triangle_2d_same_y1_s_fu_274_p1 = Input_1_V_V_dout[7:0];

assign trunc_ln209_fu_409_p1 = grp_fu_394_p2[7:0];

assign trunc_ln647_1_fu_282_p1 = Input_1_V_V_dout[7:0];

assign trunc_ln647_fu_278_p1 = Input_1_V_V_dout[15:0];

assign x_V_fu_403_p2 = (ret_V_fu_399_p1 + p_Result_1_reg_649);

assign y_V_fu_413_p2 = (trunc_ln209_fu_409_p1 + trunc_ln647_1_reg_654);

assign zext_ln1371_fu_286_p1 = grp_fu_238_p4;

assign zext_ln386_fu_560_p1 = i_op_assign_reg_217;

assign zext_ln544_fu_513_p1 = t_V_fu_102;

always @ (posedge ap_clk) begin
    zext_ln1371_reg_673[15:8] <= 8'b00000000;
    rhs_V_11_reg_679[8] <= 1'b0;
    lhs_V_14_reg_684[8] <= 1'b0;
    rhs_V_12_reg_689[8] <= 1'b0;
    lhs_V_15_reg_699[8] <= 1'b0;
    lhs_V_16_reg_709[8] <= 1'b0;
    lhs_V_17_reg_719[8] <= 1'b0;
end

endmodule //rasterization2_odd
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module regslice_both
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = DataWidth+1;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

reg [1:0] count;

ibuf #(
  .W(W)
)
ibuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .idata(idata),
  .istop(istop),
  .cdata(cdata),
  .cstop(cstop)
);
 
 
obuf #(
  .W(W)
)
obuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .cdata(cdata),
  .cstop(cstop),
  .odata(odata),
  .ostop(ostop)
);

assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;

// count, indicate how many data in the regslice.
// 00 - null
// 10 - 0
// 11 - 1
// 01 - 2
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        count <= 2'd0;
    end else begin
        if ((((2'd2 == count) & (1'b0 == vld_in)) | ((2'd3 == count) & (1'b0 == vld_in) & (1'b1 == ack_out)))) begin
            count <= 2'd2;
        end else if ((((2'd1 == count) & (1'b0 == ack_out)) | ((2'd3 == count) & (1'b0 == ack_out) & (1'b1 == vld_in)))) begin
            count <= 2'd1;
        end else if (((~((1'b0 == vld_in) & (1'b1 == ack_out)) & ~((1'b0 == ack_out) & (1'b1 == vld_in)) & (2'd3 == count)) | ((2'd1 == count) & (1'b1 == ack_out)) | ((2'd2 == count) & (1'b1 == vld_in)))) begin
            count <= 2'd3;
        end else begin
            count <= 2'd2;
        end
    end
end

assign apdone_blk = ((count == 2'd3 && ack_out == 1'b0) | (count == 2'd1));

endmodule // both


module regslice_forward 
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = DataWidth+1;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

obuf #(
  .W(W)
)
obuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .cdata(idata),
  .cstop(istop),
  .odata(odata),
  .ostop(ostop)
);

assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;

assign apdone_blk = ((ap_rst == 1'b0)&(1'b0 == ack_out)&(1'b1 == vld_out));

endmodule //forward


module regslice_reverse 
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = DataWidth+1;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

ibuf #(
  .W(W)
)
ibuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .idata(idata),
  .istop(istop),
  .cdata(odata),
  .cstop(ostop)
);
 
assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;

assign apdone_blk = ((ap_rst == 1'b0)&(ack_in == 1'b0));

endmodule //reverse

module regslice_both_w1 
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = 2;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

reg [1:0] count;

ibuf #(
  .W(W)
)
ibuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .idata(idata),
  .istop(istop),
  .cdata(cdata),
  .cstop(cstop)
);
 
 
obuf #(
  .W(W)
)
obuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .cdata(cdata),
  .cstop(cstop),
  .odata(odata),
  .ostop(ostop)
);

assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;
// count, indicate how many data in the regslice.
// 00 - null
// 10 - 0
// 11 - 1
// 01 - 2
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        count <= 2'd0;
    end else begin
        if ((((2'd2 == count) & (1'b0 == vld_in)) | ((2'd3 == count) & (1'b0 == vld_in) & (1'b1 == ack_out)))) begin
            count <= 2'd2;
        end else if ((((2'd1 == count) & (1'b0 == ack_out)) | ((2'd3 == count) & (1'b0 == ack_out) & (1'b1 == vld_in)))) begin
            count <= 2'd1;
        end else if (((~((1'b0 == vld_in) & (1'b1 == ack_out)) & ~((1'b0 == ack_out) & (1'b1 == vld_in)) & (2'd3 == count)) | ((2'd1 == count) & (1'b1 == ack_out)) | ((2'd2 == count) & (1'b1 == vld_in)))) begin
            count <= 2'd3;
        end else begin
            count <= 2'd2;
        end
    end
end

assign apdone_blk = ((count == 2'd3 && ack_out == 1'b0) | (count == 2'd1));

endmodule // both


module regslice_forward_w1 
#(parameter 
    DataWidth=1
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = 2;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

obuf #(
  .W(W)
)
obuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .cdata(idata),
  .cstop(istop),
  .odata(odata),
  .ostop(ostop)
);

assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;

assign apdone_blk = ((ap_rst == 1'b0)&(1'b0 == ack_out)&(1'b1 == vld_out));

endmodule //forward


module regslice_reverse_w1 
#(parameter 
    DataWidth=1
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 
localparam W = 2;

wire [W-1:0] cdata;
wire cstop;
wire [W-1:0] idata;
wire istop;
wire [W-1:0] odata;
wire ostop;

ibuf #(
  .W(W)
)
ibuf_inst(
  .clk(ap_clk),
  .reset(ap_rst),
  .idata(idata),
  .istop(istop),
  .cdata(odata),
  .cstop(ostop)
);
 
assign idata = {vld_in, data_in};
assign ack_in = ~istop;

assign vld_out = odata[W-1];
assign data_out = odata[W-2:0];
assign ostop = ~ack_out;

assign apdone_blk = ((ap_rst == 1'b0)&(ack_in == 1'b0));

endmodule //reverse


module ibuf 
#(
    parameter W=32
)(
    input clk ,
    input reset,
    input [W-1:0] idata, 
    output istop ,
    output [W-1:0] cdata, 
    input cstop 
);
 
reg [W-1:0] ireg = {1'b0, {{W-1}{1'b0}}}; // Empty
 
assign istop = reset ? 1'b1 : ireg[W-1]; // Stop if buffering
assign cdata = istop ? ireg : idata ; // Send buffered
 
always @(posedge clk)
    if(reset)
        ireg <= {1'b0, {{W-1}{1'b0}}}; // Empty 
    else begin
        if (!cstop && ireg [W-1]) // Will core consume?
            ireg <= {1'b0, {{W-1}{1'b0}}}; // Yes: empty buffer
        else if ( cstop && !ireg[W-1]) // Core stop, empty?
            ireg <= idata; // Yes: load buffer
    end
 
endmodule

// Forward mode
module obuf 
#(
    parameter W=32
)(
    input clk ,
    input reset,
    input [W-1:0] cdata ,
    output cstop ,
    output reg [W-1:0] odata,
    input ostop 
);

// Stop the core when buffer full and output not ready
assign cstop = reset? 1'b1 : (odata[W-1] & ostop);
 
always @(posedge clk)
    if(reset)
        odata <= {1'b0, {{W-1}{1'b0}}};
    else
        if (!cstop) begin// Can we accept more data?
            odata <= cdata; // Yes: load the buffer
        end

endmodule

    
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

(* use_dsp = "yes" *) module rendering_m_mac_mhbi_DSP48_0(
    input  [9 - 1:0] in0,
    input  [9 - 1:0] in1,
    input  [18 - 1:0] in2,
    output [18 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $unsigned(in2);

assign m  = a * b;
assign p  = c - m;

assign dout = p;

endmodule
`timescale 1 ns / 1 ps
module rendering_m_mac_mhbi(
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



rendering_m_mac_mhbi_DSP48_0 rendering_m_mac_mhbi_DSP48_0_U(
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module rendering_m_udiv_g8j_div_u
#(parameter
    in0_WIDTH = 32,
    in1_WIDTH = 32,
    out_WIDTH = 32
)
(
    input                       clk,
    input                       reset,
    input                       ce,
    input       [in0_WIDTH-1:0] dividend,
    input       [in1_WIDTH-1:0] divisor,
    output wire [out_WIDTH-1:0] quot,
    output wire [out_WIDTH-1:0] remd
);

localparam cal_WIDTH = (in0_WIDTH > in1_WIDTH)? in0_WIDTH : in1_WIDTH;

//------------------------Local signal-------------------
reg  [in0_WIDTH-1:0] dividend_tmp[0:in0_WIDTH];
reg  [in1_WIDTH-1:0] divisor_tmp[0:in0_WIDTH];
reg  [in0_WIDTH-1:0] remd_tmp[0:in0_WIDTH];
wire [in0_WIDTH-1:0] comb_tmp[0:in0_WIDTH-1];
wire [cal_WIDTH:0]   cal_tmp[0:in0_WIDTH-1];
//------------------------Body---------------------------
assign  quot    = dividend_tmp[in0_WIDTH];
assign  remd    = remd_tmp[in0_WIDTH];

// dividend_tmp[0], divisor_tmp[0], remd_tmp[0]
always @(posedge clk)
begin
    if (ce) begin
        dividend_tmp[0] <= dividend;
        divisor_tmp[0]  <= divisor;
        remd_tmp[0]     <= 1'b0;
    end
end

genvar i;
generate 
    for (i = 0; i < in0_WIDTH; i = i + 1)
    begin : loop
        if (in0_WIDTH == 1) assign  comb_tmp[i]     = dividend_tmp[i][0];
        else                assign  comb_tmp[i]     = {remd_tmp[i][in0_WIDTH-2:0], dividend_tmp[i][in0_WIDTH-1]};
        assign  cal_tmp[i]      = {1'b0, comb_tmp[i]} - {1'b0, divisor_tmp[i]};

        always @(posedge clk)
        begin
            if (ce) begin
                if (in0_WIDTH == 1) dividend_tmp[i+1] <= ~cal_tmp[i][cal_WIDTH];
                else                dividend_tmp[i+1] <= {dividend_tmp[i][in0_WIDTH-2:0], ~cal_tmp[i][cal_WIDTH]};
                divisor_tmp[i+1]  <= divisor_tmp[i];
                remd_tmp[i+1]     <= cal_tmp[i][cal_WIDTH]? comb_tmp[i] : cal_tmp[i][in0_WIDTH-1:0];
            end
        end
    end
endgenerate

endmodule

module rendering_m_udiv_g8j_div
#(parameter
        in0_WIDTH   = 32,
        in1_WIDTH   = 32,
        out_WIDTH   = 32
)
(
        input                           clk,
        input                           reset,
        input                           ce,
        input           [in0_WIDTH-1:0] dividend,
        input           [in1_WIDTH-1:0] divisor,
        output  reg     [out_WIDTH-1:0] quot,
        output  reg     [out_WIDTH-1:0] remd
);
//------------------------Local signal-------------------
reg     [in0_WIDTH-1:0] dividend0;
reg     [in1_WIDTH-1:0] divisor0;
wire    [in0_WIDTH-1:0] dividend_u;
wire    [in1_WIDTH-1:0] divisor_u;
wire    [out_WIDTH-1:0] quot_u;
wire    [out_WIDTH-1:0] remd_u;
//------------------------Instantiation------------------
rendering_m_udiv_g8j_div_u #(
    .in0_WIDTH      ( in0_WIDTH ),
    .in1_WIDTH      ( in1_WIDTH ),
    .out_WIDTH      ( out_WIDTH )
) rendering_m_udiv_g8j_div_u_0 (
    .clk      ( clk ),
    .reset    ( reset ),
    .ce       ( ce ),
    .dividend ( dividend_u ),
    .divisor  ( divisor_u ),
    .quot     ( quot_u ),
    .remd     ( remd_u )
);
//------------------------Body---------------------------
assign dividend_u = dividend0;
assign divisor_u = divisor0;

always @(posedge clk)
begin
    if (ce) begin
        dividend0 <= dividend;
        divisor0  <= divisor;
    end
end

always @(posedge clk)
begin
    if (ce) begin
        quot <= quot_u;
        remd <= remd_u;
    end
end

endmodule


`timescale 1 ns / 1 ps
module rendering_m_udiv_g8j(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;

wire[dout_WIDTH - 1:0] sig_remd;


rendering_m_udiv_g8j_div #(
.in0_WIDTH( din0_WIDTH ),
.in1_WIDTH( din1_WIDTH ),
.out_WIDTH( dout_WIDTH ))
rendering_m_udiv_g8j_div_U(
    .dividend( din0 ),
    .divisor( din1 ),
    .quot( dout ),
    .remd( sig_remd ),
    .clk( clk ),
    .ce( ce ),
    .reset( reset ));

endmodule

// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module rendering_m_urem_fYi_div_u
#(parameter
    in0_WIDTH = 32,
    in1_WIDTH = 32,
    out_WIDTH = 32
)
(
    input                       clk,
    input                       reset,
    input                       ce,
    input       [in0_WIDTH-1:0] dividend,
    input       [in1_WIDTH-1:0] divisor,
    output wire [out_WIDTH-1:0] quot,
    output wire [out_WIDTH-1:0] remd
);

localparam cal_WIDTH = (in0_WIDTH > in1_WIDTH)? in0_WIDTH : in1_WIDTH;

//------------------------Local signal-------------------
reg  [in0_WIDTH-1:0] dividend_tmp[0:in0_WIDTH];
reg  [in1_WIDTH-1:0] divisor_tmp[0:in0_WIDTH];
reg  [in0_WIDTH-1:0] remd_tmp[0:in0_WIDTH];
wire [in0_WIDTH-1:0] comb_tmp[0:in0_WIDTH-1];
wire [cal_WIDTH:0]   cal_tmp[0:in0_WIDTH-1];
//------------------------Body---------------------------
assign  quot    = dividend_tmp[in0_WIDTH];
assign  remd    = remd_tmp[in0_WIDTH];

// dividend_tmp[0], divisor_tmp[0], remd_tmp[0]
always @(posedge clk)
begin
    if (ce) begin
        dividend_tmp[0] <= dividend;
        divisor_tmp[0]  <= divisor;
        remd_tmp[0]     <= 1'b0;
    end
end

genvar i;
generate 
    for (i = 0; i < in0_WIDTH; i = i + 1)
    begin : loop
        if (in0_WIDTH == 1) assign  comb_tmp[i]     = dividend_tmp[i][0];
        else                assign  comb_tmp[i]     = {remd_tmp[i][in0_WIDTH-2:0], dividend_tmp[i][in0_WIDTH-1]};
        assign  cal_tmp[i]      = {1'b0, comb_tmp[i]} - {1'b0, divisor_tmp[i]};

        always @(posedge clk)
        begin
            if (ce) begin
                if (in0_WIDTH == 1) dividend_tmp[i+1] <= ~cal_tmp[i][cal_WIDTH];
                else                dividend_tmp[i+1] <= {dividend_tmp[i][in0_WIDTH-2:0], ~cal_tmp[i][cal_WIDTH]};
                divisor_tmp[i+1]  <= divisor_tmp[i];
                remd_tmp[i+1]     <= cal_tmp[i][cal_WIDTH]? comb_tmp[i] : cal_tmp[i][in0_WIDTH-1:0];
            end
        end
    end
endgenerate

endmodule

module rendering_m_urem_fYi_div
#(parameter
        in0_WIDTH   = 32,
        in1_WIDTH   = 32,
        out_WIDTH   = 32
)
(
        input                           clk,
        input                           reset,
        input                           ce,
        input           [in0_WIDTH-1:0] dividend,
        input           [in1_WIDTH-1:0] divisor,
        output  reg     [out_WIDTH-1:0] quot,
        output  reg     [out_WIDTH-1:0] remd
);
//------------------------Local signal-------------------
reg     [in0_WIDTH-1:0] dividend0;
reg     [in1_WIDTH-1:0] divisor0;
wire    [in0_WIDTH-1:0] dividend_u;
wire    [in1_WIDTH-1:0] divisor_u;
wire    [out_WIDTH-1:0] quot_u;
wire    [out_WIDTH-1:0] remd_u;
//------------------------Instantiation------------------
rendering_m_urem_fYi_div_u #(
    .in0_WIDTH      ( in0_WIDTH ),
    .in1_WIDTH      ( in1_WIDTH ),
    .out_WIDTH      ( out_WIDTH )
) rendering_m_urem_fYi_div_u_0 (
    .clk      ( clk ),
    .reset    ( reset ),
    .ce       ( ce ),
    .dividend ( dividend_u ),
    .divisor  ( divisor_u ),
    .quot     ( quot_u ),
    .remd     ( remd_u )
);
//------------------------Body---------------------------
assign dividend_u = dividend0;
assign divisor_u = divisor0;

always @(posedge clk)
begin
    if (ce) begin
        dividend0 <= dividend;
        divisor0  <= divisor;
    end
end

always @(posedge clk)
begin
    if (ce) begin
        quot <= quot_u;
        remd <= remd_u;
    end
end

endmodule


`timescale 1 ns / 1 ps
module rendering_m_urem_fYi(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;

wire[dout_WIDTH - 1:0] sig_quot;


rendering_m_urem_fYi_div #(
.in0_WIDTH( din0_WIDTH ),
.in1_WIDTH( din1_WIDTH ),
.out_WIDTH( dout_WIDTH ))
rendering_m_urem_fYi_div_U(
    .dividend( din0 ),
    .divisor( din1 ),
    .remd( dout ),
    .quot( sig_quot ),
    .clk( clk ),
    .ce( ce ),
    .reset( reset ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rendering_m,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.118000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=77,HLS_SYN_DSP=3,HLS_SYN_FF=2900,HLS_SYN_LUT=16123,HLS_VERSION=2019_2}" *)

module rendering_m (
        Input_1_V_V,
        Output_1_V_V,
        ap_clk,
        ap_rst,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] Input_1_V_V;
output  [31:0] Output_1_V_V;
input   ap_clk;
input   ap_rst;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    Loop_TRIANGLES_proc1_U0_ap_start;
wire    Loop_TRIANGLES_proc1_U0_ap_done;
wire    Loop_TRIANGLES_proc1_U0_ap_continue;
wire    Loop_TRIANGLES_proc1_U0_ap_idle;
wire    Loop_TRIANGLES_proc1_U0_ap_ready;
wire    Loop_TRIANGLES_proc1_U0_Input_1_V_V_ap_ack;
wire   [31:0] Loop_TRIANGLES_proc1_U0_Output_1_V_V;
wire    Loop_TRIANGLES_proc1_U0_Output_1_V_V_ap_vld;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    Loop_TRIANGLES_proc1_U0_start_full_n;
wire    Loop_TRIANGLES_proc1_U0_start_write;

Loop_TRIANGLES_proc1 Loop_TRIANGLES_proc1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_TRIANGLES_proc1_U0_ap_start),
    .ap_done(Loop_TRIANGLES_proc1_U0_ap_done),
    .ap_continue(Loop_TRIANGLES_proc1_U0_ap_continue),
    .ap_idle(Loop_TRIANGLES_proc1_U0_ap_idle),
    .ap_ready(Loop_TRIANGLES_proc1_U0_ap_ready),
    .Input_1_V_V(Input_1_V_V),
    .Input_1_V_V_ap_vld(Input_1_V_V_ap_vld),
    .Input_1_V_V_ap_ack(Loop_TRIANGLES_proc1_U0_Input_1_V_V_ap_ack),
    .Output_1_V_V(Loop_TRIANGLES_proc1_U0_Output_1_V_V),
    .Output_1_V_V_ap_vld(Loop_TRIANGLES_proc1_U0_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(Output_1_V_V_ap_ack)
);

assign Input_1_V_V_ap_ack = Loop_TRIANGLES_proc1_U0_Input_1_V_V_ap_ack;

assign Loop_TRIANGLES_proc1_U0_ap_continue = 1'b1;

assign Loop_TRIANGLES_proc1_U0_ap_start = ap_start;

assign Loop_TRIANGLES_proc1_U0_start_full_n = 1'b1;

assign Loop_TRIANGLES_proc1_U0_start_write = 1'b0;

assign Output_1_V_V = Loop_TRIANGLES_proc1_U0_Output_1_V_V;

assign Output_1_V_V_ap_vld = Loop_TRIANGLES_proc1_U0_Output_1_V_V_ap_vld;

assign ap_done = Loop_TRIANGLES_proc1_U0_ap_done;

assign ap_idle = Loop_TRIANGLES_proc1_U0_ap_idle;

assign ap_ready = Loop_TRIANGLES_proc1_U0_ap_ready;

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_TRIANGLES_proc1_U0_ap_done;

assign ap_sync_ready = Loop_TRIANGLES_proc1_U0_ap_ready;

endmodule //rendering_m
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module zculling_top_pixejbC_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 9;
parameter MEM_SIZE = 500;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module zculling_top_pixejbC(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd500;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



zculling_top_pixejbC_ram zculling_top_pixejbC_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module zculling_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 135'd1;
parameter    ap_ST_fsm_state2 = 135'd2;
parameter    ap_ST_fsm_state3 = 135'd4;
parameter    ap_ST_fsm_state4 = 135'd8;
parameter    ap_ST_fsm_state5 = 135'd16;
parameter    ap_ST_fsm_state6 = 135'd32;
parameter    ap_ST_fsm_state7 = 135'd64;
parameter    ap_ST_fsm_state8 = 135'd128;
parameter    ap_ST_fsm_state9 = 135'd256;
parameter    ap_ST_fsm_state10 = 135'd512;
parameter    ap_ST_fsm_state11 = 135'd1024;
parameter    ap_ST_fsm_state12 = 135'd2048;
parameter    ap_ST_fsm_state13 = 135'd4096;
parameter    ap_ST_fsm_state14 = 135'd8192;
parameter    ap_ST_fsm_state15 = 135'd16384;
parameter    ap_ST_fsm_state16 = 135'd32768;
parameter    ap_ST_fsm_state17 = 135'd65536;
parameter    ap_ST_fsm_state18 = 135'd131072;
parameter    ap_ST_fsm_state19 = 135'd262144;
parameter    ap_ST_fsm_state20 = 135'd524288;
parameter    ap_ST_fsm_state21 = 135'd1048576;
parameter    ap_ST_fsm_state22 = 135'd2097152;
parameter    ap_ST_fsm_state23 = 135'd4194304;
parameter    ap_ST_fsm_state24 = 135'd8388608;
parameter    ap_ST_fsm_state25 = 135'd16777216;
parameter    ap_ST_fsm_state26 = 135'd33554432;
parameter    ap_ST_fsm_state27 = 135'd67108864;
parameter    ap_ST_fsm_state28 = 135'd134217728;
parameter    ap_ST_fsm_state29 = 135'd268435456;
parameter    ap_ST_fsm_state30 = 135'd536870912;
parameter    ap_ST_fsm_state31 = 135'd1073741824;
parameter    ap_ST_fsm_state32 = 135'd2147483648;
parameter    ap_ST_fsm_state33 = 135'd4294967296;
parameter    ap_ST_fsm_state34 = 135'd8589934592;
parameter    ap_ST_fsm_state35 = 135'd17179869184;
parameter    ap_ST_fsm_state36 = 135'd34359738368;
parameter    ap_ST_fsm_state37 = 135'd68719476736;
parameter    ap_ST_fsm_state38 = 135'd137438953472;
parameter    ap_ST_fsm_state39 = 135'd274877906944;
parameter    ap_ST_fsm_state40 = 135'd549755813888;
parameter    ap_ST_fsm_state41 = 135'd1099511627776;
parameter    ap_ST_fsm_state42 = 135'd2199023255552;
parameter    ap_ST_fsm_state43 = 135'd4398046511104;
parameter    ap_ST_fsm_state44 = 135'd8796093022208;
parameter    ap_ST_fsm_state45 = 135'd17592186044416;
parameter    ap_ST_fsm_state46 = 135'd35184372088832;
parameter    ap_ST_fsm_state47 = 135'd70368744177664;
parameter    ap_ST_fsm_state48 = 135'd140737488355328;
parameter    ap_ST_fsm_state49 = 135'd281474976710656;
parameter    ap_ST_fsm_state50 = 135'd562949953421312;
parameter    ap_ST_fsm_state51 = 135'd1125899906842624;
parameter    ap_ST_fsm_state52 = 135'd2251799813685248;
parameter    ap_ST_fsm_state53 = 135'd4503599627370496;
parameter    ap_ST_fsm_state54 = 135'd9007199254740992;
parameter    ap_ST_fsm_state55 = 135'd18014398509481984;
parameter    ap_ST_fsm_state56 = 135'd36028797018963968;
parameter    ap_ST_fsm_state57 = 135'd72057594037927936;
parameter    ap_ST_fsm_state58 = 135'd144115188075855872;
parameter    ap_ST_fsm_state59 = 135'd288230376151711744;
parameter    ap_ST_fsm_state60 = 135'd576460752303423488;
parameter    ap_ST_fsm_state61 = 135'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 135'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 135'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 135'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 135'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 135'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 135'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 135'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 135'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 135'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 135'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 135'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 135'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 135'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 135'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 135'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 135'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 135'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 135'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 135'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 135'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 135'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 135'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 135'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 135'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 135'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 135'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 135'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 135'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 135'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 135'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 135'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 135'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 135'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 135'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 135'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 135'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 135'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 135'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 135'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 135'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 135'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 135'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 135'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 135'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 135'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 135'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 135'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 135'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 135'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 135'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 135'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 135'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 135'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 135'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 135'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 135'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 135'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 135'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 135'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 135'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 135'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 135'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 135'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 135'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 135'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 135'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 135'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 135'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 135'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_pp1_stage0 = 135'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_pp1_stage1 = 135'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state134 = 135'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_pp2_stage0 = 135'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 135'd21778071482940061661655974875633165533184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_read;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

(* fsm_encoding = "none" *) reg   [134:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] counter_V_1;
reg   [15:0] z_buffer_V_address0;
reg    z_buffer_V_ce0;
reg    z_buffer_V_we0;
reg   [7:0] z_buffer_V_d0;
reg   [15:0] z_buffer_V_address1;
reg    z_buffer_V_ce1;
reg    z_buffer_V_we1;
wire   [7:0] z_buffer_V_q1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln449_reg_6854;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln469_reg_6893;
reg   [15:0] t_V_2_reg_2784;
reg   [15:0] i_op_assign_reg_2795;
reg   [31:0] tmp_V_reg_6562;
reg    ap_block_state1;
reg   [15:0] t_V_3_reg_6567;
wire   [0:0] icmp_ln879_fu_2813_p2;
wire   [8:0] i_V_fu_2825_p2;
reg   [8:0] i_V_reg_6579;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_3_fu_2831_p3;
reg   [16:0] tmp_3_reg_6584;
wire   [0:0] icmp_ln887_fu_2819_p2;
wire   [15:0] empty_9_fu_6415_p1;
reg   [15:0] empty_9_reg_6849;
wire    ap_CS_fsm_state130;
wire   [0:0] icmp_ln449_fu_6423_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state131_pp1_stage0_iter0;
wire    ap_block_state133_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [15:0] n_V_fu_6428_p2;
reg   [15:0] n_V_reg_6858;
wire   [7:0] fragment_x_V_1_fu_6434_p1;
reg   [7:0] fragment_x_V_1_reg_6863;
reg    ap_block_state132_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [7:0] fragment_y_V_1_reg_6868;
reg   [7:0] fragment_z_V_1_reg_6873;
reg   [7:0] fragment_color_V_1_reg_6879;
reg   [15:0] z_buffer_V_addr_1_reg_6884;
wire   [0:0] icmp_ln469_fu_6505_p2;
wire    ap_block_state135_pp2_stage0_iter0;
reg    ap_block_state136_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [15:0] j_fu_6511_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state131;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state135;
reg   [8:0] pixels_x_V_address0;
reg    pixels_x_V_ce0;
reg    pixels_x_V_we0;
wire   [7:0] pixels_x_V_q0;
reg   [8:0] pixels_y_V_address0;
reg    pixels_y_V_ce0;
reg    pixels_y_V_we0;
wire   [7:0] pixels_y_V_q0;
reg   [8:0] pixels_color_V_address0;
reg    pixels_color_V_ce0;
reg    pixels_color_V_we0;
wire   [7:0] pixels_color_V_q0;
reg   [8:0] t_V_reg_2773;
wire    ap_CS_fsm_state129;
reg   [15:0] ap_phi_mux_t_V_2_phi_fu_2788_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln321_fu_2839_p1;
wire   [63:0] tmp_4_fu_2850_p3;
wire   [63:0] tmp_5_fu_2864_p3;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_6_fu_2878_p3;
wire   [63:0] tmp_7_fu_2892_p3;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_8_fu_2906_p3;
wire   [63:0] tmp_9_fu_2920_p3;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_s_fu_2934_p3;
wire   [63:0] tmp_10_fu_2948_p3;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_11_fu_2962_p3;
wire   [63:0] tmp_12_fu_2976_p3;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_13_fu_2990_p3;
wire   [63:0] tmp_14_fu_3004_p3;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_15_fu_3018_p3;
wire   [63:0] tmp_16_fu_3032_p3;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_17_fu_3046_p3;
wire   [63:0] tmp_18_fu_3060_p3;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_19_fu_3074_p3;
wire   [63:0] tmp_20_fu_3088_p3;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_21_fu_3102_p3;
wire   [63:0] tmp_22_fu_3116_p3;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_23_fu_3130_p3;
wire   [63:0] tmp_24_fu_3144_p3;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_25_fu_3158_p3;
wire   [63:0] tmp_26_fu_3172_p3;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_27_fu_3186_p3;
wire   [63:0] tmp_28_fu_3200_p3;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_29_fu_3214_p3;
wire   [63:0] tmp_30_fu_3228_p3;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_31_fu_3242_p3;
wire   [63:0] tmp_32_fu_3256_p3;
wire    ap_CS_fsm_state17;
wire   [63:0] tmp_33_fu_3270_p3;
wire   [63:0] tmp_34_fu_3284_p3;
wire    ap_CS_fsm_state18;
wire   [63:0] tmp_35_fu_3298_p3;
wire   [63:0] tmp_36_fu_3312_p3;
wire    ap_CS_fsm_state19;
wire   [63:0] tmp_37_fu_3326_p3;
wire   [63:0] tmp_38_fu_3340_p3;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_39_fu_3354_p3;
wire   [63:0] tmp_40_fu_3368_p3;
wire    ap_CS_fsm_state21;
wire   [63:0] tmp_41_fu_3382_p3;
wire   [63:0] tmp_42_fu_3396_p3;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_43_fu_3410_p3;
wire   [63:0] tmp_44_fu_3424_p3;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_45_fu_3438_p3;
wire   [63:0] tmp_46_fu_3452_p3;
wire    ap_CS_fsm_state24;
wire   [63:0] tmp_47_fu_3466_p3;
wire   [63:0] tmp_48_fu_3480_p3;
wire    ap_CS_fsm_state25;
wire   [63:0] tmp_49_fu_3494_p3;
wire   [63:0] tmp_50_fu_3508_p3;
wire    ap_CS_fsm_state26;
wire   [63:0] tmp_51_fu_3522_p3;
wire   [63:0] tmp_52_fu_3536_p3;
wire    ap_CS_fsm_state27;
wire   [63:0] tmp_53_fu_3550_p3;
wire   [63:0] tmp_54_fu_3564_p3;
wire    ap_CS_fsm_state28;
wire   [63:0] tmp_55_fu_3578_p3;
wire   [63:0] tmp_56_fu_3592_p3;
wire    ap_CS_fsm_state29;
wire   [63:0] tmp_57_fu_3606_p3;
wire   [63:0] tmp_58_fu_3620_p3;
wire    ap_CS_fsm_state30;
wire   [63:0] tmp_59_fu_3634_p3;
wire   [63:0] tmp_60_fu_3648_p3;
wire    ap_CS_fsm_state31;
wire   [63:0] tmp_61_fu_3662_p3;
wire   [63:0] tmp_62_fu_3676_p3;
wire    ap_CS_fsm_state32;
wire   [63:0] tmp_63_fu_3690_p3;
wire   [63:0] tmp_64_fu_3704_p3;
wire    ap_CS_fsm_state33;
wire   [63:0] tmp_65_fu_3718_p3;
wire   [63:0] tmp_66_fu_3732_p3;
wire    ap_CS_fsm_state34;
wire   [63:0] tmp_67_fu_3746_p3;
wire   [63:0] tmp_68_fu_3760_p3;
wire    ap_CS_fsm_state35;
wire   [63:0] tmp_69_fu_3774_p3;
wire   [63:0] tmp_70_fu_3788_p3;
wire    ap_CS_fsm_state36;
wire   [63:0] tmp_71_fu_3802_p3;
wire   [63:0] tmp_72_fu_3816_p3;
wire    ap_CS_fsm_state37;
wire   [63:0] tmp_73_fu_3830_p3;
wire   [63:0] tmp_74_fu_3844_p3;
wire    ap_CS_fsm_state38;
wire   [63:0] tmp_75_fu_3858_p3;
wire   [63:0] tmp_76_fu_3872_p3;
wire    ap_CS_fsm_state39;
wire   [63:0] tmp_77_fu_3886_p3;
wire   [63:0] tmp_78_fu_3900_p3;
wire    ap_CS_fsm_state40;
wire   [63:0] tmp_79_fu_3914_p3;
wire   [63:0] tmp_80_fu_3928_p3;
wire    ap_CS_fsm_state41;
wire   [63:0] tmp_81_fu_3942_p3;
wire   [63:0] tmp_82_fu_3956_p3;
wire    ap_CS_fsm_state42;
wire   [63:0] tmp_83_fu_3970_p3;
wire   [63:0] tmp_84_fu_3984_p3;
wire    ap_CS_fsm_state43;
wire   [63:0] tmp_85_fu_3998_p3;
wire   [63:0] tmp_86_fu_4012_p3;
wire    ap_CS_fsm_state44;
wire   [63:0] tmp_87_fu_4026_p3;
wire   [63:0] tmp_88_fu_4040_p3;
wire    ap_CS_fsm_state45;
wire   [63:0] tmp_89_fu_4054_p3;
wire   [63:0] tmp_90_fu_4068_p3;
wire    ap_CS_fsm_state46;
wire   [63:0] tmp_91_fu_4082_p3;
wire   [63:0] tmp_92_fu_4096_p3;
wire    ap_CS_fsm_state47;
wire   [63:0] tmp_93_fu_4110_p3;
wire   [63:0] tmp_94_fu_4124_p3;
wire    ap_CS_fsm_state48;
wire   [63:0] tmp_95_fu_4138_p3;
wire   [63:0] tmp_96_fu_4152_p3;
wire    ap_CS_fsm_state49;
wire   [63:0] tmp_97_fu_4166_p3;
wire   [63:0] tmp_98_fu_4180_p3;
wire    ap_CS_fsm_state50;
wire   [63:0] tmp_99_fu_4194_p3;
wire   [63:0] tmp_100_fu_4208_p3;
wire    ap_CS_fsm_state51;
wire   [63:0] tmp_101_fu_4222_p3;
wire   [63:0] tmp_102_fu_4236_p3;
wire    ap_CS_fsm_state52;
wire   [63:0] tmp_103_fu_4250_p3;
wire   [63:0] tmp_104_fu_4264_p3;
wire    ap_CS_fsm_state53;
wire   [63:0] tmp_105_fu_4278_p3;
wire   [63:0] tmp_106_fu_4292_p3;
wire    ap_CS_fsm_state54;
wire   [63:0] tmp_107_fu_4306_p3;
wire   [63:0] tmp_108_fu_4320_p3;
wire    ap_CS_fsm_state55;
wire   [63:0] tmp_109_fu_4334_p3;
wire   [63:0] tmp_110_fu_4348_p3;
wire    ap_CS_fsm_state56;
wire   [63:0] tmp_111_fu_4362_p3;
wire   [63:0] tmp_112_fu_4376_p3;
wire    ap_CS_fsm_state57;
wire   [63:0] tmp_113_fu_4390_p3;
wire   [63:0] tmp_114_fu_4404_p3;
wire    ap_CS_fsm_state58;
wire   [63:0] tmp_115_fu_4418_p3;
wire   [63:0] tmp_116_fu_4432_p3;
wire    ap_CS_fsm_state59;
wire   [63:0] tmp_117_fu_4446_p3;
wire   [63:0] tmp_118_fu_4460_p3;
wire    ap_CS_fsm_state60;
wire   [63:0] tmp_119_fu_4474_p3;
wire   [63:0] tmp_120_fu_4488_p3;
wire    ap_CS_fsm_state61;
wire   [63:0] tmp_121_fu_4502_p3;
wire   [63:0] tmp_122_fu_4516_p3;
wire    ap_CS_fsm_state62;
wire   [63:0] tmp_123_fu_4530_p3;
wire   [63:0] tmp_124_fu_4544_p3;
wire    ap_CS_fsm_state63;
wire   [63:0] tmp_125_fu_4558_p3;
wire   [63:0] tmp_126_fu_4572_p3;
wire    ap_CS_fsm_state64;
wire   [63:0] tmp_127_fu_4586_p3;
wire   [63:0] tmp_128_fu_4600_p3;
wire    ap_CS_fsm_state65;
wire   [63:0] tmp_129_fu_4614_p3;
wire   [63:0] tmp_130_fu_4628_p3;
wire    ap_CS_fsm_state66;
wire   [63:0] tmp_131_fu_4642_p3;
wire   [63:0] tmp_132_fu_4656_p3;
wire    ap_CS_fsm_state67;
wire   [63:0] tmp_133_fu_4670_p3;
wire   [63:0] tmp_134_fu_4684_p3;
wire    ap_CS_fsm_state68;
wire   [63:0] tmp_135_fu_4698_p3;
wire   [63:0] tmp_136_fu_4712_p3;
wire    ap_CS_fsm_state69;
wire   [63:0] tmp_137_fu_4726_p3;
wire   [63:0] tmp_138_fu_4740_p3;
wire    ap_CS_fsm_state70;
wire   [63:0] tmp_139_fu_4754_p3;
wire   [63:0] tmp_140_fu_4768_p3;
wire    ap_CS_fsm_state71;
wire   [63:0] tmp_141_fu_4782_p3;
wire   [63:0] tmp_142_fu_4796_p3;
wire    ap_CS_fsm_state72;
wire   [63:0] tmp_143_fu_4810_p3;
wire   [63:0] tmp_144_fu_4824_p3;
wire    ap_CS_fsm_state73;
wire   [63:0] tmp_145_fu_4838_p3;
wire   [63:0] tmp_146_fu_4852_p3;
wire    ap_CS_fsm_state74;
wire   [63:0] tmp_147_fu_4866_p3;
wire   [63:0] tmp_148_fu_4880_p3;
wire    ap_CS_fsm_state75;
wire   [63:0] tmp_149_fu_4894_p3;
wire   [63:0] tmp_150_fu_4908_p3;
wire    ap_CS_fsm_state76;
wire   [63:0] tmp_151_fu_4922_p3;
wire   [63:0] tmp_152_fu_4936_p3;
wire    ap_CS_fsm_state77;
wire   [63:0] tmp_153_fu_4950_p3;
wire   [63:0] tmp_154_fu_4964_p3;
wire    ap_CS_fsm_state78;
wire   [63:0] tmp_155_fu_4978_p3;
wire   [63:0] tmp_156_fu_4992_p3;
wire    ap_CS_fsm_state79;
wire   [63:0] tmp_157_fu_5006_p3;
wire   [63:0] tmp_158_fu_5020_p3;
wire    ap_CS_fsm_state80;
wire   [63:0] tmp_159_fu_5034_p3;
wire   [63:0] tmp_160_fu_5048_p3;
wire    ap_CS_fsm_state81;
wire   [63:0] tmp_161_fu_5062_p3;
wire   [63:0] tmp_162_fu_5076_p3;
wire    ap_CS_fsm_state82;
wire   [63:0] tmp_163_fu_5090_p3;
wire   [63:0] tmp_164_fu_5104_p3;
wire    ap_CS_fsm_state83;
wire   [63:0] tmp_165_fu_5118_p3;
wire   [63:0] tmp_166_fu_5132_p3;
wire    ap_CS_fsm_state84;
wire   [63:0] tmp_167_fu_5146_p3;
wire   [63:0] tmp_168_fu_5160_p3;
wire    ap_CS_fsm_state85;
wire   [63:0] tmp_169_fu_5174_p3;
wire   [63:0] tmp_170_fu_5188_p3;
wire    ap_CS_fsm_state86;
wire   [63:0] tmp_171_fu_5202_p3;
wire   [63:0] tmp_172_fu_5216_p3;
wire    ap_CS_fsm_state87;
wire   [63:0] tmp_173_fu_5230_p3;
wire   [63:0] tmp_174_fu_5244_p3;
wire    ap_CS_fsm_state88;
wire   [63:0] tmp_175_fu_5258_p3;
wire   [63:0] tmp_176_fu_5272_p3;
wire    ap_CS_fsm_state89;
wire   [63:0] tmp_177_fu_5286_p3;
wire   [63:0] tmp_178_fu_5300_p3;
wire    ap_CS_fsm_state90;
wire   [63:0] tmp_179_fu_5314_p3;
wire   [63:0] tmp_180_fu_5328_p3;
wire    ap_CS_fsm_state91;
wire   [63:0] tmp_181_fu_5342_p3;
wire   [63:0] tmp_182_fu_5356_p3;
wire    ap_CS_fsm_state92;
wire   [63:0] tmp_183_fu_5370_p3;
wire   [63:0] tmp_184_fu_5384_p3;
wire    ap_CS_fsm_state93;
wire   [63:0] tmp_185_fu_5398_p3;
wire   [63:0] tmp_186_fu_5412_p3;
wire    ap_CS_fsm_state94;
wire   [63:0] tmp_187_fu_5426_p3;
wire   [63:0] tmp_188_fu_5440_p3;
wire    ap_CS_fsm_state95;
wire   [63:0] tmp_189_fu_5454_p3;
wire   [63:0] tmp_190_fu_5468_p3;
wire    ap_CS_fsm_state96;
wire   [63:0] tmp_191_fu_5482_p3;
wire   [63:0] tmp_192_fu_5496_p3;
wire    ap_CS_fsm_state97;
wire   [63:0] tmp_193_fu_5510_p3;
wire   [63:0] tmp_194_fu_5524_p3;
wire    ap_CS_fsm_state98;
wire   [63:0] tmp_195_fu_5538_p3;
wire   [63:0] tmp_196_fu_5552_p3;
wire    ap_CS_fsm_state99;
wire   [63:0] tmp_197_fu_5566_p3;
wire   [63:0] tmp_198_fu_5580_p3;
wire    ap_CS_fsm_state100;
wire   [63:0] tmp_199_fu_5594_p3;
wire   [63:0] tmp_200_fu_5608_p3;
wire    ap_CS_fsm_state101;
wire   [63:0] tmp_201_fu_5622_p3;
wire   [63:0] tmp_202_fu_5636_p3;
wire    ap_CS_fsm_state102;
wire   [63:0] tmp_203_fu_5650_p3;
wire   [63:0] tmp_204_fu_5664_p3;
wire    ap_CS_fsm_state103;
wire   [63:0] tmp_205_fu_5678_p3;
wire   [63:0] tmp_206_fu_5692_p3;
wire    ap_CS_fsm_state104;
wire   [63:0] tmp_207_fu_5706_p3;
wire   [63:0] tmp_208_fu_5720_p3;
wire    ap_CS_fsm_state105;
wire   [63:0] tmp_209_fu_5734_p3;
wire   [63:0] tmp_210_fu_5748_p3;
wire    ap_CS_fsm_state106;
wire   [63:0] tmp_211_fu_5762_p3;
wire   [63:0] tmp_212_fu_5776_p3;
wire    ap_CS_fsm_state107;
wire   [63:0] tmp_213_fu_5790_p3;
wire   [63:0] tmp_214_fu_5804_p3;
wire    ap_CS_fsm_state108;
wire   [63:0] tmp_215_fu_5818_p3;
wire   [63:0] tmp_216_fu_5832_p3;
wire    ap_CS_fsm_state109;
wire   [63:0] tmp_217_fu_5846_p3;
wire   [63:0] tmp_218_fu_5860_p3;
wire    ap_CS_fsm_state110;
wire   [63:0] tmp_219_fu_5874_p3;
wire   [63:0] tmp_220_fu_5888_p3;
wire    ap_CS_fsm_state111;
wire   [63:0] tmp_221_fu_5902_p3;
wire   [63:0] tmp_222_fu_5916_p3;
wire    ap_CS_fsm_state112;
wire   [63:0] tmp_223_fu_5930_p3;
wire   [63:0] tmp_224_fu_5944_p3;
wire    ap_CS_fsm_state113;
wire   [63:0] tmp_225_fu_5958_p3;
wire   [63:0] tmp_226_fu_5972_p3;
wire    ap_CS_fsm_state114;
wire   [63:0] tmp_227_fu_5986_p3;
wire   [63:0] tmp_228_fu_6000_p3;
wire    ap_CS_fsm_state115;
wire   [63:0] tmp_229_fu_6014_p3;
wire   [63:0] tmp_230_fu_6028_p3;
wire    ap_CS_fsm_state116;
wire   [63:0] tmp_231_fu_6042_p3;
wire   [63:0] tmp_232_fu_6056_p3;
wire    ap_CS_fsm_state117;
wire   [63:0] tmp_233_fu_6070_p3;
wire   [63:0] tmp_234_fu_6084_p3;
wire    ap_CS_fsm_state118;
wire   [63:0] tmp_235_fu_6098_p3;
wire   [63:0] tmp_236_fu_6112_p3;
wire    ap_CS_fsm_state119;
wire   [63:0] tmp_237_fu_6126_p3;
wire   [63:0] tmp_238_fu_6140_p3;
wire    ap_CS_fsm_state120;
wire   [63:0] tmp_239_fu_6154_p3;
wire   [63:0] tmp_240_fu_6168_p3;
wire    ap_CS_fsm_state121;
wire   [63:0] tmp_241_fu_6182_p3;
wire   [63:0] tmp_242_fu_6196_p3;
wire    ap_CS_fsm_state122;
wire   [63:0] tmp_243_fu_6210_p3;
wire   [63:0] tmp_244_fu_6224_p3;
wire    ap_CS_fsm_state123;
wire   [63:0] tmp_245_fu_6238_p3;
wire   [63:0] tmp_246_fu_6252_p3;
wire    ap_CS_fsm_state124;
wire   [63:0] tmp_247_fu_6266_p3;
wire   [63:0] tmp_248_fu_6280_p3;
wire    ap_CS_fsm_state125;
wire   [63:0] tmp_249_fu_6294_p3;
wire   [63:0] tmp_250_fu_6308_p3;
wire    ap_CS_fsm_state126;
wire   [63:0] tmp_251_fu_6322_p3;
wire   [63:0] tmp_252_fu_6336_p3;
wire    ap_CS_fsm_state127;
wire   [63:0] tmp_253_fu_6350_p3;
wire   [63:0] tmp_254_fu_6364_p3;
wire    ap_CS_fsm_state128;
wire   [63:0] tmp_255_fu_6378_p3;
wire   [63:0] tmp_256_fu_6392_p3;
wire   [63:0] tmp_257_fu_6406_p3;
wire   [63:0] zext_ln887_fu_6472_p1;
wire   [63:0] zext_ln544_fu_6482_p1;
wire   [0:0] icmp_ln887_1_fu_6477_p2;
wire   [63:0] zext_ln471_fu_6517_p1;
wire   [15:0] select_ln480_fu_6548_p3;
wire    ap_CS_fsm_state137;
reg   [15:0] t_V_1_fu_632;
wire   [15:0] pixel_cntr_V_fu_6489_p2;
wire   [31:0] tmp_V_1_fu_6500_p1;
wire   [31:0] p_Result_s_fu_6524_p5;
reg    ap_block_pp2_stage0_01001;
wire   [16:0] or_ln321_fu_2844_p2;
wire   [16:0] or_ln321_1_fu_2859_p2;
wire   [16:0] or_ln321_2_fu_2873_p2;
wire   [16:0] or_ln321_3_fu_2887_p2;
wire   [16:0] or_ln321_4_fu_2901_p2;
wire   [16:0] or_ln321_5_fu_2915_p2;
wire   [16:0] or_ln321_6_fu_2929_p2;
wire   [16:0] or_ln321_7_fu_2943_p2;
wire   [16:0] or_ln321_8_fu_2957_p2;
wire   [16:0] or_ln321_9_fu_2971_p2;
wire   [16:0] or_ln321_10_fu_2985_p2;
wire   [16:0] or_ln321_11_fu_2999_p2;
wire   [16:0] or_ln321_12_fu_3013_p2;
wire   [16:0] or_ln321_13_fu_3027_p2;
wire   [16:0] or_ln321_14_fu_3041_p2;
wire   [16:0] or_ln321_15_fu_3055_p2;
wire   [16:0] or_ln321_16_fu_3069_p2;
wire   [16:0] or_ln321_17_fu_3083_p2;
wire   [16:0] or_ln321_18_fu_3097_p2;
wire   [16:0] or_ln321_19_fu_3111_p2;
wire   [16:0] or_ln321_20_fu_3125_p2;
wire   [16:0] or_ln321_21_fu_3139_p2;
wire   [16:0] or_ln321_22_fu_3153_p2;
wire   [16:0] or_ln321_23_fu_3167_p2;
wire   [16:0] or_ln321_24_fu_3181_p2;
wire   [16:0] or_ln321_25_fu_3195_p2;
wire   [16:0] or_ln321_26_fu_3209_p2;
wire   [16:0] or_ln321_27_fu_3223_p2;
wire   [16:0] or_ln321_28_fu_3237_p2;
wire   [16:0] or_ln321_29_fu_3251_p2;
wire   [16:0] or_ln321_30_fu_3265_p2;
wire   [16:0] or_ln321_31_fu_3279_p2;
wire   [16:0] or_ln321_32_fu_3293_p2;
wire   [16:0] or_ln321_33_fu_3307_p2;
wire   [16:0] or_ln321_34_fu_3321_p2;
wire   [16:0] or_ln321_35_fu_3335_p2;
wire   [16:0] or_ln321_36_fu_3349_p2;
wire   [16:0] or_ln321_37_fu_3363_p2;
wire   [16:0] or_ln321_38_fu_3377_p2;
wire   [16:0] or_ln321_39_fu_3391_p2;
wire   [16:0] or_ln321_40_fu_3405_p2;
wire   [16:0] or_ln321_41_fu_3419_p2;
wire   [16:0] or_ln321_42_fu_3433_p2;
wire   [16:0] or_ln321_43_fu_3447_p2;
wire   [16:0] or_ln321_44_fu_3461_p2;
wire   [16:0] or_ln321_45_fu_3475_p2;
wire   [16:0] or_ln321_46_fu_3489_p2;
wire   [16:0] or_ln321_47_fu_3503_p2;
wire   [16:0] or_ln321_48_fu_3517_p2;
wire   [16:0] or_ln321_49_fu_3531_p2;
wire   [16:0] or_ln321_50_fu_3545_p2;
wire   [16:0] or_ln321_51_fu_3559_p2;
wire   [16:0] or_ln321_52_fu_3573_p2;
wire   [16:0] or_ln321_53_fu_3587_p2;
wire   [16:0] or_ln321_54_fu_3601_p2;
wire   [16:0] or_ln321_55_fu_3615_p2;
wire   [16:0] or_ln321_56_fu_3629_p2;
wire   [16:0] or_ln321_57_fu_3643_p2;
wire   [16:0] or_ln321_58_fu_3657_p2;
wire   [16:0] or_ln321_59_fu_3671_p2;
wire   [16:0] or_ln321_60_fu_3685_p2;
wire   [16:0] or_ln321_61_fu_3699_p2;
wire   [16:0] or_ln321_62_fu_3713_p2;
wire   [16:0] or_ln321_63_fu_3727_p2;
wire   [16:0] or_ln321_64_fu_3741_p2;
wire   [16:0] or_ln321_65_fu_3755_p2;
wire   [16:0] or_ln321_66_fu_3769_p2;
wire   [16:0] or_ln321_67_fu_3783_p2;
wire   [16:0] or_ln321_68_fu_3797_p2;
wire   [16:0] or_ln321_69_fu_3811_p2;
wire   [16:0] or_ln321_70_fu_3825_p2;
wire   [16:0] or_ln321_71_fu_3839_p2;
wire   [16:0] or_ln321_72_fu_3853_p2;
wire   [16:0] or_ln321_73_fu_3867_p2;
wire   [16:0] or_ln321_74_fu_3881_p2;
wire   [16:0] or_ln321_75_fu_3895_p2;
wire   [16:0] or_ln321_76_fu_3909_p2;
wire   [16:0] or_ln321_77_fu_3923_p2;
wire   [16:0] or_ln321_78_fu_3937_p2;
wire   [16:0] or_ln321_79_fu_3951_p2;
wire   [16:0] or_ln321_80_fu_3965_p2;
wire   [16:0] or_ln321_81_fu_3979_p2;
wire   [16:0] or_ln321_82_fu_3993_p2;
wire   [16:0] or_ln321_83_fu_4007_p2;
wire   [16:0] or_ln321_84_fu_4021_p2;
wire   [16:0] or_ln321_85_fu_4035_p2;
wire   [16:0] or_ln321_86_fu_4049_p2;
wire   [16:0] or_ln321_87_fu_4063_p2;
wire   [16:0] or_ln321_88_fu_4077_p2;
wire   [16:0] or_ln321_89_fu_4091_p2;
wire   [16:0] or_ln321_90_fu_4105_p2;
wire   [16:0] or_ln321_91_fu_4119_p2;
wire   [16:0] or_ln321_92_fu_4133_p2;
wire   [16:0] or_ln321_93_fu_4147_p2;
wire   [16:0] or_ln321_94_fu_4161_p2;
wire   [16:0] or_ln321_95_fu_4175_p2;
wire   [16:0] or_ln321_96_fu_4189_p2;
wire   [16:0] or_ln321_97_fu_4203_p2;
wire   [16:0] or_ln321_98_fu_4217_p2;
wire   [16:0] or_ln321_99_fu_4231_p2;
wire   [16:0] or_ln321_100_fu_4245_p2;
wire   [16:0] or_ln321_101_fu_4259_p2;
wire   [16:0] or_ln321_102_fu_4273_p2;
wire   [16:0] or_ln321_103_fu_4287_p2;
wire   [16:0] or_ln321_104_fu_4301_p2;
wire   [16:0] or_ln321_105_fu_4315_p2;
wire   [16:0] or_ln321_106_fu_4329_p2;
wire   [16:0] or_ln321_107_fu_4343_p2;
wire   [16:0] or_ln321_108_fu_4357_p2;
wire   [16:0] or_ln321_109_fu_4371_p2;
wire   [16:0] or_ln321_110_fu_4385_p2;
wire   [16:0] or_ln321_111_fu_4399_p2;
wire   [16:0] or_ln321_112_fu_4413_p2;
wire   [16:0] or_ln321_113_fu_4427_p2;
wire   [16:0] or_ln321_114_fu_4441_p2;
wire   [16:0] or_ln321_115_fu_4455_p2;
wire   [16:0] or_ln321_116_fu_4469_p2;
wire   [16:0] or_ln321_117_fu_4483_p2;
wire   [16:0] or_ln321_118_fu_4497_p2;
wire   [16:0] or_ln321_119_fu_4511_p2;
wire   [16:0] or_ln321_120_fu_4525_p2;
wire   [16:0] or_ln321_121_fu_4539_p2;
wire   [16:0] or_ln321_122_fu_4553_p2;
wire   [16:0] or_ln321_123_fu_4567_p2;
wire   [16:0] or_ln321_124_fu_4581_p2;
wire   [16:0] or_ln321_125_fu_4595_p2;
wire   [16:0] or_ln321_126_fu_4609_p2;
wire   [16:0] or_ln321_127_fu_4623_p2;
wire   [16:0] or_ln321_128_fu_4637_p2;
wire   [16:0] or_ln321_129_fu_4651_p2;
wire   [16:0] or_ln321_130_fu_4665_p2;
wire   [16:0] or_ln321_131_fu_4679_p2;
wire   [16:0] or_ln321_132_fu_4693_p2;
wire   [16:0] or_ln321_133_fu_4707_p2;
wire   [16:0] or_ln321_134_fu_4721_p2;
wire   [16:0] or_ln321_135_fu_4735_p2;
wire   [16:0] or_ln321_136_fu_4749_p2;
wire   [16:0] or_ln321_137_fu_4763_p2;
wire   [16:0] or_ln321_138_fu_4777_p2;
wire   [16:0] or_ln321_139_fu_4791_p2;
wire   [16:0] or_ln321_140_fu_4805_p2;
wire   [16:0] or_ln321_141_fu_4819_p2;
wire   [16:0] or_ln321_142_fu_4833_p2;
wire   [16:0] or_ln321_143_fu_4847_p2;
wire   [16:0] or_ln321_144_fu_4861_p2;
wire   [16:0] or_ln321_145_fu_4875_p2;
wire   [16:0] or_ln321_146_fu_4889_p2;
wire   [16:0] or_ln321_147_fu_4903_p2;
wire   [16:0] or_ln321_148_fu_4917_p2;
wire   [16:0] or_ln321_149_fu_4931_p2;
wire   [16:0] or_ln321_150_fu_4945_p2;
wire   [16:0] or_ln321_151_fu_4959_p2;
wire   [16:0] or_ln321_152_fu_4973_p2;
wire   [16:0] or_ln321_153_fu_4987_p2;
wire   [16:0] or_ln321_154_fu_5001_p2;
wire   [16:0] or_ln321_155_fu_5015_p2;
wire   [16:0] or_ln321_156_fu_5029_p2;
wire   [16:0] or_ln321_157_fu_5043_p2;
wire   [16:0] or_ln321_158_fu_5057_p2;
wire   [16:0] or_ln321_159_fu_5071_p2;
wire   [16:0] or_ln321_160_fu_5085_p2;
wire   [16:0] or_ln321_161_fu_5099_p2;
wire   [16:0] or_ln321_162_fu_5113_p2;
wire   [16:0] or_ln321_163_fu_5127_p2;
wire   [16:0] or_ln321_164_fu_5141_p2;
wire   [16:0] or_ln321_165_fu_5155_p2;
wire   [16:0] or_ln321_166_fu_5169_p2;
wire   [16:0] or_ln321_167_fu_5183_p2;
wire   [16:0] or_ln321_168_fu_5197_p2;
wire   [16:0] or_ln321_169_fu_5211_p2;
wire   [16:0] or_ln321_170_fu_5225_p2;
wire   [16:0] or_ln321_171_fu_5239_p2;
wire   [16:0] or_ln321_172_fu_5253_p2;
wire   [16:0] or_ln321_173_fu_5267_p2;
wire   [16:0] or_ln321_174_fu_5281_p2;
wire   [16:0] or_ln321_175_fu_5295_p2;
wire   [16:0] or_ln321_176_fu_5309_p2;
wire   [16:0] or_ln321_177_fu_5323_p2;
wire   [16:0] or_ln321_178_fu_5337_p2;
wire   [16:0] or_ln321_179_fu_5351_p2;
wire   [16:0] or_ln321_180_fu_5365_p2;
wire   [16:0] or_ln321_181_fu_5379_p2;
wire   [16:0] or_ln321_182_fu_5393_p2;
wire   [16:0] or_ln321_183_fu_5407_p2;
wire   [16:0] or_ln321_184_fu_5421_p2;
wire   [16:0] or_ln321_185_fu_5435_p2;
wire   [16:0] or_ln321_186_fu_5449_p2;
wire   [16:0] or_ln321_187_fu_5463_p2;
wire   [16:0] or_ln321_188_fu_5477_p2;
wire   [16:0] or_ln321_189_fu_5491_p2;
wire   [16:0] or_ln321_190_fu_5505_p2;
wire   [16:0] or_ln321_191_fu_5519_p2;
wire   [16:0] or_ln321_192_fu_5533_p2;
wire   [16:0] or_ln321_193_fu_5547_p2;
wire   [16:0] or_ln321_194_fu_5561_p2;
wire   [16:0] or_ln321_195_fu_5575_p2;
wire   [16:0] or_ln321_196_fu_5589_p2;
wire   [16:0] or_ln321_197_fu_5603_p2;
wire   [16:0] or_ln321_198_fu_5617_p2;
wire   [16:0] or_ln321_199_fu_5631_p2;
wire   [16:0] or_ln321_200_fu_5645_p2;
wire   [16:0] or_ln321_201_fu_5659_p2;
wire   [16:0] or_ln321_202_fu_5673_p2;
wire   [16:0] or_ln321_203_fu_5687_p2;
wire   [16:0] or_ln321_204_fu_5701_p2;
wire   [16:0] or_ln321_205_fu_5715_p2;
wire   [16:0] or_ln321_206_fu_5729_p2;
wire   [16:0] or_ln321_207_fu_5743_p2;
wire   [16:0] or_ln321_208_fu_5757_p2;
wire   [16:0] or_ln321_209_fu_5771_p2;
wire   [16:0] or_ln321_210_fu_5785_p2;
wire   [16:0] or_ln321_211_fu_5799_p2;
wire   [16:0] or_ln321_212_fu_5813_p2;
wire   [16:0] or_ln321_213_fu_5827_p2;
wire   [16:0] or_ln321_214_fu_5841_p2;
wire   [16:0] or_ln321_215_fu_5855_p2;
wire   [16:0] or_ln321_216_fu_5869_p2;
wire   [16:0] or_ln321_217_fu_5883_p2;
wire   [16:0] or_ln321_218_fu_5897_p2;
wire   [16:0] or_ln321_219_fu_5911_p2;
wire   [16:0] or_ln321_220_fu_5925_p2;
wire   [16:0] or_ln321_221_fu_5939_p2;
wire   [16:0] or_ln321_222_fu_5953_p2;
wire   [16:0] or_ln321_223_fu_5967_p2;
wire   [16:0] or_ln321_224_fu_5981_p2;
wire   [16:0] or_ln321_225_fu_5995_p2;
wire   [16:0] or_ln321_226_fu_6009_p2;
wire   [16:0] or_ln321_227_fu_6023_p2;
wire   [16:0] or_ln321_228_fu_6037_p2;
wire   [16:0] or_ln321_229_fu_6051_p2;
wire   [16:0] or_ln321_230_fu_6065_p2;
wire   [16:0] or_ln321_231_fu_6079_p2;
wire   [16:0] or_ln321_232_fu_6093_p2;
wire   [16:0] or_ln321_233_fu_6107_p2;
wire   [16:0] or_ln321_234_fu_6121_p2;
wire   [16:0] or_ln321_235_fu_6135_p2;
wire   [16:0] or_ln321_236_fu_6149_p2;
wire   [16:0] or_ln321_237_fu_6163_p2;
wire   [16:0] or_ln321_238_fu_6177_p2;
wire   [16:0] or_ln321_239_fu_6191_p2;
wire   [16:0] or_ln321_240_fu_6205_p2;
wire   [16:0] or_ln321_241_fu_6219_p2;
wire   [16:0] or_ln321_242_fu_6233_p2;
wire   [16:0] or_ln321_243_fu_6247_p2;
wire   [16:0] or_ln321_244_fu_6261_p2;
wire   [16:0] or_ln321_245_fu_6275_p2;
wire   [16:0] or_ln321_246_fu_6289_p2;
wire   [16:0] or_ln321_247_fu_6303_p2;
wire   [16:0] or_ln321_248_fu_6317_p2;
wire   [16:0] or_ln321_249_fu_6331_p2;
wire   [16:0] or_ln321_250_fu_6345_p2;
wire   [16:0] or_ln321_251_fu_6359_p2;
wire   [16:0] or_ln321_252_fu_6373_p2;
wire   [16:0] or_ln321_253_fu_6387_p2;
wire   [16:0] or_ln321_254_fu_6401_p2;
wire   [15:0] trunc_ln887_fu_6468_p1;
wire   [15:0] add_ln700_fu_6537_p2;
wire   [0:0] icmp_ln879_1_fu_6542_p2;
reg   [134:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 135'd1;
#0 counter_V_1 = 16'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

zculling_top_z_buibs #(
    .DataWidth( 8 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
z_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(z_buffer_V_address0),
    .ce0(z_buffer_V_ce0),
    .we0(z_buffer_V_we0),
    .d0(z_buffer_V_d0),
    .address1(z_buffer_V_address1),
    .ce1(z_buffer_V_ce1),
    .we1(z_buffer_V_we1),
    .d1(8'd255),
    .q1(z_buffer_V_q1)
);

zculling_top_pixejbC #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pixels_x_V_address0),
    .ce0(pixels_x_V_ce0),
    .we0(pixels_x_V_we0),
    .d0(fragment_x_V_1_reg_6863),
    .q0(pixels_x_V_q0)
);

zculling_top_pixejbC #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pixels_y_V_address0),
    .ce0(pixels_y_V_ce0),
    .we0(pixels_y_V_we0),
    .d0(fragment_y_V_1_reg_6868),
    .q0(pixels_y_V_q0)
);

zculling_top_pixejbC #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pixels_color_V_address0),
    .ce0(pixels_color_V_ce0),
    .we0(pixels_color_V_we0),
    .d0(fragment_color_V_1_reg_6879),
    .q0(pixels_color_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state131) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state130)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state135) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state135))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state135);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln469_fu_6505_p2 == 1'd0))) begin
        i_op_assign_reg_2795 <= j_fu_6511_p2;
    end else if (((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n))) begin
        i_op_assign_reg_2795 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_fu_6477_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        t_V_1_fu_632 <= pixel_cntr_V_fu_6489_p2;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        t_V_1_fu_632 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln449_reg_6854 == 1'd0))) begin
        t_V_2_reg_2784 <= n_V_reg_6858;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        t_V_2_reg_2784 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (icmp_ln879_fu_2813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_2773 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        t_V_reg_2773 <= i_V_reg_6579;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        counter_V_1 <= select_ln480_fu_6548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        empty_9_reg_6849 <= empty_9_fu_6415_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln449_reg_6854 == 1'd0))) begin
        fragment_color_V_1_reg_6879 <= {{Input_1_V_V_dout[31:24]}};
        fragment_x_V_1_reg_6863 <= fragment_x_V_1_fu_6434_p1;
        fragment_y_V_1_reg_6868 <= {{Input_1_V_V_dout[15:8]}};
        fragment_z_V_1_reg_6873 <= {{Input_1_V_V_dout[23:16]}};
        z_buffer_V_addr_1_reg_6884 <= zext_ln887_fu_6472_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_6579 <= i_V_fu_2825_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln449_reg_6854 <= icmp_ln449_fu_6423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln469_reg_6893 <= icmp_ln469_fu_6505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        n_V_reg_6858 <= n_V_fu_6428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_3_reg_6567 <= counter_V_1;
        tmp_V_reg_6562 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2819_p2 == 1'd0))) begin
        tmp_3_reg_6584[16 : 8] <= tmp_3_fu_2831_p3[16 : 8];
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln449_reg_6854 == 1'd0) & (1'b0 == ap_block_pp1_stage1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_empty_n;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln449_reg_6854 == 1'd0)) | (~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_read = 1'b1;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state134) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln469_reg_6893 == 1'd0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln469_reg_6893 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        Output_1_V_V_din = p_Result_s_fu_6524_p5;
    end else if (((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n))) begin
        Output_1_V_V_din = tmp_V_1_fu_6500_p1;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln469_reg_6893 == 1'd0)) | ((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln449_fu_6423_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state131 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state131 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln469_fu_6505_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state135 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state135 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state137) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln449_reg_6854 == 1'd0))) begin
        ap_phi_mux_t_V_2_phi_fu_2788_p4 = n_V_reg_6858;
    end else begin
        ap_phi_mux_t_V_2_phi_fu_2788_p4 = t_V_2_reg_2784;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        pixels_color_V_address0 = zext_ln471_fu_6517_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_color_V_address0 = zext_ln544_fu_6482_p1;
    end else begin
        pixels_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        pixels_color_V_ce0 = 1'b1;
    end else begin
        pixels_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_fu_6477_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_color_V_we0 = 1'b1;
    end else begin
        pixels_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        pixels_x_V_address0 = zext_ln471_fu_6517_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_x_V_address0 = zext_ln544_fu_6482_p1;
    end else begin
        pixels_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        pixels_x_V_ce0 = 1'b1;
    end else begin
        pixels_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_fu_6477_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_x_V_we0 = 1'b1;
    end else begin
        pixels_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        pixels_y_V_address0 = zext_ln471_fu_6517_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_y_V_address0 = zext_ln544_fu_6482_p1;
    end else begin
        pixels_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        pixels_y_V_ce0 = 1'b1;
    end else begin
        pixels_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_fu_6477_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_y_V_we0 = 1'b1;
    end else begin
        pixels_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        z_buffer_V_address0 = z_buffer_V_addr_1_reg_6884;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        z_buffer_V_address0 = tmp_256_fu_6392_p3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        z_buffer_V_address0 = tmp_254_fu_6364_p3;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        z_buffer_V_address0 = tmp_252_fu_6336_p3;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        z_buffer_V_address0 = tmp_250_fu_6308_p3;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        z_buffer_V_address0 = tmp_248_fu_6280_p3;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        z_buffer_V_address0 = tmp_246_fu_6252_p3;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        z_buffer_V_address0 = tmp_244_fu_6224_p3;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        z_buffer_V_address0 = tmp_242_fu_6196_p3;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        z_buffer_V_address0 = tmp_240_fu_6168_p3;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        z_buffer_V_address0 = tmp_238_fu_6140_p3;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        z_buffer_V_address0 = tmp_236_fu_6112_p3;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        z_buffer_V_address0 = tmp_234_fu_6084_p3;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        z_buffer_V_address0 = tmp_232_fu_6056_p3;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        z_buffer_V_address0 = tmp_230_fu_6028_p3;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        z_buffer_V_address0 = tmp_228_fu_6000_p3;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        z_buffer_V_address0 = tmp_226_fu_5972_p3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        z_buffer_V_address0 = tmp_224_fu_5944_p3;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        z_buffer_V_address0 = tmp_222_fu_5916_p3;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        z_buffer_V_address0 = tmp_220_fu_5888_p3;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        z_buffer_V_address0 = tmp_218_fu_5860_p3;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        z_buffer_V_address0 = tmp_216_fu_5832_p3;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        z_buffer_V_address0 = tmp_214_fu_5804_p3;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        z_buffer_V_address0 = tmp_212_fu_5776_p3;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        z_buffer_V_address0 = tmp_210_fu_5748_p3;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        z_buffer_V_address0 = tmp_208_fu_5720_p3;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        z_buffer_V_address0 = tmp_206_fu_5692_p3;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        z_buffer_V_address0 = tmp_204_fu_5664_p3;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        z_buffer_V_address0 = tmp_202_fu_5636_p3;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        z_buffer_V_address0 = tmp_200_fu_5608_p3;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        z_buffer_V_address0 = tmp_198_fu_5580_p3;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        z_buffer_V_address0 = tmp_196_fu_5552_p3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        z_buffer_V_address0 = tmp_194_fu_5524_p3;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        z_buffer_V_address0 = tmp_192_fu_5496_p3;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        z_buffer_V_address0 = tmp_190_fu_5468_p3;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        z_buffer_V_address0 = tmp_188_fu_5440_p3;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        z_buffer_V_address0 = tmp_186_fu_5412_p3;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        z_buffer_V_address0 = tmp_184_fu_5384_p3;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        z_buffer_V_address0 = tmp_182_fu_5356_p3;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        z_buffer_V_address0 = tmp_180_fu_5328_p3;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        z_buffer_V_address0 = tmp_178_fu_5300_p3;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        z_buffer_V_address0 = tmp_176_fu_5272_p3;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        z_buffer_V_address0 = tmp_174_fu_5244_p3;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        z_buffer_V_address0 = tmp_172_fu_5216_p3;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        z_buffer_V_address0 = tmp_170_fu_5188_p3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        z_buffer_V_address0 = tmp_168_fu_5160_p3;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        z_buffer_V_address0 = tmp_166_fu_5132_p3;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        z_buffer_V_address0 = tmp_164_fu_5104_p3;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        z_buffer_V_address0 = tmp_162_fu_5076_p3;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        z_buffer_V_address0 = tmp_160_fu_5048_p3;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        z_buffer_V_address0 = tmp_158_fu_5020_p3;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        z_buffer_V_address0 = tmp_156_fu_4992_p3;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        z_buffer_V_address0 = tmp_154_fu_4964_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        z_buffer_V_address0 = tmp_152_fu_4936_p3;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        z_buffer_V_address0 = tmp_150_fu_4908_p3;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        z_buffer_V_address0 = tmp_148_fu_4880_p3;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        z_buffer_V_address0 = tmp_146_fu_4852_p3;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        z_buffer_V_address0 = tmp_144_fu_4824_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        z_buffer_V_address0 = tmp_142_fu_4796_p3;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        z_buffer_V_address0 = tmp_140_fu_4768_p3;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        z_buffer_V_address0 = tmp_138_fu_4740_p3;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        z_buffer_V_address0 = tmp_136_fu_4712_p3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        z_buffer_V_address0 = tmp_134_fu_4684_p3;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        z_buffer_V_address0 = tmp_132_fu_4656_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        z_buffer_V_address0 = tmp_130_fu_4628_p3;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        z_buffer_V_address0 = tmp_128_fu_4600_p3;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        z_buffer_V_address0 = tmp_126_fu_4572_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        z_buffer_V_address0 = tmp_124_fu_4544_p3;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        z_buffer_V_address0 = tmp_122_fu_4516_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        z_buffer_V_address0 = tmp_120_fu_4488_p3;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        z_buffer_V_address0 = tmp_118_fu_4460_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        z_buffer_V_address0 = tmp_116_fu_4432_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        z_buffer_V_address0 = tmp_114_fu_4404_p3;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        z_buffer_V_address0 = tmp_112_fu_4376_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        z_buffer_V_address0 = tmp_110_fu_4348_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        z_buffer_V_address0 = tmp_108_fu_4320_p3;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        z_buffer_V_address0 = tmp_106_fu_4292_p3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        z_buffer_V_address0 = tmp_104_fu_4264_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        z_buffer_V_address0 = tmp_102_fu_4236_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        z_buffer_V_address0 = tmp_100_fu_4208_p3;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        z_buffer_V_address0 = tmp_98_fu_4180_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        z_buffer_V_address0 = tmp_96_fu_4152_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        z_buffer_V_address0 = tmp_94_fu_4124_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        z_buffer_V_address0 = tmp_92_fu_4096_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        z_buffer_V_address0 = tmp_90_fu_4068_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        z_buffer_V_address0 = tmp_88_fu_4040_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        z_buffer_V_address0 = tmp_86_fu_4012_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        z_buffer_V_address0 = tmp_84_fu_3984_p3;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        z_buffer_V_address0 = tmp_82_fu_3956_p3;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        z_buffer_V_address0 = tmp_80_fu_3928_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        z_buffer_V_address0 = tmp_78_fu_3900_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        z_buffer_V_address0 = tmp_76_fu_3872_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        z_buffer_V_address0 = tmp_74_fu_3844_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        z_buffer_V_address0 = tmp_72_fu_3816_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        z_buffer_V_address0 = tmp_70_fu_3788_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        z_buffer_V_address0 = tmp_68_fu_3760_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        z_buffer_V_address0 = tmp_66_fu_3732_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        z_buffer_V_address0 = tmp_64_fu_3704_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        z_buffer_V_address0 = tmp_62_fu_3676_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        z_buffer_V_address0 = tmp_60_fu_3648_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        z_buffer_V_address0 = tmp_58_fu_3620_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        z_buffer_V_address0 = tmp_56_fu_3592_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        z_buffer_V_address0 = tmp_54_fu_3564_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        z_buffer_V_address0 = tmp_52_fu_3536_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        z_buffer_V_address0 = tmp_50_fu_3508_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        z_buffer_V_address0 = tmp_48_fu_3480_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        z_buffer_V_address0 = tmp_46_fu_3452_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        z_buffer_V_address0 = tmp_44_fu_3424_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        z_buffer_V_address0 = tmp_42_fu_3396_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        z_buffer_V_address0 = tmp_40_fu_3368_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        z_buffer_V_address0 = tmp_38_fu_3340_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        z_buffer_V_address0 = tmp_36_fu_3312_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        z_buffer_V_address0 = tmp_34_fu_3284_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        z_buffer_V_address0 = tmp_32_fu_3256_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        z_buffer_V_address0 = tmp_30_fu_3228_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        z_buffer_V_address0 = tmp_28_fu_3200_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        z_buffer_V_address0 = tmp_26_fu_3172_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z_buffer_V_address0 = tmp_24_fu_3144_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        z_buffer_V_address0 = tmp_22_fu_3116_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        z_buffer_V_address0 = tmp_20_fu_3088_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        z_buffer_V_address0 = tmp_18_fu_3060_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        z_buffer_V_address0 = tmp_16_fu_3032_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_buffer_V_address0 = tmp_14_fu_3004_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        z_buffer_V_address0 = tmp_12_fu_2976_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_buffer_V_address0 = tmp_10_fu_2948_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        z_buffer_V_address0 = tmp_9_fu_2920_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        z_buffer_V_address0 = tmp_7_fu_2892_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        z_buffer_V_address0 = tmp_5_fu_2864_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        z_buffer_V_address0 = zext_ln321_fu_2839_p1;
    end else begin
        z_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        z_buffer_V_address1 = zext_ln887_fu_6472_p1;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        z_buffer_V_address1 = tmp_257_fu_6406_p3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        z_buffer_V_address1 = tmp_255_fu_6378_p3;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        z_buffer_V_address1 = tmp_253_fu_6350_p3;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        z_buffer_V_address1 = tmp_251_fu_6322_p3;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        z_buffer_V_address1 = tmp_249_fu_6294_p3;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        z_buffer_V_address1 = tmp_247_fu_6266_p3;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        z_buffer_V_address1 = tmp_245_fu_6238_p3;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        z_buffer_V_address1 = tmp_243_fu_6210_p3;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        z_buffer_V_address1 = tmp_241_fu_6182_p3;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        z_buffer_V_address1 = tmp_239_fu_6154_p3;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        z_buffer_V_address1 = tmp_237_fu_6126_p3;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        z_buffer_V_address1 = tmp_235_fu_6098_p3;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        z_buffer_V_address1 = tmp_233_fu_6070_p3;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        z_buffer_V_address1 = tmp_231_fu_6042_p3;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        z_buffer_V_address1 = tmp_229_fu_6014_p3;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        z_buffer_V_address1 = tmp_227_fu_5986_p3;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        z_buffer_V_address1 = tmp_225_fu_5958_p3;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        z_buffer_V_address1 = tmp_223_fu_5930_p3;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        z_buffer_V_address1 = tmp_221_fu_5902_p3;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        z_buffer_V_address1 = tmp_219_fu_5874_p3;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        z_buffer_V_address1 = tmp_217_fu_5846_p3;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        z_buffer_V_address1 = tmp_215_fu_5818_p3;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        z_buffer_V_address1 = tmp_213_fu_5790_p3;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        z_buffer_V_address1 = tmp_211_fu_5762_p3;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        z_buffer_V_address1 = tmp_209_fu_5734_p3;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        z_buffer_V_address1 = tmp_207_fu_5706_p3;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        z_buffer_V_address1 = tmp_205_fu_5678_p3;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        z_buffer_V_address1 = tmp_203_fu_5650_p3;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        z_buffer_V_address1 = tmp_201_fu_5622_p3;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        z_buffer_V_address1 = tmp_199_fu_5594_p3;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        z_buffer_V_address1 = tmp_197_fu_5566_p3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        z_buffer_V_address1 = tmp_195_fu_5538_p3;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        z_buffer_V_address1 = tmp_193_fu_5510_p3;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        z_buffer_V_address1 = tmp_191_fu_5482_p3;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        z_buffer_V_address1 = tmp_189_fu_5454_p3;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        z_buffer_V_address1 = tmp_187_fu_5426_p3;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        z_buffer_V_address1 = tmp_185_fu_5398_p3;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        z_buffer_V_address1 = tmp_183_fu_5370_p3;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        z_buffer_V_address1 = tmp_181_fu_5342_p3;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        z_buffer_V_address1 = tmp_179_fu_5314_p3;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        z_buffer_V_address1 = tmp_177_fu_5286_p3;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        z_buffer_V_address1 = tmp_175_fu_5258_p3;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        z_buffer_V_address1 = tmp_173_fu_5230_p3;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        z_buffer_V_address1 = tmp_171_fu_5202_p3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        z_buffer_V_address1 = tmp_169_fu_5174_p3;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        z_buffer_V_address1 = tmp_167_fu_5146_p3;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        z_buffer_V_address1 = tmp_165_fu_5118_p3;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        z_buffer_V_address1 = tmp_163_fu_5090_p3;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        z_buffer_V_address1 = tmp_161_fu_5062_p3;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        z_buffer_V_address1 = tmp_159_fu_5034_p3;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        z_buffer_V_address1 = tmp_157_fu_5006_p3;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        z_buffer_V_address1 = tmp_155_fu_4978_p3;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        z_buffer_V_address1 = tmp_153_fu_4950_p3;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        z_buffer_V_address1 = tmp_151_fu_4922_p3;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        z_buffer_V_address1 = tmp_149_fu_4894_p3;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        z_buffer_V_address1 = tmp_147_fu_4866_p3;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        z_buffer_V_address1 = tmp_145_fu_4838_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        z_buffer_V_address1 = tmp_143_fu_4810_p3;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        z_buffer_V_address1 = tmp_141_fu_4782_p3;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        z_buffer_V_address1 = tmp_139_fu_4754_p3;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        z_buffer_V_address1 = tmp_137_fu_4726_p3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        z_buffer_V_address1 = tmp_135_fu_4698_p3;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        z_buffer_V_address1 = tmp_133_fu_4670_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        z_buffer_V_address1 = tmp_131_fu_4642_p3;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        z_buffer_V_address1 = tmp_129_fu_4614_p3;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        z_buffer_V_address1 = tmp_127_fu_4586_p3;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        z_buffer_V_address1 = tmp_125_fu_4558_p3;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        z_buffer_V_address1 = tmp_123_fu_4530_p3;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        z_buffer_V_address1 = tmp_121_fu_4502_p3;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        z_buffer_V_address1 = tmp_119_fu_4474_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        z_buffer_V_address1 = tmp_117_fu_4446_p3;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        z_buffer_V_address1 = tmp_115_fu_4418_p3;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        z_buffer_V_address1 = tmp_113_fu_4390_p3;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        z_buffer_V_address1 = tmp_111_fu_4362_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        z_buffer_V_address1 = tmp_109_fu_4334_p3;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        z_buffer_V_address1 = tmp_107_fu_4306_p3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        z_buffer_V_address1 = tmp_105_fu_4278_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        z_buffer_V_address1 = tmp_103_fu_4250_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        z_buffer_V_address1 = tmp_101_fu_4222_p3;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        z_buffer_V_address1 = tmp_99_fu_4194_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        z_buffer_V_address1 = tmp_97_fu_4166_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        z_buffer_V_address1 = tmp_95_fu_4138_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        z_buffer_V_address1 = tmp_93_fu_4110_p3;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        z_buffer_V_address1 = tmp_91_fu_4082_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        z_buffer_V_address1 = tmp_89_fu_4054_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        z_buffer_V_address1 = tmp_87_fu_4026_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        z_buffer_V_address1 = tmp_85_fu_3998_p3;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        z_buffer_V_address1 = tmp_83_fu_3970_p3;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        z_buffer_V_address1 = tmp_81_fu_3942_p3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        z_buffer_V_address1 = tmp_79_fu_3914_p3;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        z_buffer_V_address1 = tmp_77_fu_3886_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        z_buffer_V_address1 = tmp_75_fu_3858_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        z_buffer_V_address1 = tmp_73_fu_3830_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        z_buffer_V_address1 = tmp_71_fu_3802_p3;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        z_buffer_V_address1 = tmp_69_fu_3774_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        z_buffer_V_address1 = tmp_67_fu_3746_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        z_buffer_V_address1 = tmp_65_fu_3718_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        z_buffer_V_address1 = tmp_63_fu_3690_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        z_buffer_V_address1 = tmp_61_fu_3662_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        z_buffer_V_address1 = tmp_59_fu_3634_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        z_buffer_V_address1 = tmp_57_fu_3606_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        z_buffer_V_address1 = tmp_55_fu_3578_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        z_buffer_V_address1 = tmp_53_fu_3550_p3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        z_buffer_V_address1 = tmp_51_fu_3522_p3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        z_buffer_V_address1 = tmp_49_fu_3494_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        z_buffer_V_address1 = tmp_47_fu_3466_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        z_buffer_V_address1 = tmp_45_fu_3438_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        z_buffer_V_address1 = tmp_43_fu_3410_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        z_buffer_V_address1 = tmp_41_fu_3382_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        z_buffer_V_address1 = tmp_39_fu_3354_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        z_buffer_V_address1 = tmp_37_fu_3326_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        z_buffer_V_address1 = tmp_35_fu_3298_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        z_buffer_V_address1 = tmp_33_fu_3270_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        z_buffer_V_address1 = tmp_31_fu_3242_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        z_buffer_V_address1 = tmp_29_fu_3214_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        z_buffer_V_address1 = tmp_27_fu_3186_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        z_buffer_V_address1 = tmp_25_fu_3158_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        z_buffer_V_address1 = tmp_23_fu_3130_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        z_buffer_V_address1 = tmp_21_fu_3102_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        z_buffer_V_address1 = tmp_19_fu_3074_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        z_buffer_V_address1 = tmp_17_fu_3046_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_buffer_V_address1 = tmp_15_fu_3018_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        z_buffer_V_address1 = tmp_13_fu_2990_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_buffer_V_address1 = tmp_11_fu_2962_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        z_buffer_V_address1 = tmp_s_fu_2934_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        z_buffer_V_address1 = tmp_8_fu_2906_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        z_buffer_V_address1 = tmp_6_fu_2878_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        z_buffer_V_address1 = tmp_4_fu_2850_p3;
    end else begin
        z_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        z_buffer_V_ce0 = 1'b1;
    end else begin
        z_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        z_buffer_V_ce1 = 1'b1;
    end else begin
        z_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        z_buffer_V_d0 = fragment_z_V_1_reg_6873;
    end else if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70))) begin
        z_buffer_V_d0 = 8'd255;
    end else begin
        z_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | ((icmp_ln887_1_fu_6477_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2819_p2 == 1'd0)))) begin
        z_buffer_V_we0 = 1'b1;
    end else begin
        z_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2819_p2 == 1'd0)))) begin
        z_buffer_V_we1 = 1'b1;
    end else begin
        z_buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (icmp_ln879_fu_2813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_2813_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_2819_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln449_fu_6423_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln449_fu_6423_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state134 : begin
            if (((1'b1 == ap_CS_fsm_state134) & (1'b1 == Output_1_V_V_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln469_fu_6505_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln469_fu_6505_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_6537_p2 = (t_V_3_reg_6567 + 16'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln449_reg_6854 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln449_reg_6854 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln469_reg_6893 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln469_reg_6893 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln469_reg_6893 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_empty_n) | (ap_start == 1'b0));
end

assign ap_block_state131_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state132_pp1_stage1_iter0 = ((1'b0 == Input_1_V_V_empty_n) & (icmp_ln449_reg_6854 == 1'd0));
end

assign ap_block_state133_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state136_pp2_stage0_iter1 = ((1'b0 == Output_1_V_V_full_n) & (icmp_ln469_reg_6893 == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_9_fu_6415_p1 = tmp_V_reg_6562[15:0];

assign fragment_x_V_1_fu_6434_p1 = Input_1_V_V_dout[7:0];

assign i_V_fu_2825_p2 = (t_V_reg_2773 + 9'd1);

assign icmp_ln449_fu_6423_p2 = ((ap_phi_mux_t_V_2_phi_fu_2788_p4 == empty_9_reg_6849) ? 1'b1 : 1'b0);

assign icmp_ln469_fu_6505_p2 = ((i_op_assign_reg_2795 == t_V_1_fu_632) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_6542_p2 = ((add_ln700_fu_6537_p2 == 16'd3192) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_2813_p2 = ((counter_V_1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_6477_p2 = ((fragment_z_V_1_reg_6873 < z_buffer_V_q1) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_2819_p2 = ((t_V_reg_2773 == 9'd256) ? 1'b1 : 1'b0);

assign j_fu_6511_p2 = (i_op_assign_reg_2795 + 16'd1);

assign n_V_fu_6428_p2 = (ap_phi_mux_t_V_2_phi_fu_2788_p4 + 16'd1);

assign or_ln321_100_fu_4245_p2 = (tmp_3_reg_6584 | 17'd101);

assign or_ln321_101_fu_4259_p2 = (tmp_3_reg_6584 | 17'd102);

assign or_ln321_102_fu_4273_p2 = (tmp_3_reg_6584 | 17'd103);

assign or_ln321_103_fu_4287_p2 = (tmp_3_reg_6584 | 17'd104);

assign or_ln321_104_fu_4301_p2 = (tmp_3_reg_6584 | 17'd105);

assign or_ln321_105_fu_4315_p2 = (tmp_3_reg_6584 | 17'd106);

assign or_ln321_106_fu_4329_p2 = (tmp_3_reg_6584 | 17'd107);

assign or_ln321_107_fu_4343_p2 = (tmp_3_reg_6584 | 17'd108);

assign or_ln321_108_fu_4357_p2 = (tmp_3_reg_6584 | 17'd109);

assign or_ln321_109_fu_4371_p2 = (tmp_3_reg_6584 | 17'd110);

assign or_ln321_10_fu_2985_p2 = (tmp_3_reg_6584 | 17'd11);

assign or_ln321_110_fu_4385_p2 = (tmp_3_reg_6584 | 17'd111);

assign or_ln321_111_fu_4399_p2 = (tmp_3_reg_6584 | 17'd112);

assign or_ln321_112_fu_4413_p2 = (tmp_3_reg_6584 | 17'd113);

assign or_ln321_113_fu_4427_p2 = (tmp_3_reg_6584 | 17'd114);

assign or_ln321_114_fu_4441_p2 = (tmp_3_reg_6584 | 17'd115);

assign or_ln321_115_fu_4455_p2 = (tmp_3_reg_6584 | 17'd116);

assign or_ln321_116_fu_4469_p2 = (tmp_3_reg_6584 | 17'd117);

assign or_ln321_117_fu_4483_p2 = (tmp_3_reg_6584 | 17'd118);

assign or_ln321_118_fu_4497_p2 = (tmp_3_reg_6584 | 17'd119);

assign or_ln321_119_fu_4511_p2 = (tmp_3_reg_6584 | 17'd120);

assign or_ln321_11_fu_2999_p2 = (tmp_3_reg_6584 | 17'd12);

assign or_ln321_120_fu_4525_p2 = (tmp_3_reg_6584 | 17'd121);

assign or_ln321_121_fu_4539_p2 = (tmp_3_reg_6584 | 17'd122);

assign or_ln321_122_fu_4553_p2 = (tmp_3_reg_6584 | 17'd123);

assign or_ln321_123_fu_4567_p2 = (tmp_3_reg_6584 | 17'd124);

assign or_ln321_124_fu_4581_p2 = (tmp_3_reg_6584 | 17'd125);

assign or_ln321_125_fu_4595_p2 = (tmp_3_reg_6584 | 17'd126);

assign or_ln321_126_fu_4609_p2 = (tmp_3_reg_6584 | 17'd127);

assign or_ln321_127_fu_4623_p2 = (tmp_3_reg_6584 | 17'd128);

assign or_ln321_128_fu_4637_p2 = (tmp_3_reg_6584 | 17'd129);

assign or_ln321_129_fu_4651_p2 = (tmp_3_reg_6584 | 17'd130);

assign or_ln321_12_fu_3013_p2 = (tmp_3_reg_6584 | 17'd13);

assign or_ln321_130_fu_4665_p2 = (tmp_3_reg_6584 | 17'd131);

assign or_ln321_131_fu_4679_p2 = (tmp_3_reg_6584 | 17'd132);

assign or_ln321_132_fu_4693_p2 = (tmp_3_reg_6584 | 17'd133);

assign or_ln321_133_fu_4707_p2 = (tmp_3_reg_6584 | 17'd134);

assign or_ln321_134_fu_4721_p2 = (tmp_3_reg_6584 | 17'd135);

assign or_ln321_135_fu_4735_p2 = (tmp_3_reg_6584 | 17'd136);

assign or_ln321_136_fu_4749_p2 = (tmp_3_reg_6584 | 17'd137);

assign or_ln321_137_fu_4763_p2 = (tmp_3_reg_6584 | 17'd138);

assign or_ln321_138_fu_4777_p2 = (tmp_3_reg_6584 | 17'd139);

assign or_ln321_139_fu_4791_p2 = (tmp_3_reg_6584 | 17'd140);

assign or_ln321_13_fu_3027_p2 = (tmp_3_reg_6584 | 17'd14);

assign or_ln321_140_fu_4805_p2 = (tmp_3_reg_6584 | 17'd141);

assign or_ln321_141_fu_4819_p2 = (tmp_3_reg_6584 | 17'd142);

assign or_ln321_142_fu_4833_p2 = (tmp_3_reg_6584 | 17'd143);

assign or_ln321_143_fu_4847_p2 = (tmp_3_reg_6584 | 17'd144);

assign or_ln321_144_fu_4861_p2 = (tmp_3_reg_6584 | 17'd145);

assign or_ln321_145_fu_4875_p2 = (tmp_3_reg_6584 | 17'd146);

assign or_ln321_146_fu_4889_p2 = (tmp_3_reg_6584 | 17'd147);

assign or_ln321_147_fu_4903_p2 = (tmp_3_reg_6584 | 17'd148);

assign or_ln321_148_fu_4917_p2 = (tmp_3_reg_6584 | 17'd149);

assign or_ln321_149_fu_4931_p2 = (tmp_3_reg_6584 | 17'd150);

assign or_ln321_14_fu_3041_p2 = (tmp_3_reg_6584 | 17'd15);

assign or_ln321_150_fu_4945_p2 = (tmp_3_reg_6584 | 17'd151);

assign or_ln321_151_fu_4959_p2 = (tmp_3_reg_6584 | 17'd152);

assign or_ln321_152_fu_4973_p2 = (tmp_3_reg_6584 | 17'd153);

assign or_ln321_153_fu_4987_p2 = (tmp_3_reg_6584 | 17'd154);

assign or_ln321_154_fu_5001_p2 = (tmp_3_reg_6584 | 17'd155);

assign or_ln321_155_fu_5015_p2 = (tmp_3_reg_6584 | 17'd156);

assign or_ln321_156_fu_5029_p2 = (tmp_3_reg_6584 | 17'd157);

assign or_ln321_157_fu_5043_p2 = (tmp_3_reg_6584 | 17'd158);

assign or_ln321_158_fu_5057_p2 = (tmp_3_reg_6584 | 17'd159);

assign or_ln321_159_fu_5071_p2 = (tmp_3_reg_6584 | 17'd160);

assign or_ln321_15_fu_3055_p2 = (tmp_3_reg_6584 | 17'd16);

assign or_ln321_160_fu_5085_p2 = (tmp_3_reg_6584 | 17'd161);

assign or_ln321_161_fu_5099_p2 = (tmp_3_reg_6584 | 17'd162);

assign or_ln321_162_fu_5113_p2 = (tmp_3_reg_6584 | 17'd163);

assign or_ln321_163_fu_5127_p2 = (tmp_3_reg_6584 | 17'd164);

assign or_ln321_164_fu_5141_p2 = (tmp_3_reg_6584 | 17'd165);

assign or_ln321_165_fu_5155_p2 = (tmp_3_reg_6584 | 17'd166);

assign or_ln321_166_fu_5169_p2 = (tmp_3_reg_6584 | 17'd167);

assign or_ln321_167_fu_5183_p2 = (tmp_3_reg_6584 | 17'd168);

assign or_ln321_168_fu_5197_p2 = (tmp_3_reg_6584 | 17'd169);

assign or_ln321_169_fu_5211_p2 = (tmp_3_reg_6584 | 17'd170);

assign or_ln321_16_fu_3069_p2 = (tmp_3_reg_6584 | 17'd17);

assign or_ln321_170_fu_5225_p2 = (tmp_3_reg_6584 | 17'd171);

assign or_ln321_171_fu_5239_p2 = (tmp_3_reg_6584 | 17'd172);

assign or_ln321_172_fu_5253_p2 = (tmp_3_reg_6584 | 17'd173);

assign or_ln321_173_fu_5267_p2 = (tmp_3_reg_6584 | 17'd174);

assign or_ln321_174_fu_5281_p2 = (tmp_3_reg_6584 | 17'd175);

assign or_ln321_175_fu_5295_p2 = (tmp_3_reg_6584 | 17'd176);

assign or_ln321_176_fu_5309_p2 = (tmp_3_reg_6584 | 17'd177);

assign or_ln321_177_fu_5323_p2 = (tmp_3_reg_6584 | 17'd178);

assign or_ln321_178_fu_5337_p2 = (tmp_3_reg_6584 | 17'd179);

assign or_ln321_179_fu_5351_p2 = (tmp_3_reg_6584 | 17'd180);

assign or_ln321_17_fu_3083_p2 = (tmp_3_reg_6584 | 17'd18);

assign or_ln321_180_fu_5365_p2 = (tmp_3_reg_6584 | 17'd181);

assign or_ln321_181_fu_5379_p2 = (tmp_3_reg_6584 | 17'd182);

assign or_ln321_182_fu_5393_p2 = (tmp_3_reg_6584 | 17'd183);

assign or_ln321_183_fu_5407_p2 = (tmp_3_reg_6584 | 17'd184);

assign or_ln321_184_fu_5421_p2 = (tmp_3_reg_6584 | 17'd185);

assign or_ln321_185_fu_5435_p2 = (tmp_3_reg_6584 | 17'd186);

assign or_ln321_186_fu_5449_p2 = (tmp_3_reg_6584 | 17'd187);

assign or_ln321_187_fu_5463_p2 = (tmp_3_reg_6584 | 17'd188);

assign or_ln321_188_fu_5477_p2 = (tmp_3_reg_6584 | 17'd189);

assign or_ln321_189_fu_5491_p2 = (tmp_3_reg_6584 | 17'd190);

assign or_ln321_18_fu_3097_p2 = (tmp_3_reg_6584 | 17'd19);

assign or_ln321_190_fu_5505_p2 = (tmp_3_reg_6584 | 17'd191);

assign or_ln321_191_fu_5519_p2 = (tmp_3_reg_6584 | 17'd192);

assign or_ln321_192_fu_5533_p2 = (tmp_3_reg_6584 | 17'd193);

assign or_ln321_193_fu_5547_p2 = (tmp_3_reg_6584 | 17'd194);

assign or_ln321_194_fu_5561_p2 = (tmp_3_reg_6584 | 17'd195);

assign or_ln321_195_fu_5575_p2 = (tmp_3_reg_6584 | 17'd196);

assign or_ln321_196_fu_5589_p2 = (tmp_3_reg_6584 | 17'd197);

assign or_ln321_197_fu_5603_p2 = (tmp_3_reg_6584 | 17'd198);

assign or_ln321_198_fu_5617_p2 = (tmp_3_reg_6584 | 17'd199);

assign or_ln321_199_fu_5631_p2 = (tmp_3_reg_6584 | 17'd200);

assign or_ln321_19_fu_3111_p2 = (tmp_3_reg_6584 | 17'd20);

assign or_ln321_1_fu_2859_p2 = (tmp_3_reg_6584 | 17'd2);

assign or_ln321_200_fu_5645_p2 = (tmp_3_reg_6584 | 17'd201);

assign or_ln321_201_fu_5659_p2 = (tmp_3_reg_6584 | 17'd202);

assign or_ln321_202_fu_5673_p2 = (tmp_3_reg_6584 | 17'd203);

assign or_ln321_203_fu_5687_p2 = (tmp_3_reg_6584 | 17'd204);

assign or_ln321_204_fu_5701_p2 = (tmp_3_reg_6584 | 17'd205);

assign or_ln321_205_fu_5715_p2 = (tmp_3_reg_6584 | 17'd206);

assign or_ln321_206_fu_5729_p2 = (tmp_3_reg_6584 | 17'd207);

assign or_ln321_207_fu_5743_p2 = (tmp_3_reg_6584 | 17'd208);

assign or_ln321_208_fu_5757_p2 = (tmp_3_reg_6584 | 17'd209);

assign or_ln321_209_fu_5771_p2 = (tmp_3_reg_6584 | 17'd210);

assign or_ln321_20_fu_3125_p2 = (tmp_3_reg_6584 | 17'd21);

assign or_ln321_210_fu_5785_p2 = (tmp_3_reg_6584 | 17'd211);

assign or_ln321_211_fu_5799_p2 = (tmp_3_reg_6584 | 17'd212);

assign or_ln321_212_fu_5813_p2 = (tmp_3_reg_6584 | 17'd213);

assign or_ln321_213_fu_5827_p2 = (tmp_3_reg_6584 | 17'd214);

assign or_ln321_214_fu_5841_p2 = (tmp_3_reg_6584 | 17'd215);

assign or_ln321_215_fu_5855_p2 = (tmp_3_reg_6584 | 17'd216);

assign or_ln321_216_fu_5869_p2 = (tmp_3_reg_6584 | 17'd217);

assign or_ln321_217_fu_5883_p2 = (tmp_3_reg_6584 | 17'd218);

assign or_ln321_218_fu_5897_p2 = (tmp_3_reg_6584 | 17'd219);

assign or_ln321_219_fu_5911_p2 = (tmp_3_reg_6584 | 17'd220);

assign or_ln321_21_fu_3139_p2 = (tmp_3_reg_6584 | 17'd22);

assign or_ln321_220_fu_5925_p2 = (tmp_3_reg_6584 | 17'd221);

assign or_ln321_221_fu_5939_p2 = (tmp_3_reg_6584 | 17'd222);

assign or_ln321_222_fu_5953_p2 = (tmp_3_reg_6584 | 17'd223);

assign or_ln321_223_fu_5967_p2 = (tmp_3_reg_6584 | 17'd224);

assign or_ln321_224_fu_5981_p2 = (tmp_3_reg_6584 | 17'd225);

assign or_ln321_225_fu_5995_p2 = (tmp_3_reg_6584 | 17'd226);

assign or_ln321_226_fu_6009_p2 = (tmp_3_reg_6584 | 17'd227);

assign or_ln321_227_fu_6023_p2 = (tmp_3_reg_6584 | 17'd228);

assign or_ln321_228_fu_6037_p2 = (tmp_3_reg_6584 | 17'd229);

assign or_ln321_229_fu_6051_p2 = (tmp_3_reg_6584 | 17'd230);

assign or_ln321_22_fu_3153_p2 = (tmp_3_reg_6584 | 17'd23);

assign or_ln321_230_fu_6065_p2 = (tmp_3_reg_6584 | 17'd231);

assign or_ln321_231_fu_6079_p2 = (tmp_3_reg_6584 | 17'd232);

assign or_ln321_232_fu_6093_p2 = (tmp_3_reg_6584 | 17'd233);

assign or_ln321_233_fu_6107_p2 = (tmp_3_reg_6584 | 17'd234);

assign or_ln321_234_fu_6121_p2 = (tmp_3_reg_6584 | 17'd235);

assign or_ln321_235_fu_6135_p2 = (tmp_3_reg_6584 | 17'd236);

assign or_ln321_236_fu_6149_p2 = (tmp_3_reg_6584 | 17'd237);

assign or_ln321_237_fu_6163_p2 = (tmp_3_reg_6584 | 17'd238);

assign or_ln321_238_fu_6177_p2 = (tmp_3_reg_6584 | 17'd239);

assign or_ln321_239_fu_6191_p2 = (tmp_3_reg_6584 | 17'd240);

assign or_ln321_23_fu_3167_p2 = (tmp_3_reg_6584 | 17'd24);

assign or_ln321_240_fu_6205_p2 = (tmp_3_reg_6584 | 17'd241);

assign or_ln321_241_fu_6219_p2 = (tmp_3_reg_6584 | 17'd242);

assign or_ln321_242_fu_6233_p2 = (tmp_3_reg_6584 | 17'd243);

assign or_ln321_243_fu_6247_p2 = (tmp_3_reg_6584 | 17'd244);

assign or_ln321_244_fu_6261_p2 = (tmp_3_reg_6584 | 17'd245);

assign or_ln321_245_fu_6275_p2 = (tmp_3_reg_6584 | 17'd246);

assign or_ln321_246_fu_6289_p2 = (tmp_3_reg_6584 | 17'd247);

assign or_ln321_247_fu_6303_p2 = (tmp_3_reg_6584 | 17'd248);

assign or_ln321_248_fu_6317_p2 = (tmp_3_reg_6584 | 17'd249);

assign or_ln321_249_fu_6331_p2 = (tmp_3_reg_6584 | 17'd250);

assign or_ln321_24_fu_3181_p2 = (tmp_3_reg_6584 | 17'd25);

assign or_ln321_250_fu_6345_p2 = (tmp_3_reg_6584 | 17'd251);

assign or_ln321_251_fu_6359_p2 = (tmp_3_reg_6584 | 17'd252);

assign or_ln321_252_fu_6373_p2 = (tmp_3_reg_6584 | 17'd253);

assign or_ln321_253_fu_6387_p2 = (tmp_3_reg_6584 | 17'd254);

assign or_ln321_254_fu_6401_p2 = (tmp_3_reg_6584 | 17'd255);

assign or_ln321_25_fu_3195_p2 = (tmp_3_reg_6584 | 17'd26);

assign or_ln321_26_fu_3209_p2 = (tmp_3_reg_6584 | 17'd27);

assign or_ln321_27_fu_3223_p2 = (tmp_3_reg_6584 | 17'd28);

assign or_ln321_28_fu_3237_p2 = (tmp_3_reg_6584 | 17'd29);

assign or_ln321_29_fu_3251_p2 = (tmp_3_reg_6584 | 17'd30);

assign or_ln321_2_fu_2873_p2 = (tmp_3_reg_6584 | 17'd3);

assign or_ln321_30_fu_3265_p2 = (tmp_3_reg_6584 | 17'd31);

assign or_ln321_31_fu_3279_p2 = (tmp_3_reg_6584 | 17'd32);

assign or_ln321_32_fu_3293_p2 = (tmp_3_reg_6584 | 17'd33);

assign or_ln321_33_fu_3307_p2 = (tmp_3_reg_6584 | 17'd34);

assign or_ln321_34_fu_3321_p2 = (tmp_3_reg_6584 | 17'd35);

assign or_ln321_35_fu_3335_p2 = (tmp_3_reg_6584 | 17'd36);

assign or_ln321_36_fu_3349_p2 = (tmp_3_reg_6584 | 17'd37);

assign or_ln321_37_fu_3363_p2 = (tmp_3_reg_6584 | 17'd38);

assign or_ln321_38_fu_3377_p2 = (tmp_3_reg_6584 | 17'd39);

assign or_ln321_39_fu_3391_p2 = (tmp_3_reg_6584 | 17'd40);

assign or_ln321_3_fu_2887_p2 = (tmp_3_reg_6584 | 17'd4);

assign or_ln321_40_fu_3405_p2 = (tmp_3_reg_6584 | 17'd41);

assign or_ln321_41_fu_3419_p2 = (tmp_3_reg_6584 | 17'd42);

assign or_ln321_42_fu_3433_p2 = (tmp_3_reg_6584 | 17'd43);

assign or_ln321_43_fu_3447_p2 = (tmp_3_reg_6584 | 17'd44);

assign or_ln321_44_fu_3461_p2 = (tmp_3_reg_6584 | 17'd45);

assign or_ln321_45_fu_3475_p2 = (tmp_3_reg_6584 | 17'd46);

assign or_ln321_46_fu_3489_p2 = (tmp_3_reg_6584 | 17'd47);

assign or_ln321_47_fu_3503_p2 = (tmp_3_reg_6584 | 17'd48);

assign or_ln321_48_fu_3517_p2 = (tmp_3_reg_6584 | 17'd49);

assign or_ln321_49_fu_3531_p2 = (tmp_3_reg_6584 | 17'd50);

assign or_ln321_4_fu_2901_p2 = (tmp_3_reg_6584 | 17'd5);

assign or_ln321_50_fu_3545_p2 = (tmp_3_reg_6584 | 17'd51);

assign or_ln321_51_fu_3559_p2 = (tmp_3_reg_6584 | 17'd52);

assign or_ln321_52_fu_3573_p2 = (tmp_3_reg_6584 | 17'd53);

assign or_ln321_53_fu_3587_p2 = (tmp_3_reg_6584 | 17'd54);

assign or_ln321_54_fu_3601_p2 = (tmp_3_reg_6584 | 17'd55);

assign or_ln321_55_fu_3615_p2 = (tmp_3_reg_6584 | 17'd56);

assign or_ln321_56_fu_3629_p2 = (tmp_3_reg_6584 | 17'd57);

assign or_ln321_57_fu_3643_p2 = (tmp_3_reg_6584 | 17'd58);

assign or_ln321_58_fu_3657_p2 = (tmp_3_reg_6584 | 17'd59);

assign or_ln321_59_fu_3671_p2 = (tmp_3_reg_6584 | 17'd60);

assign or_ln321_5_fu_2915_p2 = (tmp_3_reg_6584 | 17'd6);

assign or_ln321_60_fu_3685_p2 = (tmp_3_reg_6584 | 17'd61);

assign or_ln321_61_fu_3699_p2 = (tmp_3_reg_6584 | 17'd62);

assign or_ln321_62_fu_3713_p2 = (tmp_3_reg_6584 | 17'd63);

assign or_ln321_63_fu_3727_p2 = (tmp_3_reg_6584 | 17'd64);

assign or_ln321_64_fu_3741_p2 = (tmp_3_reg_6584 | 17'd65);

assign or_ln321_65_fu_3755_p2 = (tmp_3_reg_6584 | 17'd66);

assign or_ln321_66_fu_3769_p2 = (tmp_3_reg_6584 | 17'd67);

assign or_ln321_67_fu_3783_p2 = (tmp_3_reg_6584 | 17'd68);

assign or_ln321_68_fu_3797_p2 = (tmp_3_reg_6584 | 17'd69);

assign or_ln321_69_fu_3811_p2 = (tmp_3_reg_6584 | 17'd70);

assign or_ln321_6_fu_2929_p2 = (tmp_3_reg_6584 | 17'd7);

assign or_ln321_70_fu_3825_p2 = (tmp_3_reg_6584 | 17'd71);

assign or_ln321_71_fu_3839_p2 = (tmp_3_reg_6584 | 17'd72);

assign or_ln321_72_fu_3853_p2 = (tmp_3_reg_6584 | 17'd73);

assign or_ln321_73_fu_3867_p2 = (tmp_3_reg_6584 | 17'd74);

assign or_ln321_74_fu_3881_p2 = (tmp_3_reg_6584 | 17'd75);

assign or_ln321_75_fu_3895_p2 = (tmp_3_reg_6584 | 17'd76);

assign or_ln321_76_fu_3909_p2 = (tmp_3_reg_6584 | 17'd77);

assign or_ln321_77_fu_3923_p2 = (tmp_3_reg_6584 | 17'd78);

assign or_ln321_78_fu_3937_p2 = (tmp_3_reg_6584 | 17'd79);

assign or_ln321_79_fu_3951_p2 = (tmp_3_reg_6584 | 17'd80);

assign or_ln321_7_fu_2943_p2 = (tmp_3_reg_6584 | 17'd8);

assign or_ln321_80_fu_3965_p2 = (tmp_3_reg_6584 | 17'd81);

assign or_ln321_81_fu_3979_p2 = (tmp_3_reg_6584 | 17'd82);

assign or_ln321_82_fu_3993_p2 = (tmp_3_reg_6584 | 17'd83);

assign or_ln321_83_fu_4007_p2 = (tmp_3_reg_6584 | 17'd84);

assign or_ln321_84_fu_4021_p2 = (tmp_3_reg_6584 | 17'd85);

assign or_ln321_85_fu_4035_p2 = (tmp_3_reg_6584 | 17'd86);

assign or_ln321_86_fu_4049_p2 = (tmp_3_reg_6584 | 17'd87);

assign or_ln321_87_fu_4063_p2 = (tmp_3_reg_6584 | 17'd88);

assign or_ln321_88_fu_4077_p2 = (tmp_3_reg_6584 | 17'd89);

assign or_ln321_89_fu_4091_p2 = (tmp_3_reg_6584 | 17'd90);

assign or_ln321_8_fu_2957_p2 = (tmp_3_reg_6584 | 17'd9);

assign or_ln321_90_fu_4105_p2 = (tmp_3_reg_6584 | 17'd91);

assign or_ln321_91_fu_4119_p2 = (tmp_3_reg_6584 | 17'd92);

assign or_ln321_92_fu_4133_p2 = (tmp_3_reg_6584 | 17'd93);

assign or_ln321_93_fu_4147_p2 = (tmp_3_reg_6584 | 17'd94);

assign or_ln321_94_fu_4161_p2 = (tmp_3_reg_6584 | 17'd95);

assign or_ln321_95_fu_4175_p2 = (tmp_3_reg_6584 | 17'd96);

assign or_ln321_96_fu_4189_p2 = (tmp_3_reg_6584 | 17'd97);

assign or_ln321_97_fu_4203_p2 = (tmp_3_reg_6584 | 17'd98);

assign or_ln321_98_fu_4217_p2 = (tmp_3_reg_6584 | 17'd99);

assign or_ln321_99_fu_4231_p2 = (tmp_3_reg_6584 | 17'd100);

assign or_ln321_9_fu_2971_p2 = (tmp_3_reg_6584 | 17'd10);

assign or_ln321_fu_2844_p2 = (tmp_3_fu_2831_p3 | 17'd1);

assign p_Result_s_fu_6524_p5 = {{{{{{8'd0}, {pixels_color_V_q0}}}, {pixels_y_V_q0}}}, {pixels_x_V_q0}};

assign pixel_cntr_V_fu_6489_p2 = (t_V_1_fu_632 + 16'd1);

assign select_ln480_fu_6548_p3 = ((icmp_ln879_1_fu_6542_p2[0:0] === 1'b1) ? 16'd0 : add_ln700_fu_6537_p2);

assign tmp_100_fu_4208_p3 = {{47'd0}, {or_ln321_97_fu_4203_p2}};

assign tmp_101_fu_4222_p3 = {{47'd0}, {or_ln321_98_fu_4217_p2}};

assign tmp_102_fu_4236_p3 = {{47'd0}, {or_ln321_99_fu_4231_p2}};

assign tmp_103_fu_4250_p3 = {{47'd0}, {or_ln321_100_fu_4245_p2}};

assign tmp_104_fu_4264_p3 = {{47'd0}, {or_ln321_101_fu_4259_p2}};

assign tmp_105_fu_4278_p3 = {{47'd0}, {or_ln321_102_fu_4273_p2}};

assign tmp_106_fu_4292_p3 = {{47'd0}, {or_ln321_103_fu_4287_p2}};

assign tmp_107_fu_4306_p3 = {{47'd0}, {or_ln321_104_fu_4301_p2}};

assign tmp_108_fu_4320_p3 = {{47'd0}, {or_ln321_105_fu_4315_p2}};

assign tmp_109_fu_4334_p3 = {{47'd0}, {or_ln321_106_fu_4329_p2}};

assign tmp_10_fu_2948_p3 = {{47'd0}, {or_ln321_7_fu_2943_p2}};

assign tmp_110_fu_4348_p3 = {{47'd0}, {or_ln321_107_fu_4343_p2}};

assign tmp_111_fu_4362_p3 = {{47'd0}, {or_ln321_108_fu_4357_p2}};

assign tmp_112_fu_4376_p3 = {{47'd0}, {or_ln321_109_fu_4371_p2}};

assign tmp_113_fu_4390_p3 = {{47'd0}, {or_ln321_110_fu_4385_p2}};

assign tmp_114_fu_4404_p3 = {{47'd0}, {or_ln321_111_fu_4399_p2}};

assign tmp_115_fu_4418_p3 = {{47'd0}, {or_ln321_112_fu_4413_p2}};

assign tmp_116_fu_4432_p3 = {{47'd0}, {or_ln321_113_fu_4427_p2}};

assign tmp_117_fu_4446_p3 = {{47'd0}, {or_ln321_114_fu_4441_p2}};

assign tmp_118_fu_4460_p3 = {{47'd0}, {or_ln321_115_fu_4455_p2}};

assign tmp_119_fu_4474_p3 = {{47'd0}, {or_ln321_116_fu_4469_p2}};

assign tmp_11_fu_2962_p3 = {{47'd0}, {or_ln321_8_fu_2957_p2}};

assign tmp_120_fu_4488_p3 = {{47'd0}, {or_ln321_117_fu_4483_p2}};

assign tmp_121_fu_4502_p3 = {{47'd0}, {or_ln321_118_fu_4497_p2}};

assign tmp_122_fu_4516_p3 = {{47'd0}, {or_ln321_119_fu_4511_p2}};

assign tmp_123_fu_4530_p3 = {{47'd0}, {or_ln321_120_fu_4525_p2}};

assign tmp_124_fu_4544_p3 = {{47'd0}, {or_ln321_121_fu_4539_p2}};

assign tmp_125_fu_4558_p3 = {{47'd0}, {or_ln321_122_fu_4553_p2}};

assign tmp_126_fu_4572_p3 = {{47'd0}, {or_ln321_123_fu_4567_p2}};

assign tmp_127_fu_4586_p3 = {{47'd0}, {or_ln321_124_fu_4581_p2}};

assign tmp_128_fu_4600_p3 = {{47'd0}, {or_ln321_125_fu_4595_p2}};

assign tmp_129_fu_4614_p3 = {{47'd0}, {or_ln321_126_fu_4609_p2}};

assign tmp_12_fu_2976_p3 = {{47'd0}, {or_ln321_9_fu_2971_p2}};

assign tmp_130_fu_4628_p3 = {{47'd0}, {or_ln321_127_fu_4623_p2}};

assign tmp_131_fu_4642_p3 = {{47'd0}, {or_ln321_128_fu_4637_p2}};

assign tmp_132_fu_4656_p3 = {{47'd0}, {or_ln321_129_fu_4651_p2}};

assign tmp_133_fu_4670_p3 = {{47'd0}, {or_ln321_130_fu_4665_p2}};

assign tmp_134_fu_4684_p3 = {{47'd0}, {or_ln321_131_fu_4679_p2}};

assign tmp_135_fu_4698_p3 = {{47'd0}, {or_ln321_132_fu_4693_p2}};

assign tmp_136_fu_4712_p3 = {{47'd0}, {or_ln321_133_fu_4707_p2}};

assign tmp_137_fu_4726_p3 = {{47'd0}, {or_ln321_134_fu_4721_p2}};

assign tmp_138_fu_4740_p3 = {{47'd0}, {or_ln321_135_fu_4735_p2}};

assign tmp_139_fu_4754_p3 = {{47'd0}, {or_ln321_136_fu_4749_p2}};

assign tmp_13_fu_2990_p3 = {{47'd0}, {or_ln321_10_fu_2985_p2}};

assign tmp_140_fu_4768_p3 = {{47'd0}, {or_ln321_137_fu_4763_p2}};

assign tmp_141_fu_4782_p3 = {{47'd0}, {or_ln321_138_fu_4777_p2}};

assign tmp_142_fu_4796_p3 = {{47'd0}, {or_ln321_139_fu_4791_p2}};

assign tmp_143_fu_4810_p3 = {{47'd0}, {or_ln321_140_fu_4805_p2}};

assign tmp_144_fu_4824_p3 = {{47'd0}, {or_ln321_141_fu_4819_p2}};

assign tmp_145_fu_4838_p3 = {{47'd0}, {or_ln321_142_fu_4833_p2}};

assign tmp_146_fu_4852_p3 = {{47'd0}, {or_ln321_143_fu_4847_p2}};

assign tmp_147_fu_4866_p3 = {{47'd0}, {or_ln321_144_fu_4861_p2}};

assign tmp_148_fu_4880_p3 = {{47'd0}, {or_ln321_145_fu_4875_p2}};

assign tmp_149_fu_4894_p3 = {{47'd0}, {or_ln321_146_fu_4889_p2}};

assign tmp_14_fu_3004_p3 = {{47'd0}, {or_ln321_11_fu_2999_p2}};

assign tmp_150_fu_4908_p3 = {{47'd0}, {or_ln321_147_fu_4903_p2}};

assign tmp_151_fu_4922_p3 = {{47'd0}, {or_ln321_148_fu_4917_p2}};

assign tmp_152_fu_4936_p3 = {{47'd0}, {or_ln321_149_fu_4931_p2}};

assign tmp_153_fu_4950_p3 = {{47'd0}, {or_ln321_150_fu_4945_p2}};

assign tmp_154_fu_4964_p3 = {{47'd0}, {or_ln321_151_fu_4959_p2}};

assign tmp_155_fu_4978_p3 = {{47'd0}, {or_ln321_152_fu_4973_p2}};

assign tmp_156_fu_4992_p3 = {{47'd0}, {or_ln321_153_fu_4987_p2}};

assign tmp_157_fu_5006_p3 = {{47'd0}, {or_ln321_154_fu_5001_p2}};

assign tmp_158_fu_5020_p3 = {{47'd0}, {or_ln321_155_fu_5015_p2}};

assign tmp_159_fu_5034_p3 = {{47'd0}, {or_ln321_156_fu_5029_p2}};

assign tmp_15_fu_3018_p3 = {{47'd0}, {or_ln321_12_fu_3013_p2}};

assign tmp_160_fu_5048_p3 = {{47'd0}, {or_ln321_157_fu_5043_p2}};

assign tmp_161_fu_5062_p3 = {{47'd0}, {or_ln321_158_fu_5057_p2}};

assign tmp_162_fu_5076_p3 = {{47'd0}, {or_ln321_159_fu_5071_p2}};

assign tmp_163_fu_5090_p3 = {{47'd0}, {or_ln321_160_fu_5085_p2}};

assign tmp_164_fu_5104_p3 = {{47'd0}, {or_ln321_161_fu_5099_p2}};

assign tmp_165_fu_5118_p3 = {{47'd0}, {or_ln321_162_fu_5113_p2}};

assign tmp_166_fu_5132_p3 = {{47'd0}, {or_ln321_163_fu_5127_p2}};

assign tmp_167_fu_5146_p3 = {{47'd0}, {or_ln321_164_fu_5141_p2}};

assign tmp_168_fu_5160_p3 = {{47'd0}, {or_ln321_165_fu_5155_p2}};

assign tmp_169_fu_5174_p3 = {{47'd0}, {or_ln321_166_fu_5169_p2}};

assign tmp_16_fu_3032_p3 = {{47'd0}, {or_ln321_13_fu_3027_p2}};

assign tmp_170_fu_5188_p3 = {{47'd0}, {or_ln321_167_fu_5183_p2}};

assign tmp_171_fu_5202_p3 = {{47'd0}, {or_ln321_168_fu_5197_p2}};

assign tmp_172_fu_5216_p3 = {{47'd0}, {or_ln321_169_fu_5211_p2}};

assign tmp_173_fu_5230_p3 = {{47'd0}, {or_ln321_170_fu_5225_p2}};

assign tmp_174_fu_5244_p3 = {{47'd0}, {or_ln321_171_fu_5239_p2}};

assign tmp_175_fu_5258_p3 = {{47'd0}, {or_ln321_172_fu_5253_p2}};

assign tmp_176_fu_5272_p3 = {{47'd0}, {or_ln321_173_fu_5267_p2}};

assign tmp_177_fu_5286_p3 = {{47'd0}, {or_ln321_174_fu_5281_p2}};

assign tmp_178_fu_5300_p3 = {{47'd0}, {or_ln321_175_fu_5295_p2}};

assign tmp_179_fu_5314_p3 = {{47'd0}, {or_ln321_176_fu_5309_p2}};

assign tmp_17_fu_3046_p3 = {{47'd0}, {or_ln321_14_fu_3041_p2}};

assign tmp_180_fu_5328_p3 = {{47'd0}, {or_ln321_177_fu_5323_p2}};

assign tmp_181_fu_5342_p3 = {{47'd0}, {or_ln321_178_fu_5337_p2}};

assign tmp_182_fu_5356_p3 = {{47'd0}, {or_ln321_179_fu_5351_p2}};

assign tmp_183_fu_5370_p3 = {{47'd0}, {or_ln321_180_fu_5365_p2}};

assign tmp_184_fu_5384_p3 = {{47'd0}, {or_ln321_181_fu_5379_p2}};

assign tmp_185_fu_5398_p3 = {{47'd0}, {or_ln321_182_fu_5393_p2}};

assign tmp_186_fu_5412_p3 = {{47'd0}, {or_ln321_183_fu_5407_p2}};

assign tmp_187_fu_5426_p3 = {{47'd0}, {or_ln321_184_fu_5421_p2}};

assign tmp_188_fu_5440_p3 = {{47'd0}, {or_ln321_185_fu_5435_p2}};

assign tmp_189_fu_5454_p3 = {{47'd0}, {or_ln321_186_fu_5449_p2}};

assign tmp_18_fu_3060_p3 = {{47'd0}, {or_ln321_15_fu_3055_p2}};

assign tmp_190_fu_5468_p3 = {{47'd0}, {or_ln321_187_fu_5463_p2}};

assign tmp_191_fu_5482_p3 = {{47'd0}, {or_ln321_188_fu_5477_p2}};

assign tmp_192_fu_5496_p3 = {{47'd0}, {or_ln321_189_fu_5491_p2}};

assign tmp_193_fu_5510_p3 = {{47'd0}, {or_ln321_190_fu_5505_p2}};

assign tmp_194_fu_5524_p3 = {{47'd0}, {or_ln321_191_fu_5519_p2}};

assign tmp_195_fu_5538_p3 = {{47'd0}, {or_ln321_192_fu_5533_p2}};

assign tmp_196_fu_5552_p3 = {{47'd0}, {or_ln321_193_fu_5547_p2}};

assign tmp_197_fu_5566_p3 = {{47'd0}, {or_ln321_194_fu_5561_p2}};

assign tmp_198_fu_5580_p3 = {{47'd0}, {or_ln321_195_fu_5575_p2}};

assign tmp_199_fu_5594_p3 = {{47'd0}, {or_ln321_196_fu_5589_p2}};

assign tmp_19_fu_3074_p3 = {{47'd0}, {or_ln321_16_fu_3069_p2}};

assign tmp_200_fu_5608_p3 = {{47'd0}, {or_ln321_197_fu_5603_p2}};

assign tmp_201_fu_5622_p3 = {{47'd0}, {or_ln321_198_fu_5617_p2}};

assign tmp_202_fu_5636_p3 = {{47'd0}, {or_ln321_199_fu_5631_p2}};

assign tmp_203_fu_5650_p3 = {{47'd0}, {or_ln321_200_fu_5645_p2}};

assign tmp_204_fu_5664_p3 = {{47'd0}, {or_ln321_201_fu_5659_p2}};

assign tmp_205_fu_5678_p3 = {{47'd0}, {or_ln321_202_fu_5673_p2}};

assign tmp_206_fu_5692_p3 = {{47'd0}, {or_ln321_203_fu_5687_p2}};

assign tmp_207_fu_5706_p3 = {{47'd0}, {or_ln321_204_fu_5701_p2}};

assign tmp_208_fu_5720_p3 = {{47'd0}, {or_ln321_205_fu_5715_p2}};

assign tmp_209_fu_5734_p3 = {{47'd0}, {or_ln321_206_fu_5729_p2}};

assign tmp_20_fu_3088_p3 = {{47'd0}, {or_ln321_17_fu_3083_p2}};

assign tmp_210_fu_5748_p3 = {{47'd0}, {or_ln321_207_fu_5743_p2}};

assign tmp_211_fu_5762_p3 = {{47'd0}, {or_ln321_208_fu_5757_p2}};

assign tmp_212_fu_5776_p3 = {{47'd0}, {or_ln321_209_fu_5771_p2}};

assign tmp_213_fu_5790_p3 = {{47'd0}, {or_ln321_210_fu_5785_p2}};

assign tmp_214_fu_5804_p3 = {{47'd0}, {or_ln321_211_fu_5799_p2}};

assign tmp_215_fu_5818_p3 = {{47'd0}, {or_ln321_212_fu_5813_p2}};

assign tmp_216_fu_5832_p3 = {{47'd0}, {or_ln321_213_fu_5827_p2}};

assign tmp_217_fu_5846_p3 = {{47'd0}, {or_ln321_214_fu_5841_p2}};

assign tmp_218_fu_5860_p3 = {{47'd0}, {or_ln321_215_fu_5855_p2}};

assign tmp_219_fu_5874_p3 = {{47'd0}, {or_ln321_216_fu_5869_p2}};

assign tmp_21_fu_3102_p3 = {{47'd0}, {or_ln321_18_fu_3097_p2}};

assign tmp_220_fu_5888_p3 = {{47'd0}, {or_ln321_217_fu_5883_p2}};

assign tmp_221_fu_5902_p3 = {{47'd0}, {or_ln321_218_fu_5897_p2}};

assign tmp_222_fu_5916_p3 = {{47'd0}, {or_ln321_219_fu_5911_p2}};

assign tmp_223_fu_5930_p3 = {{47'd0}, {or_ln321_220_fu_5925_p2}};

assign tmp_224_fu_5944_p3 = {{47'd0}, {or_ln321_221_fu_5939_p2}};

assign tmp_225_fu_5958_p3 = {{47'd0}, {or_ln321_222_fu_5953_p2}};

assign tmp_226_fu_5972_p3 = {{47'd0}, {or_ln321_223_fu_5967_p2}};

assign tmp_227_fu_5986_p3 = {{47'd0}, {or_ln321_224_fu_5981_p2}};

assign tmp_228_fu_6000_p3 = {{47'd0}, {or_ln321_225_fu_5995_p2}};

assign tmp_229_fu_6014_p3 = {{47'd0}, {or_ln321_226_fu_6009_p2}};

assign tmp_22_fu_3116_p3 = {{47'd0}, {or_ln321_19_fu_3111_p2}};

assign tmp_230_fu_6028_p3 = {{47'd0}, {or_ln321_227_fu_6023_p2}};

assign tmp_231_fu_6042_p3 = {{47'd0}, {or_ln321_228_fu_6037_p2}};

assign tmp_232_fu_6056_p3 = {{47'd0}, {or_ln321_229_fu_6051_p2}};

assign tmp_233_fu_6070_p3 = {{47'd0}, {or_ln321_230_fu_6065_p2}};

assign tmp_234_fu_6084_p3 = {{47'd0}, {or_ln321_231_fu_6079_p2}};

assign tmp_235_fu_6098_p3 = {{47'd0}, {or_ln321_232_fu_6093_p2}};

assign tmp_236_fu_6112_p3 = {{47'd0}, {or_ln321_233_fu_6107_p2}};

assign tmp_237_fu_6126_p3 = {{47'd0}, {or_ln321_234_fu_6121_p2}};

assign tmp_238_fu_6140_p3 = {{47'd0}, {or_ln321_235_fu_6135_p2}};

assign tmp_239_fu_6154_p3 = {{47'd0}, {or_ln321_236_fu_6149_p2}};

assign tmp_23_fu_3130_p3 = {{47'd0}, {or_ln321_20_fu_3125_p2}};

assign tmp_240_fu_6168_p3 = {{47'd0}, {or_ln321_237_fu_6163_p2}};

assign tmp_241_fu_6182_p3 = {{47'd0}, {or_ln321_238_fu_6177_p2}};

assign tmp_242_fu_6196_p3 = {{47'd0}, {or_ln321_239_fu_6191_p2}};

assign tmp_243_fu_6210_p3 = {{47'd0}, {or_ln321_240_fu_6205_p2}};

assign tmp_244_fu_6224_p3 = {{47'd0}, {or_ln321_241_fu_6219_p2}};

assign tmp_245_fu_6238_p3 = {{47'd0}, {or_ln321_242_fu_6233_p2}};

assign tmp_246_fu_6252_p3 = {{47'd0}, {or_ln321_243_fu_6247_p2}};

assign tmp_247_fu_6266_p3 = {{47'd0}, {or_ln321_244_fu_6261_p2}};

assign tmp_248_fu_6280_p3 = {{47'd0}, {or_ln321_245_fu_6275_p2}};

assign tmp_249_fu_6294_p3 = {{47'd0}, {or_ln321_246_fu_6289_p2}};

assign tmp_24_fu_3144_p3 = {{47'd0}, {or_ln321_21_fu_3139_p2}};

assign tmp_250_fu_6308_p3 = {{47'd0}, {or_ln321_247_fu_6303_p2}};

assign tmp_251_fu_6322_p3 = {{47'd0}, {or_ln321_248_fu_6317_p2}};

assign tmp_252_fu_6336_p3 = {{47'd0}, {or_ln321_249_fu_6331_p2}};

assign tmp_253_fu_6350_p3 = {{47'd0}, {or_ln321_250_fu_6345_p2}};

assign tmp_254_fu_6364_p3 = {{47'd0}, {or_ln321_251_fu_6359_p2}};

assign tmp_255_fu_6378_p3 = {{47'd0}, {or_ln321_252_fu_6373_p2}};

assign tmp_256_fu_6392_p3 = {{47'd0}, {or_ln321_253_fu_6387_p2}};

assign tmp_257_fu_6406_p3 = {{47'd0}, {or_ln321_254_fu_6401_p2}};

assign tmp_25_fu_3158_p3 = {{47'd0}, {or_ln321_22_fu_3153_p2}};

assign tmp_26_fu_3172_p3 = {{47'd0}, {or_ln321_23_fu_3167_p2}};

assign tmp_27_fu_3186_p3 = {{47'd0}, {or_ln321_24_fu_3181_p2}};

assign tmp_28_fu_3200_p3 = {{47'd0}, {or_ln321_25_fu_3195_p2}};

assign tmp_29_fu_3214_p3 = {{47'd0}, {or_ln321_26_fu_3209_p2}};

assign tmp_30_fu_3228_p3 = {{47'd0}, {or_ln321_27_fu_3223_p2}};

assign tmp_31_fu_3242_p3 = {{47'd0}, {or_ln321_28_fu_3237_p2}};

assign tmp_32_fu_3256_p3 = {{47'd0}, {or_ln321_29_fu_3251_p2}};

assign tmp_33_fu_3270_p3 = {{47'd0}, {or_ln321_30_fu_3265_p2}};

assign tmp_34_fu_3284_p3 = {{47'd0}, {or_ln321_31_fu_3279_p2}};

assign tmp_35_fu_3298_p3 = {{47'd0}, {or_ln321_32_fu_3293_p2}};

assign tmp_36_fu_3312_p3 = {{47'd0}, {or_ln321_33_fu_3307_p2}};

assign tmp_37_fu_3326_p3 = {{47'd0}, {or_ln321_34_fu_3321_p2}};

assign tmp_38_fu_3340_p3 = {{47'd0}, {or_ln321_35_fu_3335_p2}};

assign tmp_39_fu_3354_p3 = {{47'd0}, {or_ln321_36_fu_3349_p2}};

assign tmp_3_fu_2831_p3 = {{t_V_reg_2773}, {8'd0}};

assign tmp_40_fu_3368_p3 = {{47'd0}, {or_ln321_37_fu_3363_p2}};

assign tmp_41_fu_3382_p3 = {{47'd0}, {or_ln321_38_fu_3377_p2}};

assign tmp_42_fu_3396_p3 = {{47'd0}, {or_ln321_39_fu_3391_p2}};

assign tmp_43_fu_3410_p3 = {{47'd0}, {or_ln321_40_fu_3405_p2}};

assign tmp_44_fu_3424_p3 = {{47'd0}, {or_ln321_41_fu_3419_p2}};

assign tmp_45_fu_3438_p3 = {{47'd0}, {or_ln321_42_fu_3433_p2}};

assign tmp_46_fu_3452_p3 = {{47'd0}, {or_ln321_43_fu_3447_p2}};

assign tmp_47_fu_3466_p3 = {{47'd0}, {or_ln321_44_fu_3461_p2}};

assign tmp_48_fu_3480_p3 = {{47'd0}, {or_ln321_45_fu_3475_p2}};

assign tmp_49_fu_3494_p3 = {{47'd0}, {or_ln321_46_fu_3489_p2}};

assign tmp_4_fu_2850_p3 = {{47'd0}, {or_ln321_fu_2844_p2}};

assign tmp_50_fu_3508_p3 = {{47'd0}, {or_ln321_47_fu_3503_p2}};

assign tmp_51_fu_3522_p3 = {{47'd0}, {or_ln321_48_fu_3517_p2}};

assign tmp_52_fu_3536_p3 = {{47'd0}, {or_ln321_49_fu_3531_p2}};

assign tmp_53_fu_3550_p3 = {{47'd0}, {or_ln321_50_fu_3545_p2}};

assign tmp_54_fu_3564_p3 = {{47'd0}, {or_ln321_51_fu_3559_p2}};

assign tmp_55_fu_3578_p3 = {{47'd0}, {or_ln321_52_fu_3573_p2}};

assign tmp_56_fu_3592_p3 = {{47'd0}, {or_ln321_53_fu_3587_p2}};

assign tmp_57_fu_3606_p3 = {{47'd0}, {or_ln321_54_fu_3601_p2}};

assign tmp_58_fu_3620_p3 = {{47'd0}, {or_ln321_55_fu_3615_p2}};

assign tmp_59_fu_3634_p3 = {{47'd0}, {or_ln321_56_fu_3629_p2}};

assign tmp_5_fu_2864_p3 = {{47'd0}, {or_ln321_1_fu_2859_p2}};

assign tmp_60_fu_3648_p3 = {{47'd0}, {or_ln321_57_fu_3643_p2}};

assign tmp_61_fu_3662_p3 = {{47'd0}, {or_ln321_58_fu_3657_p2}};

assign tmp_62_fu_3676_p3 = {{47'd0}, {or_ln321_59_fu_3671_p2}};

assign tmp_63_fu_3690_p3 = {{47'd0}, {or_ln321_60_fu_3685_p2}};

assign tmp_64_fu_3704_p3 = {{47'd0}, {or_ln321_61_fu_3699_p2}};

assign tmp_65_fu_3718_p3 = {{47'd0}, {or_ln321_62_fu_3713_p2}};

assign tmp_66_fu_3732_p3 = {{47'd0}, {or_ln321_63_fu_3727_p2}};

assign tmp_67_fu_3746_p3 = {{47'd0}, {or_ln321_64_fu_3741_p2}};

assign tmp_68_fu_3760_p3 = {{47'd0}, {or_ln321_65_fu_3755_p2}};

assign tmp_69_fu_3774_p3 = {{47'd0}, {or_ln321_66_fu_3769_p2}};

assign tmp_6_fu_2878_p3 = {{47'd0}, {or_ln321_2_fu_2873_p2}};

assign tmp_70_fu_3788_p3 = {{47'd0}, {or_ln321_67_fu_3783_p2}};

assign tmp_71_fu_3802_p3 = {{47'd0}, {or_ln321_68_fu_3797_p2}};

assign tmp_72_fu_3816_p3 = {{47'd0}, {or_ln321_69_fu_3811_p2}};

assign tmp_73_fu_3830_p3 = {{47'd0}, {or_ln321_70_fu_3825_p2}};

assign tmp_74_fu_3844_p3 = {{47'd0}, {or_ln321_71_fu_3839_p2}};

assign tmp_75_fu_3858_p3 = {{47'd0}, {or_ln321_72_fu_3853_p2}};

assign tmp_76_fu_3872_p3 = {{47'd0}, {or_ln321_73_fu_3867_p2}};

assign tmp_77_fu_3886_p3 = {{47'd0}, {or_ln321_74_fu_3881_p2}};

assign tmp_78_fu_3900_p3 = {{47'd0}, {or_ln321_75_fu_3895_p2}};

assign tmp_79_fu_3914_p3 = {{47'd0}, {or_ln321_76_fu_3909_p2}};

assign tmp_7_fu_2892_p3 = {{47'd0}, {or_ln321_3_fu_2887_p2}};

assign tmp_80_fu_3928_p3 = {{47'd0}, {or_ln321_77_fu_3923_p2}};

assign tmp_81_fu_3942_p3 = {{47'd0}, {or_ln321_78_fu_3937_p2}};

assign tmp_82_fu_3956_p3 = {{47'd0}, {or_ln321_79_fu_3951_p2}};

assign tmp_83_fu_3970_p3 = {{47'd0}, {or_ln321_80_fu_3965_p2}};

assign tmp_84_fu_3984_p3 = {{47'd0}, {or_ln321_81_fu_3979_p2}};

assign tmp_85_fu_3998_p3 = {{47'd0}, {or_ln321_82_fu_3993_p2}};

assign tmp_86_fu_4012_p3 = {{47'd0}, {or_ln321_83_fu_4007_p2}};

assign tmp_87_fu_4026_p3 = {{47'd0}, {or_ln321_84_fu_4021_p2}};

assign tmp_88_fu_4040_p3 = {{47'd0}, {or_ln321_85_fu_4035_p2}};

assign tmp_89_fu_4054_p3 = {{47'd0}, {or_ln321_86_fu_4049_p2}};

assign tmp_8_fu_2906_p3 = {{47'd0}, {or_ln321_4_fu_2901_p2}};

assign tmp_90_fu_4068_p3 = {{47'd0}, {or_ln321_87_fu_4063_p2}};

assign tmp_91_fu_4082_p3 = {{47'd0}, {or_ln321_88_fu_4077_p2}};

assign tmp_92_fu_4096_p3 = {{47'd0}, {or_ln321_89_fu_4091_p2}};

assign tmp_93_fu_4110_p3 = {{47'd0}, {or_ln321_90_fu_4105_p2}};

assign tmp_94_fu_4124_p3 = {{47'd0}, {or_ln321_91_fu_4119_p2}};

assign tmp_95_fu_4138_p3 = {{47'd0}, {or_ln321_92_fu_4133_p2}};

assign tmp_96_fu_4152_p3 = {{47'd0}, {or_ln321_93_fu_4147_p2}};

assign tmp_97_fu_4166_p3 = {{47'd0}, {or_ln321_94_fu_4161_p2}};

assign tmp_98_fu_4180_p3 = {{47'd0}, {or_ln321_95_fu_4175_p2}};

assign tmp_99_fu_4194_p3 = {{47'd0}, {or_ln321_96_fu_4189_p2}};

assign tmp_9_fu_2920_p3 = {{47'd0}, {or_ln321_5_fu_2915_p2}};

assign tmp_V_1_fu_6500_p1 = t_V_1_fu_632;

assign tmp_s_fu_2934_p3 = {{47'd0}, {or_ln321_6_fu_2929_p2}};

assign trunc_ln887_fu_6468_p1 = Input_1_V_V_dout[15:0];

assign zext_ln321_fu_2839_p1 = tmp_3_fu_2831_p3;

assign zext_ln471_fu_6517_p1 = i_op_assign_reg_2795;

assign zext_ln544_fu_6482_p1 = t_V_1_fu_632;

assign zext_ln887_fu_6472_p1 = trunc_ln887_fu_6468_p1;

always @ (posedge ap_clk) begin
    tmp_3_reg_6584[7:0] <= 8'b00000000;
end

endmodule //zculling_top
// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module zculling_top_z_buibs_ram (addr0, ce0, d0, we0, addr1, ce1, d1, we1, q1,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 16;
parameter MEM_SIZE = 65536;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("./zculling_top_z_buibs_ram.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[addr1] <= d1; 
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module zculling_top_z_buibs(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    address1,
    ce1,
    we1,
    d1,
    q1);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd65536;
parameter AddressWidth = 32'd16;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;
output[DataWidth - 1:0] q1;



zculling_top_z_buibs_ram zculling_top_z_buibs_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ),
    .q1( q1 ));

endmodule

