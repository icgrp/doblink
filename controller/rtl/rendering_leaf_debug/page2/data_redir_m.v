// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_redir_m_data_redir_m,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.406375,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=929,HLS_VERSION=2020_2}" *)

module data_redir_m (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] tmp_reg_111;
reg   [31:0] tmp_3_reg_116;
reg   [7:0] triangle_2ds_1_x0_V_reg_121;
reg   [7:0] triangle_2ds_1_y0_V_reg_126;
reg   [7:0] triangle_2ds_1_x1_V_reg_131;
reg   [7:0] triangle_2ds_1_y1_V_reg_136;
reg   [7:0] triangle_2ds_1_x2_V_reg_141;
reg   [7:0] triangle_2ds_1_y2_V_reg_146;
reg   [7:0] triangle_2ds_1_z_V_reg_151;
wire    grp_rasterization1_odd_m_fu_46_ap_start;
wire    grp_rasterization1_odd_m_fu_46_ap_done;
wire    grp_rasterization1_odd_m_fu_46_ap_idle;
wire    grp_rasterization1_odd_m_fu_46_ap_ready;
wire   [31:0] grp_rasterization1_odd_m_fu_46_Output_1_V_TDATA;
wire    grp_rasterization1_odd_m_fu_46_Output_1_V_TVALID;
wire    grp_rasterization1_odd_m_fu_46_Output_1_V_TREADY;
wire    call_ret_projection_odd_m_fu_71_ap_ready;
wire   [7:0] call_ret_projection_odd_m_fu_71_input_hi;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_0;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_1;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_2;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_3;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_4;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_5;
wire   [7:0] call_ret_projection_odd_m_fu_71_ap_return_6;
reg    grp_rasterization1_odd_m_fu_46_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_rasterization1_odd_m_fu_46_ap_start_reg = 1'b0;
end

data_redir_m_rasterization1_odd_m grp_rasterization1_odd_m_fu_46(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_rasterization1_odd_m_fu_46_ap_start),
    .ap_done(grp_rasterization1_odd_m_fu_46_ap_done),
    .ap_idle(grp_rasterization1_odd_m_fu_46_ap_idle),
    .ap_ready(grp_rasterization1_odd_m_fu_46_ap_ready),
    .Output_1_V_TDATA(grp_rasterization1_odd_m_fu_46_Output_1_V_TDATA),
    .Output_1_V_TVALID(grp_rasterization1_odd_m_fu_46_Output_1_V_TVALID),
    .Output_1_V_TREADY(grp_rasterization1_odd_m_fu_46_Output_1_V_TREADY),
    .triangle_2d_x0(triangle_2ds_1_x0_V_reg_121),
    .triangle_2d_y0(triangle_2ds_1_y0_V_reg_126),
    .triangle_2d_x1(triangle_2ds_1_x1_V_reg_131),
    .triangle_2d_y1(triangle_2ds_1_y1_V_reg_136),
    .triangle_2d_x2(triangle_2ds_1_x2_V_reg_141),
    .triangle_2d_y2(triangle_2ds_1_y2_V_reg_146),
    .triangle_2d_z(triangle_2ds_1_z_V_reg_151)
);

data_redir_m_projection_odd_m call_ret_projection_odd_m_fu_71(
    .ap_ready(call_ret_projection_odd_m_fu_71_ap_ready),
    .input_lo(tmp_reg_111),
    .input_mi(tmp_3_reg_116),
    .input_hi(call_ret_projection_odd_m_fu_71_input_hi),
    .ap_return_0(call_ret_projection_odd_m_fu_71_ap_return_0),
    .ap_return_1(call_ret_projection_odd_m_fu_71_ap_return_1),
    .ap_return_2(call_ret_projection_odd_m_fu_71_ap_return_2),
    .ap_return_3(call_ret_projection_odd_m_fu_71_ap_return_3),
    .ap_return_4(call_ret_projection_odd_m_fu_71_ap_return_4),
    .ap_return_5(call_ret_projection_odd_m_fu_71_ap_return_5),
    .ap_return_6(call_ret_projection_odd_m_fu_71_ap_return_6)
);

data_redir_m_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_redir_m_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_rasterization1_odd_m_fu_46_Output_1_V_TDATA),
    .vld_in(grp_rasterization1_odd_m_fu_46_Output_1_V_TVALID),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_rasterization1_odd_m_fu_46_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_rasterization1_odd_m_fu_46_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization1_odd_m_fu_46_ap_ready == 1'b1)) begin
            grp_rasterization1_odd_m_fu_46_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_116 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_111 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        triangle_2ds_1_x0_V_reg_121 <= call_ret_projection_odd_m_fu_71_ap_return_0;
        triangle_2ds_1_x1_V_reg_131 <= call_ret_projection_odd_m_fu_71_ap_return_2;
        triangle_2ds_1_x2_V_reg_141 <= call_ret_projection_odd_m_fu_71_ap_return_4;
        triangle_2ds_1_y0_V_reg_126 <= call_ret_projection_odd_m_fu_71_ap_return_1;
        triangle_2ds_1_y1_V_reg_136 <= call_ret_projection_odd_m_fu_71_ap_return_3;
        triangle_2ds_1_y2_V_reg_146 <= call_ret_projection_odd_m_fu_71_ap_return_5;
        triangle_2ds_1_z_V_reg_151 <= call_ret_projection_odd_m_fu_71_ap_return_6;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Input_1_V_TVALID_int_regslice)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_rasterization1_odd_m_fu_46_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign call_ret_projection_odd_m_fu_71_input_hi = Input_1_V_TDATA_int_regslice[7:0];

assign grp_rasterization1_odd_m_fu_46_Output_1_V_TREADY = (ap_CS_fsm_state5 & Output_1_V_TREADY_int_regslice);

assign grp_rasterization1_odd_m_fu_46_ap_start = grp_rasterization1_odd_m_fu_46_ap_start_reg;

endmodule //data_redir_m
