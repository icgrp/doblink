// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_m_rasterization2_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_pp0_stage0 = 9'd16;
parameter    ap_ST_fsm_state28 = 9'd32;
parameter    ap_ST_fsm_pp1_stage0 = 9'd64;
parameter    ap_ST_fsm_state31 = 9'd128;
parameter    ap_ST_fsm_state32 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_TREADY;
reg[31:0] Output_1_V_TDATA;
reg Output_1_V_TVALID;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] fragment_x_V_address0;
reg    fragment_x_V_ce0;
reg    fragment_x_V_we0;
wire   [7:0] fragment_x_V_q0;
reg   [8:0] fragment_y_V_address0;
reg    fragment_y_V_ce0;
reg    fragment_y_V_we0;
wire   [7:0] fragment_y_V_q0;
reg   [8:0] fragment_z_V_address0;
reg    fragment_z_V_ce0;
reg    fragment_z_V_we0;
wire   [7:0] fragment_z_V_q0;
reg   [8:0] fragment_color_V_address0;
reg    fragment_color_V_ce0;
reg    fragment_color_V_we0;
wire   [5:0] fragment_color_V_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    Output_1_V_TDATA_blk_n;
reg   [0:0] icmp_ln358_reg_603;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln878_1_reg_784;
reg   [15:0] k_V_reg_177;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
wire    ap_block_state21_pp0_stage0_iter16;
wire    ap_block_state22_pp0_stage0_iter17;
wire    ap_block_state23_pp0_stage0_iter18;
wire    ap_block_state24_pp0_stage0_iter19;
wire    ap_block_state25_pp0_stage0_iter20;
wire    ap_block_state26_pp0_stage0_iter21;
wire    ap_block_state27_pp0_stage0_iter22;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] j_reg_189;
reg   [7:0] triangle_2d_same_x0_V_reg_588;
wire   [7:0] grp_fu_210_p4;
reg   [7:0] triangle_2d_same_y0_V_reg_593;
reg   [7:0] triangle_2d_same_x1_V_reg_598;
wire   [0:0] icmp_ln358_fu_240_p2;
wire   [7:0] triangle_2d_same_y1_V_fu_246_p1;
reg   [7:0] triangle_2d_same_y1_V_reg_607;
reg   [7:0] triangle_2d_same_x2_V_reg_612;
reg   [7:0] triangle_2d_same_y2_V_reg_617;
reg   [7:0] triangle_2d_same_z_V_reg_622;
wire   [15:0] trunc_ln674_fu_250_p1;
reg   [15:0] trunc_ln674_reg_627;
reg   [7:0] max_min_V_reg_632;
wire   [7:0] max_min_V_1_fu_254_p1;
reg   [7:0] max_min_V_1_reg_637;
wire   [15:0] max_min_V_2_cast_fu_258_p1;
reg   [15:0] max_min_V_2_cast_reg_656;
wire   [8:0] triangle_2d_same_y1_V_cast_fu_262_p1;
reg   [8:0] triangle_2d_same_y1_V_cast_reg_662;
wire   [8:0] triangle_2d_same_y0_V_cast_fu_265_p1;
reg   [8:0] triangle_2d_same_y0_V_cast_reg_667;
wire  signed [17:0] rhs_fu_274_p1;
reg  signed [17:0] rhs_reg_672;
wire   [8:0] triangle_2d_same_x1_V_cast_fu_278_p1;
reg   [8:0] triangle_2d_same_x1_V_cast_reg_677;
wire   [8:0] triangle_2d_same_x0_V_cast_fu_281_p1;
reg   [8:0] triangle_2d_same_x0_V_cast_reg_682;
wire  signed [17:0] rhs_1_fu_290_p1;
reg  signed [17:0] rhs_1_reg_687;
wire   [8:0] triangle_2d_same_y2_V_cast_fu_294_p1;
reg   [8:0] triangle_2d_same_y2_V_cast_reg_692;
wire  signed [17:0] rhs_3_fu_303_p1;
reg  signed [17:0] rhs_3_reg_697;
wire   [8:0] triangle_2d_same_x2_V_cast_fu_307_p1;
reg   [8:0] triangle_2d_same_x2_V_cast_reg_702;
wire  signed [17:0] rhs_4_fu_316_p1;
reg  signed [17:0] rhs_4_reg_707;
wire  signed [17:0] rhs_6_fu_326_p1;
reg  signed [17:0] rhs_6_reg_712;
wire  signed [17:0] rhs_7_fu_336_p1;
reg  signed [17:0] rhs_7_reg_717;
wire   [15:0] k_V_1_fu_350_p2;
reg   [15:0] k_V_1_reg_722;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln366_fu_356_p2;
reg   [0:0] icmp_ln366_reg_727;
wire   [7:0] x_V_fu_375_p2;
reg   [7:0] x_V_reg_731;
reg   [7:0] x_V_reg_731_pp0_iter20_reg;
reg   [7:0] x_V_reg_731_pp0_iter21_reg;
wire   [7:0] y_V_fu_384_p2;
reg   [7:0] y_V_reg_737;
reg   [7:0] y_V_reg_737_pp0_iter20_reg;
reg   [7:0] y_V_reg_737_pp0_iter21_reg;
wire   [17:0] ret_23_fu_432_p2;
wire   [17:0] ret_29_fu_446_p2;
wire   [17:0] ret_35_fu_460_p2;
wire   [0:0] icmp_ln878_fu_517_p2;
wire   [15:0] add_ln384_fu_523_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state29_pp1_stage0_iter0;
reg    ap_block_state30_pp1_stage0_iter1;
reg    ap_block_state30_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln878_1_fu_529_p2;
reg    ap_block_state4;
reg    ap_block_state4_io;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state29;
reg   [15:0] ap_phi_mux_k_V_phi_fu_181_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln534_fu_482_p1;
wire   [0:0] tmp_4_fu_474_p3;
wire   [63:0] zext_ln878_fu_535_p1;
reg   [15:0] i_V_fu_70;
wire   [15:0] i_V_1_fu_490_p2;
reg   [15:0] i_top_V_fu_74;
wire   [15:0] i_top_V_1_fu_496_p2;
reg    ap_block_state1;
wire   [31:0] zext_ln208_fu_512_p1;
wire   [31:0] zext_ln414_fu_559_p1;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] flag_V_fu_236_p1;
wire   [8:0] ret_22_fu_268_p2;
wire   [8:0] ret_25_fu_284_p2;
wire   [8:0] ret_28_fu_297_p2;
wire   [8:0] ret_31_fu_310_p2;
wire   [8:0] ret_34_fu_320_p2;
wire   [8:0] ret_37_fu_330_p2;
wire   [7:0] grp_fu_361_p1;
wire   [7:0] grp_fu_366_p1;
wire   [7:0] grp_fu_361_p2;
wire   [7:0] ret_fu_371_p1;
wire   [7:0] grp_fu_366_p2;
wire   [7:0] trunc_ln208_fu_380_p1;
wire   [8:0] zext_ln1347_1_fu_389_p1;
wire  signed [8:0] ret_24_fu_393_p2;
wire  signed [8:0] ret_30_fu_402_p2;
wire  signed [8:0] ret_36_fu_411_p2;
wire   [8:0] zext_ln1347_fu_420_p1;
wire  signed [8:0] ret_21_fu_423_p2;
wire  signed [8:0] ret_23_fu_432_p1;
wire  signed [8:0] ret_27_fu_437_p2;
wire  signed [8:0] ret_29_fu_446_p1;
wire  signed [8:0] ret_33_fu_451_p2;
wire  signed [8:0] ret_35_fu_460_p1;
wire  signed [17:0] grp_fu_564_p3;
wire  signed [17:0] grp_fu_572_p3;
wire   [17:0] or_ln91_fu_465_p2;
wire  signed [17:0] grp_fu_580_p3;
wire   [17:0] or_ln91_1_fu_469_p2;
wire   [29:0] p_Result_s_fu_543_p5;
wire  signed [30:0] sext_ln414_fu_555_p1;
wire  signed [8:0] grp_fu_564_p1;
wire  signed [8:0] grp_fu_572_p1;
wire  signed [8:0] grp_fu_580_p1;
wire    ap_CS_fsm_state32;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
end

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_address0),
    .ce0(fragment_x_V_ce0),
    .we0(fragment_x_V_we0),
    .d0(x_V_reg_731_pp0_iter21_reg),
    .q0(fragment_x_V_q0)
);

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_address0),
    .ce0(fragment_y_V_ce0),
    .we0(fragment_y_V_we0),
    .d0(y_V_reg_737_pp0_iter21_reg),
    .q0(fragment_y_V_q0)
);

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_address0),
    .ce0(fragment_z_V_ce0),
    .we0(fragment_z_V_we0),
    .d0(triangle_2d_same_z_V_reg_622),
    .q0(fragment_z_V_q0)
);

rasterization2_m_rasterization2_odd_fragment_color_V #(
    .DataWidth( 6 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_address0),
    .ce0(fragment_color_V_ce0),
    .we0(fragment_color_V_we0),
    .d0(6'd36),
    .q0(fragment_color_V_q0)
);

rasterization2_m_urem_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
urem_16ns_8ns_8_20_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_k_V_phi_fu_181_p4),
    .din1(grp_fu_361_p1),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

rasterization2_m_udiv_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
udiv_16ns_8ns_8_20_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_k_V_phi_fu_181_p4),
    .din1(grp_fu_366_p1),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

rasterization2_m_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U3(
    .din0(ret_21_fu_423_p2),
    .din1(ret_23_fu_432_p1),
    .dout(ret_23_fu_432_p2)
);

rasterization2_m_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U4(
    .din0(ret_27_fu_437_p2),
    .din1(ret_29_fu_446_p1),
    .dout(ret_29_fu_446_p2)
);

rasterization2_m_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U5(
    .din0(ret_33_fu_451_p2),
    .din1(ret_35_fu_460_p1),
    .dout(ret_35_fu_460_p2)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_24_fu_393_p2),
    .din1(grp_fu_564_p1),
    .din2(ret_23_fu_432_p2),
    .ce(1'b1),
    .dout(grp_fu_564_p3)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_30_fu_402_p2),
    .din1(grp_fu_572_p1),
    .din2(ret_29_fu_446_p2),
    .ce(1'b1),
    .dout(grp_fu_572_p3)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_36_fu_411_p2),
    .din1(grp_fu_580_p1),
    .din2(ret_35_fu_460_p2),
    .ce(1'b1),
    .dout(grp_fu_580_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end else if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter22 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln878_fu_517_p2 == 1'd0) & (1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state29) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state29);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln878_fu_517_p2 == 1'd0) & (1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_V_fu_70 <= 16'd0;
    end else if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_V_fu_70 <= i_V_1_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_top_V_fu_74 <= 16'd0;
    end else if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_top_V_fu_74 <= i_top_V_1_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_517_p2 == 1'd0) & (1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
        j_reg_189 <= 16'd0;
    end else if (((icmp_ln878_1_fu_529_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_reg_189 <= add_ln384_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln366_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_reg_177 <= k_V_1_reg_722;
    end else if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_V_reg_177 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln358_reg_603 <= icmp_ln358_fu_240_p2;
        triangle_2d_same_x0_V_reg_588 <= {{Input_1_V_TDATA[15:8]}};
        triangle_2d_same_x1_V_reg_598 <= {{Input_1_V_TDATA[31:24]}};
        triangle_2d_same_y0_V_reg_593 <= {{Input_1_V_TDATA[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln366_reg_727 <= icmp_ln366_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln878_1_reg_784 <= icmp_ln878_1_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_1_reg_722 <= k_V_1_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_min_V_1_reg_637 <= max_min_V_1_fu_254_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        max_min_V_2_cast_reg_656[7 : 0] <= max_min_V_2_cast_fu_258_p1[7 : 0];
        rhs_1_reg_687 <= rhs_1_fu_290_p1;
        rhs_3_reg_697 <= rhs_3_fu_303_p1;
        rhs_4_reg_707 <= rhs_4_fu_316_p1;
        rhs_6_reg_712 <= rhs_6_fu_326_p1;
        rhs_7_reg_717 <= rhs_7_fu_336_p1;
        rhs_reg_672 <= rhs_fu_274_p1;
        triangle_2d_same_x0_V_cast_reg_682[7 : 0] <= triangle_2d_same_x0_V_cast_fu_281_p1[7 : 0];
        triangle_2d_same_x1_V_cast_reg_677[7 : 0] <= triangle_2d_same_x1_V_cast_fu_278_p1[7 : 0];
        triangle_2d_same_x2_V_cast_reg_702[7 : 0] <= triangle_2d_same_x2_V_cast_fu_307_p1[7 : 0];
        triangle_2d_same_y0_V_cast_reg_667[7 : 0] <= triangle_2d_same_y0_V_cast_fu_265_p1[7 : 0];
        triangle_2d_same_y1_V_cast_reg_662[7 : 0] <= triangle_2d_same_y1_V_cast_fu_262_p1[7 : 0];
        triangle_2d_same_y2_V_cast_reg_692[7 : 0] <= triangle_2d_same_y2_V_cast_fu_294_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        max_min_V_reg_632 <= {{Input_1_V_TDATA[23:16]}};
        trunc_ln674_reg_627 <= trunc_ln674_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        triangle_2d_same_x2_V_reg_612 <= {{Input_1_V_TDATA[15:8]}};
        triangle_2d_same_y1_V_reg_607 <= triangle_2d_same_y1_V_fu_246_p1;
        triangle_2d_same_y2_V_reg_617 <= {{Input_1_V_TDATA[23:16]}};
        triangle_2d_same_z_V_reg_622 <= {{Input_1_V_TDATA[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        x_V_reg_731 <= x_V_fu_375_p2;
        x_V_reg_731_pp0_iter20_reg <= x_V_reg_731;
        x_V_reg_731_pp0_iter21_reg <= x_V_reg_731_pp0_iter20_reg;
        y_V_reg_737 <= y_V_fu_384_p2;
        y_V_reg_737_pp0_iter20_reg <= y_V_reg_737;
        y_V_reg_737_pp0_iter21_reg <= y_V_reg_737_pp0_iter20_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Input_1_V_TVALID)) | (~((1'b0 == Input_1_V_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (1'b1 == ap_CS_fsm_state4)))) begin
        Input_1_V_TREADY = 1'b1;
    end else begin
        Input_1_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln878_1_reg_784 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        Output_1_V_TDATA = zext_ln414_fu_559_p1;
    end else if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
        Output_1_V_TDATA = zext_ln208_fu_512_p1;
    end else if ((~((1'b0 == Input_1_V_TVALID) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Output_1_V_TDATA = 32'd0;
    end else begin
        Output_1_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((icmp_ln358_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln878_1_reg_784 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln878_1_reg_784 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        Output_1_V_TVALID = 1'b1;
    end else begin
        Output_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln366_fu_356_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_1_fu_529_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln366_reg_727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_V_phi_fu_181_p4 = k_V_1_reg_722;
    end else begin
        ap_phi_mux_k_V_phi_fu_181_p4 = k_V_reg_177;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_color_V_address0 = zext_ln878_fu_535_p1;
    end else if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fragment_color_V_address0 = zext_ln534_fu_482_p1;
    end else begin
        fragment_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fragment_color_V_ce0 = 1'b1;
    end else begin
        fragment_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_color_V_we0 = 1'b1;
    end else begin
        fragment_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_x_V_address0 = zext_ln878_fu_535_p1;
    end else if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fragment_x_V_address0 = zext_ln534_fu_482_p1;
    end else begin
        fragment_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fragment_x_V_ce0 = 1'b1;
    end else begin
        fragment_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_x_V_we0 = 1'b1;
    end else begin
        fragment_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_y_V_address0 = zext_ln878_fu_535_p1;
    end else if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fragment_y_V_address0 = zext_ln534_fu_482_p1;
    end else begin
        fragment_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fragment_y_V_ce0 = 1'b1;
    end else begin
        fragment_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_y_V_we0 = 1'b1;
    end else begin
        fragment_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_z_V_address0 = zext_ln878_fu_535_p1;
    end else if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fragment_z_V_address0 = zext_ln534_fu_482_p1;
    end else begin
        fragment_z_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fragment_z_V_ce0 = 1'b1;
    end else begin
        fragment_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_474_p3 == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_z_V_we0 = 1'b1;
    end else begin
        fragment_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Input_1_V_TVALID))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b0 == Input_1_V_TVALID) | (1'b1 == ap_block_state4_io) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln358_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln366_fu_356_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter22 == 1'b1) & (ap_enable_reg_pp0_iter21 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (ap_enable_reg_pp0_iter21 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln366_fu_356_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln878_fu_517_p2 == 1'd0) & (1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln878_fu_517_p2 == 1'd1) & (1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln878_1_fu_529_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln878_1_fu_529_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln384_fu_523_p2 = (j_reg_189 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'b0 == Output_1_V_TREADY) & (icmp_ln878_1_reg_784 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((1'b0 == Output_1_V_TREADY) & (icmp_ln878_1_reg_784 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((1'b0 == Output_1_V_TREADY) & (icmp_ln878_1_reg_784 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_TVALID) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((1'b0 == Output_1_V_TREADY) & (icmp_ln878_1_reg_784 == 1'd0));
end

always @ (*) begin
    ap_block_state30_pp1_stage0_iter1 = ((1'b0 == Output_1_V_TREADY) & (icmp_ln878_1_reg_784 == 1'd0));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == Input_1_V_TVALID) | ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY)));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln358_reg_603 == 1'd0) & (1'b0 == Output_1_V_TREADY));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign flag_V_fu_236_p1 = Input_1_V_TDATA[1:0];

assign grp_fu_210_p4 = {{Input_1_V_TDATA[23:16]}};

assign grp_fu_361_p1 = max_min_V_2_cast_reg_656;

assign grp_fu_366_p1 = max_min_V_2_cast_reg_656;

assign grp_fu_564_p1 = rhs_1_reg_687;

assign grp_fu_572_p1 = rhs_4_reg_707;

assign grp_fu_580_p1 = rhs_7_reg_717;

assign i_V_1_fu_490_p2 = (i_V_fu_70 + 16'd1);

assign i_top_V_1_fu_496_p2 = (i_top_V_fu_74 + 16'd1);

assign icmp_ln358_fu_240_p2 = ((flag_V_fu_236_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln366_fu_356_p2 = ((ap_phi_mux_k_V_phi_fu_181_p4 == trunc_ln674_reg_627) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_529_p2 = ((j_reg_189 == i_V_fu_70) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_517_p2 = ((i_V_fu_70 == 16'd0) ? 1'b1 : 1'b0);

assign k_V_1_fu_350_p2 = (ap_phi_mux_k_V_phi_fu_181_p4 + 16'd1);

assign max_min_V_1_fu_254_p1 = Input_1_V_TDATA[7:0];

assign max_min_V_2_cast_fu_258_p1 = grp_fu_210_p4;

assign or_ln91_1_fu_469_p2 = (or_ln91_fu_465_p2 | grp_fu_580_p3);

assign or_ln91_fu_465_p2 = (grp_fu_572_p3 | grp_fu_564_p3);

assign p_Result_s_fu_543_p5 = {{{{fragment_color_V_q0}, {fragment_z_V_q0}}, {fragment_y_V_q0}}, {fragment_x_V_q0}};

assign ret_21_fu_423_p2 = (zext_ln1347_fu_420_p1 - triangle_2d_same_x0_V_cast_reg_682);

assign ret_22_fu_268_p2 = (triangle_2d_same_y1_V_cast_fu_262_p1 - triangle_2d_same_y0_V_cast_fu_265_p1);

assign ret_23_fu_432_p1 = rhs_reg_672;

assign ret_24_fu_393_p2 = (zext_ln1347_1_fu_389_p1 - triangle_2d_same_y0_V_cast_reg_667);

assign ret_25_fu_284_p2 = (triangle_2d_same_x1_V_cast_fu_278_p1 - triangle_2d_same_x0_V_cast_fu_281_p1);

assign ret_27_fu_437_p2 = (zext_ln1347_fu_420_p1 - triangle_2d_same_x1_V_cast_reg_677);

assign ret_28_fu_297_p2 = (triangle_2d_same_y2_V_cast_fu_294_p1 - triangle_2d_same_y1_V_cast_fu_262_p1);

assign ret_29_fu_446_p1 = rhs_3_reg_697;

assign ret_30_fu_402_p2 = (zext_ln1347_1_fu_389_p1 - triangle_2d_same_y1_V_cast_reg_662);

assign ret_31_fu_310_p2 = (triangle_2d_same_x2_V_cast_fu_307_p1 - triangle_2d_same_x1_V_cast_fu_278_p1);

assign ret_33_fu_451_p2 = (zext_ln1347_fu_420_p1 - triangle_2d_same_x2_V_cast_reg_702);

assign ret_34_fu_320_p2 = (triangle_2d_same_y0_V_cast_fu_265_p1 - triangle_2d_same_y2_V_cast_fu_294_p1);

assign ret_35_fu_460_p1 = rhs_6_reg_712;

assign ret_36_fu_411_p2 = (zext_ln1347_1_fu_389_p1 - triangle_2d_same_y2_V_cast_reg_692);

assign ret_37_fu_330_p2 = (triangle_2d_same_x0_V_cast_fu_281_p1 - triangle_2d_same_x2_V_cast_fu_307_p1);

assign ret_fu_371_p1 = grp_fu_361_p2[7:0];

assign rhs_1_fu_290_p1 = $signed(ret_25_fu_284_p2);

assign rhs_3_fu_303_p1 = $signed(ret_28_fu_297_p2);

assign rhs_4_fu_316_p1 = $signed(ret_31_fu_310_p2);

assign rhs_6_fu_326_p1 = $signed(ret_34_fu_320_p2);

assign rhs_7_fu_336_p1 = $signed(ret_37_fu_330_p2);

assign rhs_fu_274_p1 = $signed(ret_22_fu_268_p2);

assign sext_ln414_fu_555_p1 = $signed(p_Result_s_fu_543_p5);

assign tmp_4_fu_474_p3 = or_ln91_1_fu_469_p2[32'd17];

assign triangle_2d_same_x0_V_cast_fu_281_p1 = triangle_2d_same_x0_V_reg_588;

assign triangle_2d_same_x1_V_cast_fu_278_p1 = triangle_2d_same_x1_V_reg_598;

assign triangle_2d_same_x2_V_cast_fu_307_p1 = triangle_2d_same_x2_V_reg_612;

assign triangle_2d_same_y0_V_cast_fu_265_p1 = triangle_2d_same_y0_V_reg_593;

assign triangle_2d_same_y1_V_cast_fu_262_p1 = triangle_2d_same_y1_V_reg_607;

assign triangle_2d_same_y1_V_fu_246_p1 = Input_1_V_TDATA[7:0];

assign triangle_2d_same_y2_V_cast_fu_294_p1 = triangle_2d_same_y2_V_reg_617;

assign trunc_ln208_fu_380_p1 = grp_fu_366_p2[7:0];

assign trunc_ln674_fu_250_p1 = Input_1_V_TDATA[15:0];

assign x_V_fu_375_p2 = (ret_fu_371_p1 + max_min_V_reg_632);

assign y_V_fu_384_p2 = (trunc_ln208_fu_380_p1 + max_min_V_1_reg_637);

assign zext_ln1347_1_fu_389_p1 = y_V_fu_384_p2;

assign zext_ln1347_fu_420_p1 = x_V_reg_731_pp0_iter20_reg;

assign zext_ln208_fu_512_p1 = i_top_V_fu_74;

assign zext_ln414_fu_559_p1 = $unsigned(sext_ln414_fu_555_p1);

assign zext_ln534_fu_482_p1 = i_V_fu_70;

assign zext_ln878_fu_535_p1 = j_reg_189;

always @ (posedge ap_clk) begin
    max_min_V_2_cast_reg_656[15:8] <= 8'b00000000;
    triangle_2d_same_y1_V_cast_reg_662[8] <= 1'b0;
    triangle_2d_same_y0_V_cast_reg_667[8] <= 1'b0;
    triangle_2d_same_x1_V_cast_reg_677[8] <= 1'b0;
    triangle_2d_same_x0_V_cast_reg_682[8] <= 1'b0;
    triangle_2d_same_y2_V_cast_reg_692[8] <= 1'b0;
    triangle_2d_same_x2_V_cast_reg_702[8] <= 1'b0;
end

endmodule //rasterization2_m_rasterization2_odd
