// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="zculling_top_zculling_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.368625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=228,HLS_SYN_LUT=564,HLS_VERSION=2020_2}" *)

module zculling_top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_pp1_stage1 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state12 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] counter_V;
reg   [15:0] z_buffer_V_address0;
reg    z_buffer_V_ce0;
reg    z_buffer_V_we0;
reg   [7:0] z_buffer_V_d0;
wire   [7:0] z_buffer_V_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln449_reg_535;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln878_3_reg_578;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln878_3_reg_578_pp2_iter1_reg;
reg   [15:0] n_V_reg_233;
reg   [15:0] j_reg_244;
reg   [31:0] tmp_V_reg_488;
wire   [0:0] icmp_ln870_fu_262_p2;
wire   [16:0] add_ln878_fu_268_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] select_ln434_1_fu_300_p3;
wire   [0:0] icmp_ln878_fu_274_p2;
wire   [8:0] j_V_1_fu_335_p2;
wire   [15:0] empty_11_fu_341_p1;
reg   [15:0] empty_11_reg_525;
wire    ap_CS_fsm_state3;
wire   [15:0] n_V_1_fu_349_p2;
reg   [15:0] n_V_1_reg_530;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln449_fu_355_p2;
wire   [7:0] fragment_x_V_fu_360_p1;
reg   [7:0] fragment_x_V_reg_539;
reg    ap_block_state5_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [7:0] fragment_y_V_reg_544;
reg   [7:0] fragment_z_V_reg_549;
reg   [7:0] fragment_color_V_reg_555;
reg   [15:0] z_buffer_V_addr_1_reg_560;
wire   [31:0] zext_ln208_fu_426_p1;
wire   [15:0] add_ln469_fu_431_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state9_pp2_stage0_iter0;
reg    ap_block_state10_pp2_stage0_iter1;
reg    ap_block_state10_io;
reg    ap_block_state11_pp2_stage0_iter2;
reg    ap_block_state11_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln878_3_fu_437_p2;
wire   [31:0] p_Result_s_fu_450_p5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg   [8:0] pixels_x_V_address0;
reg    pixels_x_V_ce0;
reg    pixels_x_V_we0;
wire   [7:0] pixels_x_V_q0;
reg   [8:0] pixels_y_V_address0;
reg    pixels_y_V_ce0;
reg    pixels_y_V_we0;
wire   [7:0] pixels_y_V_q0;
reg   [8:0] pixels_color_V_address0;
reg    pixels_color_V_ce0;
reg    pixels_color_V_we0;
wire   [7:0] pixels_color_V_q0;
reg   [16:0] indvar_flatten_reg_200;
reg    ap_block_state1;
reg   [8:0] i_V_reg_211;
reg   [8:0] j_V_reg_222;
reg   [15:0] ap_phi_mux_n_V_phi_fu_237_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln439_1_fu_330_p1;
wire   [63:0] zext_ln878_1_fu_398_p1;
wire   [63:0] zext_ln534_fu_408_p1;
wire   [0:0] icmp_ln878_2_fu_403_p2;
wire   [63:0] zext_ln878_fu_443_p1;
wire   [15:0] select_ln480_fu_474_p3;
wire    ap_CS_fsm_state12;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg   [15:0] pixel_cntr_V_fu_104;
wire   [15:0] pixel_cntr_V_1_fu_415_p2;
reg    ap_block_pp2_stage0_01001;
wire   [0:0] icmp_ln878_1_fu_286_p2;
wire   [8:0] i_V_2_fu_280_p2;
wire   [7:0] trunc_ln439_fu_308_p1;
wire   [8:0] select_ln434_fu_292_p3;
wire   [15:0] tmp_1_cast_fu_312_p3;
wire   [15:0] zext_ln439_fu_320_p1;
wire   [15:0] add_ln439_fu_324_p2;
wire   [15:0] trunc_ln878_fu_394_p1;
wire   [15:0] add_ln691_fu_463_p2;
wire   [0:0] icmp_ln870_1_fu_468_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 counter_V = 16'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

zculling_top_z_buffer_V #(
    .DataWidth( 8 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
z_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(z_buffer_V_address0),
    .ce0(z_buffer_V_ce0),
    .we0(z_buffer_V_we0),
    .d0(z_buffer_V_d0),
    .q0(z_buffer_V_q0)
);

zculling_top_pixels_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixels_x_V_address0),
    .ce0(pixels_x_V_ce0),
    .we0(pixels_x_V_we0),
    .d0(fragment_x_V_reg_539),
    .q0(pixels_x_V_q0)
);

zculling_top_pixels_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixels_y_V_address0),
    .ce0(pixels_y_V_ce0),
    .we0(pixels_y_V_we0),
    .d0(fragment_y_V_reg_544),
    .q0(pixels_y_V_q0)
);

zculling_top_pixels_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
pixels_color_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixels_color_V_address0),
    .ce0(pixels_color_V_ce0),
    .we0(pixels_color_V_we0),
    .d0(fragment_color_V_reg_555),
    .q0(pixels_color_V_q0)
);

zculling_top_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

zculling_top_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state9))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state9)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln870_fu_262_p2 == 1'd1))) begin
        i_V_reg_211 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_274_p2 == 1'd0))) begin
        i_V_reg_211 <= select_ln434_1_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln870_fu_262_p2 == 1'd1))) begin
        indvar_flatten_reg_200 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_274_p2 == 1'd0))) begin
        indvar_flatten_reg_200 <= add_ln878_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln870_fu_262_p2 == 1'd1))) begin
        j_V_reg_222 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_274_p2 == 1'd0))) begin
        j_V_reg_222 <= j_V_1_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        j_reg_244 <= 16'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln878_3_fu_437_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        j_reg_244 <= add_ln469_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln449_reg_535 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        n_V_reg_233 <= n_V_1_reg_530;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        n_V_reg_233 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pixel_cntr_V_fu_104 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln878_2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixel_cntr_V_fu_104 <= pixel_cntr_V_1_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        counter_V <= select_ln480_fu_474_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_11_reg_525 <= empty_11_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln449_reg_535 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        fragment_color_V_reg_555 <= {{Input_1_V_TDATA_int_regslice[31:24]}};
        fragment_x_V_reg_539 <= fragment_x_V_fu_360_p1;
        fragment_y_V_reg_544 <= {{Input_1_V_TDATA_int_regslice[15:8]}};
        fragment_z_V_reg_549 <= {{Input_1_V_TDATA_int_regslice[23:16]}};
        z_buffer_V_addr_1_reg_560 <= zext_ln878_1_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln449_reg_535 <= icmp_ln449_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln878_3_reg_578 <= icmp_ln878_3_fu_437_p2;
        icmp_ln878_3_reg_578_pp2_iter1_reg <= icmp_ln878_3_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        n_V_1_reg_530 <= n_V_1_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_V_reg_488 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((((icmp_ln449_reg_535 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln449_reg_535 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0)) | ((icmp_ln878_3_reg_578 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln878_3_reg_578 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Output_1_V_TDATA_int_regslice = p_Result_s_fu_450_p5;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = zext_ln208_fu_426_p1;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln878_3_reg_578 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_1_V_TREADY_int_regslice)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln449_fu_355_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_3_fu_437_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln449_reg_535 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_n_V_phi_fu_237_p4 = n_V_1_reg_530;
    end else begin
        ap_phi_mux_n_V_phi_fu_237_p4 = n_V_reg_233;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        pixels_color_V_address0 = zext_ln878_fu_443_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_color_V_address0 = zext_ln534_fu_408_p1;
    end else begin
        pixels_color_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        pixels_color_V_ce0 = 1'b1;
    end else begin
        pixels_color_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln878_2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_color_V_we0 = 1'b1;
    end else begin
        pixels_color_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        pixels_x_V_address0 = zext_ln878_fu_443_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_x_V_address0 = zext_ln534_fu_408_p1;
    end else begin
        pixels_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        pixels_x_V_ce0 = 1'b1;
    end else begin
        pixels_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln878_2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_x_V_we0 = 1'b1;
    end else begin
        pixels_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        pixels_y_V_address0 = zext_ln878_fu_443_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_y_V_address0 = zext_ln534_fu_408_p1;
    end else begin
        pixels_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        pixels_y_V_ce0 = 1'b1;
    end else begin
        pixels_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln878_2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pixels_y_V_we0 = 1'b1;
    end else begin
        pixels_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        z_buffer_V_address0 = z_buffer_V_addr_1_reg_560;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        z_buffer_V_address0 = zext_ln878_1_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        z_buffer_V_address0 = zext_ln439_1_fu_330_p1;
    end else begin
        z_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        z_buffer_V_ce0 = 1'b1;
    end else begin
        z_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        z_buffer_V_d0 = fragment_z_V_reg_549;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        z_buffer_V_d0 = 8'd255;
    end else begin
        z_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln878_2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_274_p2 == 1'd0)))) begin
        z_buffer_V_we0 = 1'b1;
    end else begin
        z_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln870_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln870_fu_262_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln878_fu_274_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln449_fu_355_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln449_fu_355_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln878_3_fu_437_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln878_3_fu_437_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln439_fu_324_p2 = (tmp_1_cast_fu_312_p3 + zext_ln439_fu_320_p1);

assign add_ln469_fu_431_p2 = (j_reg_244 + 16'd1);

assign add_ln691_fu_463_p2 = (counter_V + 16'd1);

assign add_ln878_fu_268_p2 = (indvar_flatten_reg_200 + 17'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((icmp_ln449_reg_535 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((icmp_ln449_reg_535 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0)) | ((icmp_ln878_3_reg_578 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln878_3_reg_578 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln878_3_reg_578 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln878_3_reg_578 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter1 = ((icmp_ln878_3_reg_578 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state11_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter2 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln878_3_reg_578_pp2_iter1_reg == 1'd0));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp1_stage1_iter0 = ((icmp_ln449_reg_535 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_11_fu_341_p1 = tmp_V_reg_488[15:0];

assign fragment_x_V_fu_360_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign i_V_2_fu_280_p2 = (i_V_reg_211 + 9'd1);

assign icmp_ln449_fu_355_p2 = ((ap_phi_mux_n_V_phi_fu_237_p4 == empty_11_reg_525) ? 1'b1 : 1'b0);

assign icmp_ln870_1_fu_468_p2 = ((add_ln691_fu_463_p2 == 16'd3192) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_262_p2 = ((counter_V == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_286_p2 = ((j_V_reg_222 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_403_p2 = ((fragment_z_V_reg_549 < z_buffer_V_q0) ? 1'b1 : 1'b0);

assign icmp_ln878_3_fu_437_p2 = ((j_reg_244 == pixel_cntr_V_fu_104) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_274_p2 = ((indvar_flatten_reg_200 == 17'd65536) ? 1'b1 : 1'b0);

assign j_V_1_fu_335_p2 = (select_ln434_fu_292_p3 + 9'd1);

assign n_V_1_fu_349_p2 = (ap_phi_mux_n_V_phi_fu_237_p4 + 16'd1);

assign p_Result_s_fu_450_p5 = {{{{{{8'd0}, {pixels_color_V_q0}}}, {pixels_y_V_q0}}}, {pixels_x_V_q0}};

assign pixel_cntr_V_1_fu_415_p2 = (pixel_cntr_V_fu_104 + 16'd1);

assign select_ln434_1_fu_300_p3 = ((icmp_ln878_1_fu_286_p2[0:0] == 1'b1) ? i_V_2_fu_280_p2 : i_V_reg_211);

assign select_ln434_fu_292_p3 = ((icmp_ln878_1_fu_286_p2[0:0] == 1'b1) ? 9'd0 : j_V_reg_222);

assign select_ln480_fu_474_p3 = ((icmp_ln870_1_fu_468_p2[0:0] == 1'b1) ? 16'd0 : add_ln691_fu_463_p2);

assign tmp_1_cast_fu_312_p3 = {{trunc_ln439_fu_308_p1}, {8'd0}};

assign trunc_ln439_fu_308_p1 = select_ln434_1_fu_300_p3[7:0];

assign trunc_ln878_fu_394_p1 = Input_1_V_TDATA_int_regslice[15:0];

assign zext_ln208_fu_426_p1 = pixel_cntr_V_fu_104;

assign zext_ln439_1_fu_330_p1 = add_ln439_fu_324_p2;

assign zext_ln439_fu_320_p1 = select_ln434_fu_292_p3;

assign zext_ln534_fu_408_p1 = pixel_cntr_V_fu_104;

assign zext_ln878_1_fu_398_p1 = trunc_ln878_fu_394_p1;

assign zext_ln878_fu_443_p1 = j_reg_244;

endmodule //zculling_top
