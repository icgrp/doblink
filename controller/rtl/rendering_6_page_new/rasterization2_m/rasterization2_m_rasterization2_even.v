// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_m_rasterization2_even (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_3_V_TDATA,
        Output_3_V_TVALID,
        Output_3_V_TREADY,
        Output_4_V_TDATA,
        Output_4_V_TVALID,
        Output_4_V_TREADY
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 19'd16384;
parameter    ap_ST_fsm_state42 = 19'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 19'd65536;
parameter    ap_ST_fsm_state47 = 19'd131072;
parameter    ap_ST_fsm_state48 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_3_V_TDATA;
output   Output_3_V_TVALID;
input   Output_3_V_TREADY;
output  [31:0] Output_4_V_TDATA;
output   Output_4_V_TVALID;
input   Output_4_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_2_V_TREADY;
reg[31:0] Output_3_V_TDATA;
reg Output_3_V_TVALID;
reg[31:0] Output_4_V_TDATA;
reg Output_4_V_TVALID;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] fragment_x_V_1_address0;
reg    fragment_x_V_1_ce0;
wire   [7:0] fragment_x_V_1_q0;
wire   [8:0] fragment_x_V_1_address1;
reg    fragment_x_V_1_ce1;
reg    fragment_x_V_1_we1;
wire   [8:0] fragment_y_V_1_address0;
reg    fragment_y_V_1_ce0;
wire   [7:0] fragment_y_V_1_q0;
wire   [8:0] fragment_y_V_1_address1;
reg    fragment_y_V_1_ce1;
reg    fragment_y_V_1_we1;
wire   [8:0] fragment_z_V_1_address0;
reg    fragment_z_V_1_ce0;
wire   [7:0] fragment_z_V_1_q0;
wire   [8:0] fragment_z_V_1_address1;
reg    fragment_z_V_1_ce1;
reg    fragment_z_V_1_we1;
wire   [8:0] fragment_color_V_1_address0;
reg    fragment_color_V_1_ce0;
wire   [5:0] fragment_color_V_1_q0;
wire   [8:0] fragment_color_V_1_address1;
reg    fragment_color_V_1_ce1;
reg    fragment_color_V_1_we1;
reg    Input_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    Output_3_V_TDATA_blk_n;
reg   [0:0] icmp_ln138_reg_660;
wire    ap_CS_fsm_state42;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_reg_961;
reg    Output_4_V_TDATA_blk_n;
reg   [15:0] k_V_reg_205;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state15_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_state18_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_state20_pp0_stage0_iter5;
wire    ap_block_state21_pp0_stage0_iter6;
wire    ap_block_state22_pp0_stage0_iter7;
wire    ap_block_state23_pp0_stage0_iter8;
wire    ap_block_state24_pp0_stage0_iter9;
wire    ap_block_state25_pp0_stage0_iter10;
wire    ap_block_state26_pp0_stage0_iter11;
wire    ap_block_state27_pp0_stage0_iter12;
wire    ap_block_state28_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state30_pp0_stage0_iter15;
wire    ap_block_state31_pp0_stage0_iter16;
wire    ap_block_state32_pp0_stage0_iter17;
wire    ap_block_state33_pp0_stage0_iter18;
wire    ap_block_state34_pp0_stage0_iter19;
wire    ap_block_state35_pp0_stage0_iter20;
wire    ap_block_state36_pp0_stage0_iter21;
wire    ap_block_state37_pp0_stage0_iter22;
wire    ap_block_state38_pp0_stage0_iter23;
wire    ap_block_state39_pp0_stage0_iter24;
wire    ap_block_state40_pp0_stage0_iter25;
wire    ap_block_state41_pp0_stage0_iter26;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] j_reg_217;
wire   [0:0] icmp_ln138_fu_241_p2;
wire   [7:0] triangle_2d_same_x0_V_fu_247_p1;
reg   [7:0] triangle_2d_same_x0_V_reg_664;
wire   [7:0] triangle_2d_same_y0_V_fu_251_p1;
reg   [7:0] triangle_2d_same_y0_V_reg_669;
wire   [7:0] triangle_2d_same_x1_V_fu_255_p1;
reg   [7:0] triangle_2d_same_x1_V_reg_674;
wire   [7:0] triangle_2d_same_y1_V_fu_259_p1;
reg   [7:0] triangle_2d_same_y1_V_reg_679;
wire   [7:0] triangle_2d_same_x2_V_fu_263_p1;
reg   [7:0] triangle_2d_same_x2_V_reg_684;
wire   [7:0] triangle_2d_same_y2_V_fu_267_p1;
reg   [7:0] triangle_2d_same_y2_V_reg_689;
wire   [7:0] triangle_2d_same_z_V_fu_271_p1;
reg   [7:0] triangle_2d_same_z_V_reg_694;
reg   [31:0] tmp_V_19_reg_699;
wire   [7:0] max_min_V_fu_275_p1;
reg   [7:0] max_min_V_reg_704;
wire   [7:0] max_min_V_3_fu_279_p1;
reg   [7:0] max_min_V_3_reg_709;
wire   [15:0] max_min_V_4_cast_fu_287_p1;
reg   [15:0] max_min_V_4_cast_reg_735;
wire   [8:0] triangle_2d_same_y1_V_cast_fu_291_p1;
reg   [8:0] triangle_2d_same_y1_V_cast_reg_741;
wire   [8:0] triangle_2d_same_y0_V_cast_fu_294_p1;
reg   [8:0] triangle_2d_same_y0_V_cast_reg_746;
wire  signed [17:0] rhs_fu_303_p1;
reg  signed [17:0] rhs_reg_751;
wire   [8:0] triangle_2d_same_x1_V_cast_fu_307_p1;
reg   [8:0] triangle_2d_same_x1_V_cast_reg_756;
wire   [8:0] triangle_2d_same_x0_V_cast_fu_310_p1;
reg   [8:0] triangle_2d_same_x0_V_cast_reg_761;
wire  signed [17:0] rhs_9_fu_319_p1;
reg  signed [17:0] rhs_9_reg_766;
wire   [8:0] triangle_2d_same_y2_V_cast_fu_323_p1;
reg   [8:0] triangle_2d_same_y2_V_cast_reg_771;
wire  signed [17:0] rhs_11_fu_332_p1;
reg  signed [17:0] rhs_11_reg_776;
wire   [8:0] triangle_2d_same_x2_V_cast_fu_336_p1;
reg   [8:0] triangle_2d_same_x2_V_cast_reg_781;
wire  signed [17:0] rhs_12_fu_345_p1;
reg  signed [17:0] rhs_12_reg_786;
wire  signed [17:0] rhs_14_fu_355_p1;
reg  signed [17:0] rhs_14_reg_791;
wire  signed [17:0] rhs_15_fu_365_p1;
reg  signed [17:0] rhs_15_reg_796;
wire   [15:0] empty_fu_369_p1;
reg   [15:0] empty_reg_801;
wire   [15:0] k_V_2_fu_387_p2;
reg   [15:0] k_V_2_reg_806;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln147_fu_393_p2;
reg   [0:0] icmp_ln147_reg_811;
wire   [7:0] grp_fu_398_p2;
reg   [7:0] urem_ln1365_reg_815;
wire   [7:0] grp_fu_403_p2;
reg   [7:0] ret_39_reg_820;
wire   [7:0] x_V_fu_411_p2;
reg   [7:0] x_V_reg_825;
reg   [7:0] x_V_reg_825_pp0_iter21_reg;
reg   [7:0] x_V_reg_825_pp0_iter22_reg;
reg   [7:0] x_V_reg_825_pp0_iter23_reg;
reg   [7:0] x_V_reg_825_pp0_iter24_reg;
reg   [7:0] x_V_reg_825_pp0_iter25_reg;
wire   [7:0] y_V_fu_419_p2;
reg   [7:0] y_V_reg_831;
reg   [7:0] y_V_reg_831_pp0_iter21_reg;
reg   [7:0] y_V_reg_831_pp0_iter22_reg;
reg   [7:0] y_V_reg_831_pp0_iter23_reg;
reg   [7:0] y_V_reg_831_pp0_iter24_reg;
reg   [7:0] y_V_reg_831_pp0_iter25_reg;
wire   [8:0] ret_62_fu_444_p2;
reg  signed [8:0] ret_62_reg_843;
wire   [8:0] ret_68_fu_463_p2;
reg  signed [8:0] ret_68_reg_853;
wire   [8:0] ret_74_fu_482_p2;
reg  signed [8:0] ret_74_reg_863;
wire   [17:0] grp_fu_436_p2;
wire   [17:0] grp_fu_458_p2;
wire   [17:0] grp_fu_477_p2;
wire  signed [17:0] grp_fu_639_p3;
reg  signed [17:0] sub_ln16_reg_898;
reg    ap_enable_reg_pp0_iter25;
wire  signed [17:0] grp_fu_646_p3;
reg  signed [17:0] sub_ln16_2_reg_903;
wire  signed [17:0] grp_fu_653_p3;
reg  signed [17:0] ret_58_reg_908;
wire   [0:0] icmp_ln878_fu_587_p2;
wire   [15:0] add_ln167_fu_593_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state43_pp1_stage0_iter0;
wire    ap_block_state44_pp1_stage0_iter1;
wire    ap_block_state45_pp1_stage0_iter2;
reg    ap_block_state46_pp1_stage0_iter3;
reg    ap_block_state46_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln878_2_fu_599_p2;
wire   [63:0] zext_ln878_fu_605_p1;
reg   [63:0] zext_ln878_reg_929;
reg   [7:0] fragment_y_V_1_load_reg_956;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state14;
reg    ap_block_state14_io;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter26;
reg    ap_block_state42;
reg    ap_block_state42_io;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state43;
reg    ap_enable_reg_pp1_iter1;
reg   [15:0] ap_phi_mux_k_V_phi_fu_209_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln534_fu_513_p1;
wire   [0:0] tmp_3_fu_505_p3;
reg   [15:0] i_bot_V_fu_70;
wire   [15:0] select_ln160_fu_546_p3;
reg   [15:0] i_top_V_fu_74;
wire   [15:0] select_ln160_1_fu_554_p3;
reg   [15:0] i_V_fu_78;
wire   [15:0] i_V_2_fu_521_p2;
reg    ap_block_state1;
wire   [31:0] zext_ln208_fu_577_p1;
wire   [31:0] zext_ln414_fu_633_p1;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] zext_ln208_2_fu_582_p1;
wire   [1:0] flag_V_fu_237_p1;
wire   [7:0] max_min_V_4_fu_283_p1;
wire   [8:0] ret_60_fu_297_p2;
wire   [8:0] ret_63_fu_313_p2;
wire   [8:0] ret_66_fu_326_p2;
wire   [8:0] ret_69_fu_339_p2;
wire   [8:0] ret_72_fu_349_p2;
wire   [8:0] ret_75_fu_359_p2;
wire   [7:0] grp_fu_398_p1;
wire   [7:0] grp_fu_403_p1;
wire   [7:0] ret_fu_408_p1;
wire   [7:0] trunc_ln208_fu_416_p1;
wire   [8:0] zext_ln1347_fu_424_p1;
wire  signed [8:0] ret_59_fu_427_p2;
wire  signed [8:0] grp_fu_436_p1;
wire   [8:0] zext_ln1347_2_fu_441_p1;
wire  signed [8:0] ret_65_fu_449_p2;
wire  signed [8:0] grp_fu_458_p1;
wire  signed [8:0] ret_71_fu_468_p2;
wire  signed [8:0] grp_fu_477_p1;
wire   [17:0] or_ln16_fu_496_p2;
wire   [17:0] or_ln16_2_fu_500_p2;
wire   [0:0] tmp_4_fu_527_p3;
wire   [15:0] i_bot_V_2_fu_540_p2;
wire   [15:0] i_top_V_2_fu_534_p2;
wire   [29:0] p_Result_s_fu_618_p5;
wire  signed [30:0] sext_ln414_fu_629_p1;
wire  signed [8:0] grp_fu_639_p1;
wire  signed [8:0] grp_fu_646_p1;
wire  signed [8:0] grp_fu_653_p1;
wire    ap_CS_fsm_state48;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_1_address0),
    .ce0(fragment_x_V_1_ce0),
    .q0(fragment_x_V_1_q0),
    .address1(fragment_x_V_1_address1),
    .ce1(fragment_x_V_1_ce1),
    .we1(fragment_x_V_1_we1),
    .d1(x_V_reg_825_pp0_iter25_reg)
);

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_1_address0),
    .ce0(fragment_y_V_1_ce0),
    .q0(fragment_y_V_1_q0),
    .address1(fragment_y_V_1_address1),
    .ce1(fragment_y_V_1_ce1),
    .we1(fragment_y_V_1_we1),
    .d1(y_V_reg_831_pp0_iter25_reg)
);

rasterization2_m_rasterization2_odd_fragment_x_V #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_1_address0),
    .ce0(fragment_z_V_1_ce0),
    .q0(fragment_z_V_1_q0),
    .address1(fragment_z_V_1_address1),
    .ce1(fragment_z_V_1_ce1),
    .we1(fragment_z_V_1_we1),
    .d1(triangle_2d_same_z_V_reg_694)
);

rasterization2_m_rasterization2_odd_fragment_color_V #(
    .DataWidth( 6 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_1_address0),
    .ce0(fragment_color_V_1_ce0),
    .q0(fragment_color_V_1_q0),
    .address1(fragment_color_V_1_address1),
    .ce1(fragment_color_V_1_ce1),
    .we1(fragment_color_V_1_we1),
    .d1(6'd36)
);

rasterization2_m_urem_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
urem_16ns_8ns_8_20_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_k_V_phi_fu_209_p4),
    .din1(grp_fu_398_p1),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

rasterization2_m_udiv_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
udiv_16ns_8ns_8_20_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_k_V_phi_fu_209_p4),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

rasterization2_m_mul_9s_9s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_59_fu_427_p2),
    .din1(grp_fu_436_p1),
    .ce(1'b1),
    .dout(grp_fu_436_p2)
);

rasterization2_m_mul_9s_9s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_65_fu_449_p2),
    .din1(grp_fu_458_p1),
    .ce(1'b1),
    .dout(grp_fu_458_p2)
);

rasterization2_m_mul_9s_9s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_71_fu_468_p2),
    .din1(grp_fu_477_p1),
    .ce(1'b1),
    .dout(grp_fu_477_p2)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_62_reg_843),
    .din1(grp_fu_639_p1),
    .din2(grp_fu_436_p2),
    .ce(1'b1),
    .dout(grp_fu_639_p3)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_68_reg_853),
    .din1(grp_fu_646_p1),
    .din2(grp_fu_458_p2),
    .ce(1'b1),
    .dout(grp_fu_646_p3)
);

rasterization2_m_mac_mulsub_9s_9s_18ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_mulsub_9s_9s_18ns_18_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_74_reg_863),
    .din1(grp_fu_653_p1),
    .din2(grp_fu_477_p2),
    .ce(1'b1),
    .dout(grp_fu_653_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state43) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (icmp_ln878_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state43)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state43);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (icmp_ln878_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
        i_V_fu_78 <= 16'd0;
    end else if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_V_fu_78 <= i_V_2_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
        i_bot_V_fu_70 <= 16'd0;
    end else if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_bot_V_fu_70 <= select_ln160_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
        i_top_V_fu_74 <= 16'd0;
    end else if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_top_V_fu_74 <= select_ln160_1_fu_554_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (icmp_ln878_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        j_reg_217 <= 16'd0;
    end else if (((icmp_ln878_2_fu_599_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_reg_217 <= add_ln167_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln147_reg_811 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_reg_205 <= k_V_2_reg_806;
    end else if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
        k_V_reg_205 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
        empty_reg_801 <= empty_fu_369_p1;
        max_min_V_4_cast_reg_735[7 : 0] <= max_min_V_4_cast_fu_287_p1[7 : 0];
        rhs_11_reg_776 <= rhs_11_fu_332_p1;
        rhs_12_reg_786 <= rhs_12_fu_345_p1;
        rhs_14_reg_791 <= rhs_14_fu_355_p1;
        rhs_15_reg_796 <= rhs_15_fu_365_p1;
        rhs_9_reg_766 <= rhs_9_fu_319_p1;
        rhs_reg_751 <= rhs_fu_303_p1;
        triangle_2d_same_x0_V_cast_reg_761[7 : 0] <= triangle_2d_same_x0_V_cast_fu_310_p1[7 : 0];
        triangle_2d_same_x1_V_cast_reg_756[7 : 0] <= triangle_2d_same_x1_V_cast_fu_307_p1[7 : 0];
        triangle_2d_same_x2_V_cast_reg_781[7 : 0] <= triangle_2d_same_x2_V_cast_fu_336_p1[7 : 0];
        triangle_2d_same_y0_V_cast_reg_746[7 : 0] <= triangle_2d_same_y0_V_cast_fu_294_p1[7 : 0];
        triangle_2d_same_y1_V_cast_reg_741[7 : 0] <= triangle_2d_same_y1_V_cast_fu_291_p1[7 : 0];
        triangle_2d_same_y2_V_cast_reg_771[7 : 0] <= triangle_2d_same_y2_V_cast_fu_323_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        fragment_y_V_1_load_reg_956 <= fragment_y_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln138_reg_660 <= icmp_ln138_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln147_reg_811 <= icmp_ln147_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_V_2_reg_806 <= k_V_2_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        max_min_V_3_reg_709 <= max_min_V_3_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_min_V_reg_704 <= max_min_V_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ret_39_reg_820 <= grp_fu_403_p2;
        ret_62_reg_843 <= ret_62_fu_444_p2;
        ret_68_reg_853 <= ret_68_fu_463_p2;
        ret_74_reg_863 <= ret_74_fu_482_p2;
        urem_ln1365_reg_815 <= grp_fu_398_p2;
        x_V_reg_825 <= x_V_fu_411_p2;
        x_V_reg_825_pp0_iter21_reg <= x_V_reg_825;
        x_V_reg_825_pp0_iter22_reg <= x_V_reg_825_pp0_iter21_reg;
        x_V_reg_825_pp0_iter23_reg <= x_V_reg_825_pp0_iter22_reg;
        x_V_reg_825_pp0_iter24_reg <= x_V_reg_825_pp0_iter23_reg;
        x_V_reg_825_pp0_iter25_reg <= x_V_reg_825_pp0_iter24_reg;
        y_V_reg_831 <= y_V_fu_419_p2;
        y_V_reg_831_pp0_iter21_reg <= y_V_reg_831;
        y_V_reg_831_pp0_iter22_reg <= y_V_reg_831_pp0_iter21_reg;
        y_V_reg_831_pp0_iter23_reg <= y_V_reg_831_pp0_iter22_reg;
        y_V_reg_831_pp0_iter24_reg <= y_V_reg_831_pp0_iter23_reg;
        y_V_reg_831_pp0_iter25_reg <= y_V_reg_831_pp0_iter24_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ret_58_reg_908 <= grp_fu_653_p3;
        sub_ln16_2_reg_903 <= grp_fu_646_p3;
        sub_ln16_reg_898 <= grp_fu_639_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_19_reg_699 <= Input_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        tmp_reg_961 <= fragment_y_V_1_q0[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        triangle_2d_same_x0_V_reg_664 <= triangle_2d_same_x0_V_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        triangle_2d_same_x1_V_reg_674 <= triangle_2d_same_x1_V_fu_255_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        triangle_2d_same_x2_V_reg_684 <= triangle_2d_same_x2_V_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        triangle_2d_same_y0_V_reg_669 <= triangle_2d_same_y0_V_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        triangle_2d_same_y1_V_reg_679 <= triangle_2d_same_y1_V_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        triangle_2d_same_y2_V_reg_689 <= triangle_2d_same_y2_V_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        triangle_2d_same_z_V_reg_694 <= triangle_2d_same_z_V_fu_271_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_2_fu_599_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln878_reg_929[15 : 0] <= zext_ln878_fu_605_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_2_V_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14)))) begin
        Input_2_V_TREADY = 1'b1;
    end else begin
        Input_2_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_961 == 1'd1) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        Output_3_V_TDATA = zext_ln414_fu_633_p1;
    end else if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY)) & (1'b1 == ap_CS_fsm_state42))) begin
        Output_3_V_TDATA = zext_ln208_fu_577_p1;
    end else if ((~((1'b0 == Input_2_V_TVALID) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0))) begin
        Output_3_V_TDATA = 32'd0;
    end else begin
        Output_3_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((tmp_reg_961 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0)))) begin
        Output_3_V_TDATA_blk_n = Output_3_V_TREADY;
    end else begin
        Output_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (1'b1 == ap_CS_fsm_state42)) | (~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0)) | ((tmp_reg_961 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        Output_3_V_TVALID = 1'b1;
    end else begin
        Output_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        Output_4_V_TDATA = zext_ln414_fu_633_p1;
    end else if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY)) & (1'b1 == ap_CS_fsm_state42))) begin
        Output_4_V_TDATA = zext_ln208_2_fu_582_p1;
    end else if ((~((1'b0 == Input_2_V_TVALID) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0))) begin
        Output_4_V_TDATA = 32'd0;
    end else begin
        Output_4_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((tmp_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0)))) begin
        Output_4_V_TDATA_blk_n = Output_4_V_TREADY;
    end else begin
        Output_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (1'b1 == ap_CS_fsm_state42)) | (~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0)) | ((tmp_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        Output_4_V_TVALID = 1'b1;
    end else begin
        Output_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln147_fu_393_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_2_fu_599_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state43 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state43 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln147_reg_811 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_V_phi_fu_209_p4 = k_V_2_reg_806;
    end else begin
        ap_phi_mux_k_V_phi_fu_209_p4 = k_V_reg_205;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        fragment_color_V_1_ce0 = 1'b1;
    end else begin
        fragment_color_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_color_V_1_ce1 = 1'b1;
    end else begin
        fragment_color_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_color_V_1_we1 = 1'b1;
    end else begin
        fragment_color_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        fragment_x_V_1_ce0 = 1'b1;
    end else begin
        fragment_x_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_x_V_1_ce1 = 1'b1;
    end else begin
        fragment_x_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_x_V_1_we1 = 1'b1;
    end else begin
        fragment_x_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fragment_y_V_1_ce0 = 1'b1;
    end else begin
        fragment_y_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_y_V_1_ce1 = 1'b1;
    end else begin
        fragment_y_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_y_V_1_we1 = 1'b1;
    end else begin
        fragment_y_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        fragment_z_V_1_ce0 = 1'b1;
    end else begin
        fragment_z_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_z_V_1_ce1 = 1'b1;
    end else begin
        fragment_z_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_505_p3 == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fragment_z_V_1_we1 = 1'b1;
    end else begin
        fragment_z_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_2_V_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Input_2_V_TVALID) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b0 == Input_2_V_TVALID) | (1'b1 == ap_block_state14_io) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0))) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln138_reg_660 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln147_fu_393_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter26 == 1'b1) & (ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter26 == 1'b1) & (ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln147_fu_393_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (icmp_ln878_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY) | (1'b1 == ap_block_state42_io)) & (icmp_ln878_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln878_2_fu_599_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln878_2_fu_599_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_fu_593_p2 = (j_reg_217 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter3 == 1'b1) & (((1'b0 == Output_3_V_TREADY) & (tmp_reg_961 == 1'd1)) | ((1'b0 == Output_4_V_TREADY) & (tmp_reg_961 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter3 == 1'b1) & ((1'b1 == ap_block_state46_io) | ((1'b0 == Output_3_V_TREADY) & (tmp_reg_961 == 1'd1)) | ((1'b0 == Output_4_V_TREADY) & (tmp_reg_961 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter3 == 1'b1) & ((1'b1 == ap_block_state46_io) | ((1'b0 == Output_3_V_TREADY) & (tmp_reg_961 == 1'd1)) | ((1'b0 == Output_4_V_TREADY) & (tmp_reg_961 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_2_V_TVALID) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((1'b0 == Input_2_V_TVALID) | ((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_io = (((1'b0 == Output_3_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)) | ((1'b0 == Output_4_V_TREADY) & (icmp_ln138_reg_660 == 1'd0)));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42 = ((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY));
end

always @ (*) begin
    ap_block_state42_io = ((1'b0 == Output_4_V_TREADY) | (1'b0 == Output_3_V_TREADY));
end

assign ap_block_state43_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46_io = (((1'b0 == Output_3_V_TREADY) & (tmp_reg_961 == 1'd1)) | ((1'b0 == Output_4_V_TREADY) & (tmp_reg_961 == 1'd0)));
end

always @ (*) begin
    ap_block_state46_pp1_stage0_iter3 = (((1'b0 == Output_3_V_TREADY) & (tmp_reg_961 == 1'd1)) | ((1'b0 == Output_4_V_TREADY) & (tmp_reg_961 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_fu_369_p1 = tmp_V_19_reg_699[15:0];

assign flag_V_fu_237_p1 = Input_2_V_TDATA[1:0];

assign fragment_color_V_1_address0 = zext_ln878_reg_929;

assign fragment_color_V_1_address1 = zext_ln534_fu_513_p1;

assign fragment_x_V_1_address0 = zext_ln878_reg_929;

assign fragment_x_V_1_address1 = zext_ln534_fu_513_p1;

assign fragment_y_V_1_address0 = zext_ln878_fu_605_p1;

assign fragment_y_V_1_address1 = zext_ln534_fu_513_p1;

assign fragment_z_V_1_address0 = zext_ln878_reg_929;

assign fragment_z_V_1_address1 = zext_ln534_fu_513_p1;

assign grp_fu_398_p1 = max_min_V_4_cast_reg_735;

assign grp_fu_403_p1 = max_min_V_4_cast_reg_735;

assign grp_fu_436_p1 = rhs_reg_751;

assign grp_fu_458_p1 = rhs_11_reg_776;

assign grp_fu_477_p1 = rhs_14_reg_791;

assign grp_fu_639_p1 = rhs_9_reg_766;

assign grp_fu_646_p1 = rhs_12_reg_786;

assign grp_fu_653_p1 = rhs_15_reg_796;

assign i_V_2_fu_521_p2 = (i_V_fu_78 + 16'd1);

assign i_bot_V_2_fu_540_p2 = (i_bot_V_fu_70 + 16'd1);

assign i_top_V_2_fu_534_p2 = (i_top_V_fu_74 + 16'd1);

assign icmp_ln138_fu_241_p2 = ((flag_V_fu_237_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_393_p2 = ((ap_phi_mux_k_V_phi_fu_209_p4 == empty_reg_801) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_599_p2 = ((j_reg_217 == i_V_fu_78) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_587_p2 = ((i_V_fu_78 == 16'd0) ? 1'b1 : 1'b0);

assign k_V_2_fu_387_p2 = (ap_phi_mux_k_V_phi_fu_209_p4 + 16'd1);

assign max_min_V_3_fu_279_p1 = Input_2_V_TDATA[7:0];

assign max_min_V_4_cast_fu_287_p1 = max_min_V_4_fu_283_p1;

assign max_min_V_4_fu_283_p1 = Input_2_V_TDATA[7:0];

assign max_min_V_fu_275_p1 = Input_2_V_TDATA[7:0];

assign or_ln16_2_fu_500_p2 = (ret_58_reg_908 | or_ln16_fu_496_p2);

assign or_ln16_fu_496_p2 = (sub_ln16_reg_898 | sub_ln16_2_reg_903);

assign p_Result_s_fu_618_p5 = {{{{fragment_color_V_1_q0}, {fragment_z_V_1_q0}}, {fragment_y_V_1_load_reg_956}}, {fragment_x_V_1_q0}};

assign ret_59_fu_427_p2 = (zext_ln1347_fu_424_p1 - triangle_2d_same_x0_V_cast_reg_761);

assign ret_60_fu_297_p2 = (triangle_2d_same_y1_V_cast_fu_291_p1 - triangle_2d_same_y0_V_cast_fu_294_p1);

assign ret_62_fu_444_p2 = (zext_ln1347_2_fu_441_p1 - triangle_2d_same_y0_V_cast_reg_746);

assign ret_63_fu_313_p2 = (triangle_2d_same_x1_V_cast_fu_307_p1 - triangle_2d_same_x0_V_cast_fu_310_p1);

assign ret_65_fu_449_p2 = (zext_ln1347_fu_424_p1 - triangle_2d_same_x1_V_cast_reg_756);

assign ret_66_fu_326_p2 = (triangle_2d_same_y2_V_cast_fu_323_p1 - triangle_2d_same_y1_V_cast_fu_291_p1);

assign ret_68_fu_463_p2 = (zext_ln1347_2_fu_441_p1 - triangle_2d_same_y1_V_cast_reg_741);

assign ret_69_fu_339_p2 = (triangle_2d_same_x2_V_cast_fu_336_p1 - triangle_2d_same_x1_V_cast_fu_307_p1);

assign ret_71_fu_468_p2 = (zext_ln1347_fu_424_p1 - triangle_2d_same_x2_V_cast_reg_781);

assign ret_72_fu_349_p2 = (triangle_2d_same_y0_V_cast_fu_294_p1 - triangle_2d_same_y2_V_cast_fu_323_p1);

assign ret_74_fu_482_p2 = (zext_ln1347_2_fu_441_p1 - triangle_2d_same_y2_V_cast_reg_771);

assign ret_75_fu_359_p2 = (triangle_2d_same_x0_V_cast_fu_310_p1 - triangle_2d_same_x2_V_cast_fu_336_p1);

assign ret_fu_408_p1 = urem_ln1365_reg_815[7:0];

assign rhs_11_fu_332_p1 = $signed(ret_66_fu_326_p2);

assign rhs_12_fu_345_p1 = $signed(ret_69_fu_339_p2);

assign rhs_14_fu_355_p1 = $signed(ret_72_fu_349_p2);

assign rhs_15_fu_365_p1 = $signed(ret_75_fu_359_p2);

assign rhs_9_fu_319_p1 = $signed(ret_63_fu_313_p2);

assign rhs_fu_303_p1 = $signed(ret_60_fu_297_p2);

assign select_ln160_1_fu_554_p3 = ((tmp_4_fu_527_p3[0:0] == 1'b1) ? i_top_V_2_fu_534_p2 : i_top_V_fu_74);

assign select_ln160_fu_546_p3 = ((tmp_4_fu_527_p3[0:0] == 1'b1) ? i_bot_V_fu_70 : i_bot_V_2_fu_540_p2);

assign sext_ln414_fu_629_p1 = $signed(p_Result_s_fu_618_p5);

assign tmp_3_fu_505_p3 = or_ln16_2_fu_500_p2[32'd17];

assign tmp_4_fu_527_p3 = y_V_reg_831_pp0_iter25_reg[32'd7];

assign triangle_2d_same_x0_V_cast_fu_310_p1 = triangle_2d_same_x0_V_reg_664;

assign triangle_2d_same_x0_V_fu_247_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_x1_V_cast_fu_307_p1 = triangle_2d_same_x1_V_reg_674;

assign triangle_2d_same_x1_V_fu_255_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_x2_V_cast_fu_336_p1 = triangle_2d_same_x2_V_reg_684;

assign triangle_2d_same_x2_V_fu_263_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_y0_V_cast_fu_294_p1 = triangle_2d_same_y0_V_reg_669;

assign triangle_2d_same_y0_V_fu_251_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_y1_V_cast_fu_291_p1 = triangle_2d_same_y1_V_reg_679;

assign triangle_2d_same_y1_V_fu_259_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_y2_V_cast_fu_323_p1 = triangle_2d_same_y2_V_reg_689;

assign triangle_2d_same_y2_V_fu_267_p1 = Input_2_V_TDATA[7:0];

assign triangle_2d_same_z_V_fu_271_p1 = Input_2_V_TDATA[7:0];

assign trunc_ln208_fu_416_p1 = ret_39_reg_820[7:0];

assign x_V_fu_411_p2 = (ret_fu_408_p1 + max_min_V_reg_704);

assign y_V_fu_419_p2 = (trunc_ln208_fu_416_p1 + max_min_V_3_reg_709);

assign zext_ln1347_2_fu_441_p1 = y_V_reg_831;

assign zext_ln1347_fu_424_p1 = x_V_reg_825;

assign zext_ln208_2_fu_582_p1 = i_bot_V_fu_70;

assign zext_ln208_fu_577_p1 = i_top_V_fu_74;

assign zext_ln414_fu_633_p1 = $unsigned(sext_ln414_fu_629_p1);

assign zext_ln534_fu_513_p1 = i_V_fu_78;

assign zext_ln878_fu_605_p1 = j_reg_217;

always @ (posedge ap_clk) begin
    max_min_V_4_cast_reg_735[15:8] <= 8'b00000000;
    triangle_2d_same_y1_V_cast_reg_741[8] <= 1'b0;
    triangle_2d_same_y0_V_cast_reg_746[8] <= 1'b0;
    triangle_2d_same_x1_V_cast_reg_756[8] <= 1'b0;
    triangle_2d_same_x0_V_cast_reg_761[8] <= 1'b0;
    triangle_2d_same_y2_V_cast_reg_771[8] <= 1'b0;
    triangle_2d_same_x2_V_cast_reg_781[8] <= 1'b0;
    zext_ln878_reg_929[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //rasterization2_m_rasterization2_even
