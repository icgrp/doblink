// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_1_4_1_data_1_4_1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=587510,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=303,HLS_SYN_LUT=375,HLS_VERSION=2020_2}" *)

module data_1_4_1 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_state6 = 11'd8;
parameter    ap_ST_fsm_state7 = 11'd16;
parameter    ap_ST_fsm_state8 = 11'd32;
parameter    ap_ST_fsm_pp1_stage0 = 11'd64;
parameter    ap_ST_fsm_pp1_stage1 = 11'd128;
parameter    ap_ST_fsm_state13 = 11'd256;
parameter    ap_ST_fsm_state14 = 11'd512;
parameter    ap_ST_fsm_state15 = 11'd1024;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] epoch;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln25_fu_176_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln30_fu_193_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln30_reg_249;
reg    Input_2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln42_fu_164_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln42_reg_217;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln30_reg_249_pp1_iter1_reg;
reg    Output_2_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln42_reg_217_pp0_iter1_reg;
reg   [8:0] i_reg_99;
reg   [7:0] i_2_reg_121;
reg   [31:0] reg_143;
reg    ap_block_state9_pp1_stage0_iter0;
reg    ap_block_state11_pp1_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln21_fu_152_p2;
wire   [8:0] i_1_fu_158_p2;
reg   [8:0] i_1_reg_212;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] tmp_3_reg_221;
reg   [31:0] tmp_4_reg_226;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_11001;
wire   [12:0] training_id_1_fu_170_p2;
reg   [12:0] training_id_1_reg_231;
reg    ap_block_state7;
reg    ap_block_state7_io;
wire   [31:0] add_ln39_fu_182_p2;
reg   [31:0] add_ln39_reg_239;
wire   [7:0] i_3_fu_187_p2;
reg   [7:0] i_3_reg_244;
reg   [31:0] tmp_2_reg_253;
reg    ap_block_state10_pp1_stage1_iter0;
reg    ap_block_state10_io;
reg    ap_block_state12_pp1_stage1_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_block_pp1_stage1_subdone;
reg   [8:0] ap_phi_mux_i_phi_fu_103_p4;
reg   [12:0] training_id_reg_110;
wire    ap_CS_fsm_state13;
reg   [7:0] ap_phi_mux_i_2_phi_fu_125_p4;
reg   [31:0] storemerge_reg_132;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state15;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state15;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage0_01001;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg   [31:0] Output_2_V_TDATA_int_regslice;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
reg    ap_condition_347;
reg    ap_condition_354;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 icmp_ln30_reg_249 = 1'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 icmp_ln42_reg_217 = 1'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 icmp_ln30_reg_249_pp1_iter1_reg = 1'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 icmp_ln42_reg_217_pp0_iter1_reg = 1'd0;
#0 i_reg_99 = 9'd0;
#0 i_2_reg_121 = 8'd0;
#0 reg_143 = 32'd0;
#0 i_1_reg_212 = 9'd0;
#0 tmp_3_reg_221 = 32'd0;
#0 tmp_4_reg_226 = 32'd0;
#0 training_id_1_reg_231 = 13'd0;
#0 add_ln39_reg_239 = 32'd0;
#0 i_3_reg_244 = 8'd0;
#0 tmp_2_reg_253 = 32'd0;
#0 training_id_reg_110 = 13'd0;
#0 storemerge_reg_132 = 32'd0;
end

data_1_4_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_1_4_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

data_1_4_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

data_1_4_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_2_V_TDATA_int_regslice),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln39_reg_239 <= 32'd0;
    end else begin
        if (((icmp_ln25_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            add_ln39_reg_239 <= add_ln39_fu_182_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state9))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        epoch <= 32'd0;
    end else begin
        if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state15))) begin
            epoch <= storemerge_reg_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_1_reg_212 <= 9'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_1_reg_212 <= i_1_fu_158_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_2_reg_121 <= 8'd0;
    end else begin
        if (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
            i_2_reg_121 <= i_3_reg_244;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
            i_2_reg_121 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_3_reg_244 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            i_3_reg_244 <= i_3_fu_187_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_reg_99 <= 9'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd0))) begin
            i_reg_99 <= 9'd0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln42_reg_217 == 1'd0))) begin
            i_reg_99 <= i_1_reg_212;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln30_reg_249 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln30_reg_249 <= icmp_ln30_fu_193_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln30_reg_249_pp1_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln30_reg_249_pp1_iter1_reg <= icmp_ln30_reg_249;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln42_reg_217 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln42_reg_217 <= icmp_ln42_fu_164_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln42_reg_217_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln42_reg_217_pp0_iter1_reg <= icmp_ln42_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_143 <= 32'd0;
    end else begin
        if ((((icmp_ln30_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
            reg_143 <= Input_1_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        storemerge_reg_132 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            storemerge_reg_132 <= 32'd0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            storemerge_reg_132 <= add_ln39_reg_239;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_2_reg_253 <= 32'd0;
    end else begin
        if (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            tmp_2_reg_253 <= Input_1_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_3_reg_221 <= 32'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_164_p2 == 1'd0))) begin
            tmp_3_reg_221 <= Input_2_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_4_reg_226 <= 32'd0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217 == 1'd0))) begin
            tmp_4_reg_226 <= Input_2_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        training_id_1_reg_231 <= 13'd0;
    end else begin
        if ((~((1'b1 == ap_block_state7_io) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (1'b1 == ap_CS_fsm_state7))) begin
            training_id_1_reg_231 <= training_id_1_fu_170_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        training_id_reg_110 <= 13'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd1))) begin
            training_id_reg_110 <= 13'd0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            training_id_reg_110 <= training_id_1_reg_231;
        end
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln30_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln30_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((1'b1 == ap_block_state7_io) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_164_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217 == 1'd0)))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_164_p2 == 1'd0)))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        Output_1_V_TDATA_int_regslice = tmp_2_reg_253;
    end else if (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        Output_1_V_TDATA_int_regslice = reg_143;
    end else if ((~(((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        Output_1_V_TDATA_int_regslice = Input_1_V_TDATA_int_regslice;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | (~((1'b1 == ap_block_state7_io) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln42_reg_217 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln42_reg_217 == 1'd0)) begin
        if ((1'b1 == ap_condition_354)) begin
            Output_2_V_TDATA_int_regslice = tmp_4_reg_226;
        end else if ((1'b1 == ap_condition_347)) begin
            Output_2_V_TDATA_int_regslice = tmp_3_reg_221;
        end else begin
            Output_2_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        Output_2_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln42_reg_217 == 1'd0)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_164_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_193_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_125_p4 = i_3_reg_244;
    end else begin
        ap_phi_mux_i_2_phi_fu_125_p4 = i_2_reg_121;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln42_reg_217 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_103_p4 = i_1_reg_212;
    end else begin
        ap_phi_mux_i_phi_fu_103_p4 = i_reg_99;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln21_fu_152_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln42_fu_164_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln42_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b1 == ap_block_state7_io) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln25_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if ((~((1'b1 == ap_block_state7_io) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln25_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln30_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln30_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln39_fu_182_p2 = (epoch + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_fu_164_p2 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln42_reg_217 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_fu_164_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_fu_164_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_reg_217 == 1'd0)))) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_reg_217 == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_reg_217 == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln30_fu_193_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln30_fu_193_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln30_fu_193_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state10_pp1_stage1_iter0 = (((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter1 = ((icmp_ln30_reg_249 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state12_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp1_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln30_reg_249_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state15 = ((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_fu_164_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln42_reg_217 == 1'd0)));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217 == 1'd0));
end

always @ (*) begin
    ap_block_state5_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln42_reg_217_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state7 = (((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln25_fu_176_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state9_pp1_stage0_iter0 = ((icmp_ln30_fu_193_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_condition_347 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_354 = ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_158_p2 = (ap_phi_mux_i_phi_fu_103_p4 + 9'd1);

assign i_3_fu_187_p2 = (ap_phi_mux_i_2_phi_fu_125_p4 + 8'd1);

assign icmp_ln21_fu_152_p2 = (($signed(epoch) < $signed(32'd5)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_176_p2 = ((training_id_reg_110 == 13'd4500) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_193_p2 = ((ap_phi_mux_i_2_phi_fu_125_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_164_p2 = ((ap_phi_mux_i_phi_fu_103_p4 == 9'd256) ? 1'b1 : 1'b0);

assign training_id_1_fu_170_p2 = (training_id_reg_110 + 13'd1);

endmodule //data_1_4_1
