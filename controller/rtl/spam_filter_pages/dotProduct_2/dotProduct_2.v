// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dotProduct_2_dotProduct_2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.860000,HLS_SYN_LAT=525,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1439,HLS_SYN_LUT=1379,HLS_VERSION=2020_2}" *)

module dotProduct_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_pp1_stage0 = 16'd16;
parameter    ap_ST_fsm_state11 = 16'd32;
parameter    ap_ST_fsm_state12 = 16'd64;
parameter    ap_ST_fsm_pp2_stage0 = 16'd128;
parameter    ap_ST_fsm_state19 = 16'd256;
parameter    ap_ST_fsm_pp3_stage0 = 16'd512;
parameter    ap_ST_fsm_state26 = 16'd1024;
parameter    ap_ST_fsm_state27 = 16'd2048;
parameter    ap_ST_fsm_pp4_stage0 = 16'd4096;
parameter    ap_ST_fsm_pp4_stage1 = 16'd8192;
parameter    ap_ST_fsm_state32 = 16'd16384;
parameter    ap_ST_fsm_state33 = 16'd32768;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] odd_even;
reg   [7:0] training_label_V;
reg   [7:0] feature_V_address0;
reg    feature_V_ce0;
reg    feature_V_we0;
wire   [15:0] feature_V_d0;
wire   [15:0] feature_V_q0;
reg   [7:0] feature_V_address1;
reg    feature_V_ce1;
reg    feature_V_we1;
reg   [15:0] feature_V_d1;
wire   [15:0] feature_V_q1;
reg   [7:0] param_V_address0;
reg    param_V_ce0;
reg    param_V_we0;
wire   [31:0] param_V_d0;
wire   [31:0] param_V_q0;
reg   [7:0] param_V_address1;
reg    param_V_ce1;
wire   [31:0] param_V_q1;
reg   [31:0] num_train;
reg   [31:0] epoch;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln31_fu_520_p2;
wire    ap_CS_fsm_state3;
reg    Input_2_V_TDATA_blk_n;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp4_stage1;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_pp4_stage1;
reg   [0:0] icmp_ln91_reg_1173;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln91_reg_1173_pp4_iter1_reg;
reg   [8:0] indvar_flatten_reg_296;
reg   [6:0] i_3_reg_307;
reg   [2:0] j_2_reg_318;
reg   [31:0] result_V_1_reg_329;
reg   [8:0] indvar_flatten9_reg_342;
reg   [6:0] i_reg_353;
reg   [2:0] j_reg_364;
reg   [8:0] indvar_flatten19_reg_375;
reg   [6:0] i_2_reg_386;
reg   [2:0] j_1_reg_397;
reg   [7:0] i_4_reg_428;
reg   [15:0] reg_463;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_state10_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln49_reg_1003;
reg   [0:0] icmp_ln49_reg_1003_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state13_pp2_stage0_iter0;
wire    ap_block_state14_pp2_stage0_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
wire    ap_block_state16_pp2_stage0_iter3;
wire    ap_block_state17_pp2_stage0_iter4;
wire    ap_block_state18_pp2_stage0_iter5;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln67_reg_1057;
reg   [0:0] icmp_ln67_reg_1057_pp2_iter1_reg;
reg  signed [31:0] reg_468;
reg    ap_enable_reg_pp3_iter4;
wire    ap_block_state20_pp3_stage0_iter0;
wire    ap_block_state21_pp3_stage0_iter1;
wire    ap_block_state22_pp3_stage0_iter2;
wire    ap_block_state23_pp3_stage0_iter3;
wire    ap_block_state24_pp3_stage0_iter4;
wire    ap_block_state25_pp3_stage0_iter5;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln75_reg_1101;
reg   [0:0] icmp_ln75_reg_1101_pp3_iter3_reg;
reg    ap_block_state29_pp4_stage1_iter0;
reg    ap_block_state29_io;
reg    ap_block_state31_pp4_stage1_iter1;
reg    ap_block_state31_io;
reg    ap_block_pp4_stage1_11001;
wire  signed [50:0] sext_ln67_fu_510_p1;
reg  signed [50:0] sext_ln67_reg_979;
wire   [6:0] add_ln31_fu_514_p2;
reg   [6:0] add_ln31_reg_984;
reg    ap_block_state2;
wire   [7:0] shl_ln1_fu_530_p3;
reg   [7:0] shl_ln1_reg_992;
wire   [8:0] add_ln49_fu_584_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln49_fu_590_p2;
reg   [0:0] icmp_ln49_reg_1003_pp1_iter2_reg;
reg   [0:0] icmp_ln49_reg_1003_pp1_iter3_reg;
reg   [0:0] icmp_ln49_reg_1003_pp1_iter4_reg;
wire   [6:0] select_ln49_1_fu_616_p3;
reg   [6:0] select_ln49_1_reg_1007;
wire   [7:0] add_ln54_fu_640_p2;
reg   [7:0] add_ln54_reg_1012;
wire   [2:0] add_ln52_fu_646_p2;
reg   [31:0] term_reg_1042;
wire   [31:0] result_V_fu_689_p2;
reg    ap_enable_reg_pp1_iter5;
wire   [8:0] add_ln67_fu_694_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln67_fu_700_p2;
reg   [0:0] icmp_ln67_reg_1057_pp2_iter2_reg;
reg   [0:0] icmp_ln67_reg_1057_pp2_iter3_reg;
reg   [0:0] icmp_ln67_reg_1057_pp2_iter4_reg;
wire   [6:0] select_ln67_1_fu_726_p3;
reg   [6:0] select_ln67_1_reg_1061;
wire   [7:0] add_ln71_fu_750_p2;
reg   [7:0] add_ln71_reg_1066;
wire   [2:0] add_ln70_fu_756_p2;
wire   [63:0] zext_ln727_fu_762_p1;
reg   [63:0] zext_ln727_reg_1076;
reg   [63:0] zext_ln727_reg_1076_pp2_iter2_reg;
reg   [63:0] zext_ln727_reg_1076_pp2_iter3_reg;
reg   [63:0] zext_ln727_reg_1076_pp2_iter4_reg;
reg   [31:0] trunc_ln_reg_1091;
wire   [8:0] add_ln75_fu_793_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln75_fu_799_p2;
reg   [0:0] icmp_ln75_reg_1101_pp3_iter1_reg;
reg   [0:0] icmp_ln75_reg_1101_pp3_iter2_reg;
reg   [0:0] icmp_ln75_reg_1101_pp3_iter4_reg;
wire   [6:0] select_ln75_1_fu_825_p3;
reg   [6:0] select_ln75_1_reg_1105;
wire   [7:0] add_ln80_fu_849_p2;
reg   [7:0] add_ln80_reg_1110;
wire   [2:0] add_ln78_fu_855_p2;
reg   [7:0] param_V_addr_reg_1125;
reg   [7:0] param_V_addr_reg_1125_pp3_iter2_reg;
reg   [7:0] param_V_addr_reg_1125_pp3_iter3_reg;
reg   [7:0] param_V_addr_reg_1125_pp3_iter4_reg;
wire   [31:0] grad_V_q0;
reg  signed [31:0] grad_V_load_reg_1131;
reg    ap_enable_reg_pp3_iter2;
reg   [31:0] tmp_V_1_reg_1141;
wire   [31:0] add_ln85_fu_895_p2;
wire    ap_CS_fsm_state26;
wire   [31:0] add_ln88_fu_911_p2;
wire   [0:0] icmp_ln86_fu_901_p2;
wire   [0:0] icmp_ln90_fu_923_p2;
wire    ap_CS_fsm_state27;
wire   [7:0] add_ln91_fu_935_p2;
reg   [7:0] add_ln91_reg_1168;
wire    ap_block_state28_pp4_stage0_iter0;
reg    ap_block_state30_pp4_stage0_iter1;
reg    ap_block_state30_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln91_fu_941_p2;
reg   [31:0] p_Val2_3_reg_1187;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_condition_pp1_exit_iter3_state8;
reg    ap_block_state1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state13;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
wire    ap_CS_fsm_state19;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state20;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter5;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state28;
reg    ap_block_pp4_stage1_subdone;
reg   [7:0] grad_V_address0;
reg    grad_V_ce0;
reg    grad_V_we0;
reg   [6:0] i_1_reg_285;
reg   [6:0] ap_phi_mux_i_3_phi_fu_311_p4;
wire    ap_block_pp1_stage0;
reg   [6:0] ap_phi_mux_i_phi_fu_357_p4;
wire    ap_block_pp2_stage0;
reg   [6:0] ap_phi_mux_i_2_phi_fu_390_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] num_train_new_0_reg_408;
reg   [31:0] empty_18_reg_419;
reg   [7:0] ap_phi_mux_i_4_phi_fu_432_p4;
reg   [0:0] storemerge_reg_439;
wire    ap_CS_fsm_state32;
wire   [63:0] zext_ln674_fu_538_p1;
wire   [63:0] zext_ln340_fu_554_p1;
wire   [63:0] zext_ln674_1_fu_564_p1;
wire   [63:0] zext_ln340_1_fu_579_p1;
wire   [63:0] zext_ln727_1_fu_652_p1;
wire   [63:0] zext_ln1118_fu_861_p1;
wire   [63:0] zext_ln640_fu_953_p1;
wire   [63:0] zext_ln640_1_fu_964_p1;
wire    ap_CS_fsm_state33;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state33;
wire   [7:0] tmp_4_fu_478_p1;
reg    ap_block_pp4_stage1_01001;
reg    ap_block_pp4_stage0_01001;
wire   [15:0] p_Result_1_fu_543_p1;
wire   [15:0] p_Result_3_fu_569_p1;
wire   [26:0] shl_ln_fu_492_p3;
wire   [31:0] zext_ln703_fu_500_p1;
wire   [31:0] scale_V_fu_504_p2;
wire   [5:0] trunc_ln39_fu_526_p1;
wire   [7:0] or_ln40_fu_548_p2;
wire   [7:0] or_ln43_fu_559_p2;
wire   [7:0] or_ln44_fu_574_p2;
wire   [0:0] icmp_ln52_fu_596_p2;
wire   [6:0] add_ln49_1_fu_610_p2;
wire   [5:0] trunc_ln49_fu_624_p1;
wire   [2:0] select_ln49_fu_602_p3;
wire   [7:0] j_2_cast_fu_636_p1;
wire   [7:0] p_mid2_fu_628_p3;
wire  signed [22:0] shl_ln728_2_fu_657_p3;
wire   [50:0] grp_fu_673_p2;
wire   [0:0] icmp_ln70_fu_706_p2;
wire   [6:0] add_ln67_1_fu_720_p2;
wire   [5:0] trunc_ln67_fu_734_p1;
wire   [2:0] select_ln67_fu_712_p3;
wire   [7:0] j_cast_fu_746_p1;
wire   [7:0] p_mid_fu_738_p3;
wire  signed [22:0] shl_ln728_1_fu_766_p3;
wire  signed [31:0] grp_fu_778_p1;
wire   [50:0] grp_fu_778_p2;
wire   [0:0] icmp_ln78_fu_805_p2;
wire   [6:0] add_ln75_1_fu_819_p2;
wire   [5:0] trunc_ln75_fu_833_p1;
wire   [2:0] select_ln75_fu_811_p3;
wire   [7:0] j_1_cast_fu_845_p1;
wire   [7:0] p_mid1_fu_837_p3;
wire  signed [31:0] grp_fu_869_p1;
wire   [50:0] grp_fu_869_p2;
wire   [7:0] shl_ln96_fu_947_p2;
wire   [7:0] or_ln97_fu_958_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg   [31:0] Output_2_V_TDATA_int_regslice;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
reg    ap_condition_683;
reg    ap_condition_689;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 odd_even = 1'd0;
#0 training_label_V = 8'd0;
#0 num_train = 32'd0;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
end

dotProduct_2_feature_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
feature_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(feature_V_address0),
    .ce0(feature_V_ce0),
    .we0(feature_V_we0),
    .d0(feature_V_d0),
    .q0(feature_V_q0),
    .address1(feature_V_address1),
    .ce1(feature_V_ce1),
    .we1(feature_V_we1),
    .d1(feature_V_d1),
    .q1(feature_V_q1)
);

dotProduct_2_param_V #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
param_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(param_V_address0),
    .ce0(param_V_ce0),
    .we0(param_V_we0),
    .d0(param_V_d0),
    .q0(param_V_q0),
    .address1(param_V_address1),
    .ce1(param_V_ce1),
    .q1(param_V_q1)
);

dotProduct_2_grad_V #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
grad_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grad_V_address0),
    .ce0(grad_V_ce0),
    .we0(grad_V_we0),
    .d0(trunc_ln_reg_1091),
    .q0(grad_V_q0)
);

dotProduct_2_mul_32s_23s_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 51 ))
mul_32s_23s_51_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_468),
    .din1(shl_ln728_2_fu_657_p3),
    .ce(1'b1),
    .dout(grp_fu_673_p2)
);

dotProduct_2_mul_23s_32s_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
mul_23s_32s_51_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(shl_ln728_1_fu_766_p3),
    .din1(grp_fu_778_p1),
    .ce(1'b1),
    .dout(grp_fu_778_p2)
);

dotProduct_2_mul_32s_32s_51_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
mul_32s_32s_51_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grad_V_load_reg_1131),
    .din1(grp_fu_869_p1),
    .ce(1'b1),
    .dout(grp_fu_869_p2)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(result_V_1_reg_329),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_2_V_TDATA_int_regslice),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter3_state8)) begin
                ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state13)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp2_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state20)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp3_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln90_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if (((icmp_ln90_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        if ((icmp_ln86_fu_901_p2 == 1'd0)) begin
            empty_18_reg_419 <= epoch;
        end else if ((icmp_ln86_fu_901_p2 == 1'd1)) begin
            empty_18_reg_419 <= add_ln88_fu_911_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_285 <= 7'd0;
    end else if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_285 <= add_ln31_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_2_reg_386 <= 7'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln75_reg_1101 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_2_reg_386 <= select_ln75_1_reg_1105;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_307 <= 7'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln49_reg_1003 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_3_reg_307 <= select_ln49_1_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_4_reg_428 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_4_reg_428 <= add_ln91_reg_1168;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln67_reg_1057 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_reg_353 <= select_ln67_1_reg_1061;
    end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_353 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten19_reg_375 <= 9'd0;
    end else if (((icmp_ln75_fu_799_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar_flatten19_reg_375 <= add_ln75_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_700_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten9_reg_342 <= add_ln67_fu_694_p2;
    end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten9_reg_342 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_296 <= 9'd0;
    end else if (((icmp_ln49_fu_590_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_296 <= add_ln49_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_1_reg_397 <= 3'd0;
    end else if (((icmp_ln75_fu_799_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j_1_reg_397 <= add_ln78_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_2_reg_318 <= 3'd0;
    end else if (((icmp_ln49_fu_590_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_2_reg_318 <= add_ln52_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_700_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_reg_364 <= add_ln70_fu_756_p2;
    end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_364 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        if ((icmp_ln86_fu_901_p2 == 1'd0)) begin
            num_train_new_0_reg_408 <= add_ln85_fu_895_p2;
        end else if ((icmp_ln86_fu_901_p2 == 1'd1)) begin
            num_train_new_0_reg_408 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_reg_1057_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        reg_463 <= feature_V_q1;
    end else if (((icmp_ln49_reg_1003_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        reg_463 <= feature_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1101_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        reg_468 <= param_V_q1;
    end else if ((((icmp_ln49_reg_1003_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        reg_468 <= param_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_V_1_reg_329 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln49_reg_1003_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        result_V_1_reg_329 <= result_V_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        storemerge_reg_439 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        storemerge_reg_439 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln31_reg_984 <= add_ln31_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln54_reg_1012 <= add_ln54_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_700_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln71_reg_1066 <= add_ln71_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_799_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln80_reg_1110 <= add_ln80_fu_849_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        add_ln91_reg_1168 <= add_ln91_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_901_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        epoch <= add_ln88_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln75_reg_1101_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        grad_V_load_reg_1131 <= grad_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln49_reg_1003 <= icmp_ln49_fu_590_p2;
        icmp_ln49_reg_1003_pp1_iter1_reg <= icmp_ln49_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln49_reg_1003_pp1_iter2_reg <= icmp_ln49_reg_1003_pp1_iter1_reg;
        icmp_ln49_reg_1003_pp1_iter3_reg <= icmp_ln49_reg_1003_pp1_iter2_reg;
        icmp_ln49_reg_1003_pp1_iter4_reg <= icmp_ln49_reg_1003_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln67_reg_1057 <= icmp_ln67_fu_700_p2;
        icmp_ln67_reg_1057_pp2_iter1_reg <= icmp_ln67_reg_1057;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln67_reg_1057_pp2_iter2_reg <= icmp_ln67_reg_1057_pp2_iter1_reg;
        icmp_ln67_reg_1057_pp2_iter3_reg <= icmp_ln67_reg_1057_pp2_iter2_reg;
        icmp_ln67_reg_1057_pp2_iter4_reg <= icmp_ln67_reg_1057_pp2_iter3_reg;
        zext_ln727_reg_1076_pp2_iter2_reg[7 : 0] <= zext_ln727_reg_1076[7 : 0];
        zext_ln727_reg_1076_pp2_iter3_reg[7 : 0] <= zext_ln727_reg_1076_pp2_iter2_reg[7 : 0];
        zext_ln727_reg_1076_pp2_iter4_reg[7 : 0] <= zext_ln727_reg_1076_pp2_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln75_reg_1101 <= icmp_ln75_fu_799_p2;
        icmp_ln75_reg_1101_pp3_iter1_reg <= icmp_ln75_reg_1101;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln75_reg_1101_pp3_iter2_reg <= icmp_ln75_reg_1101_pp3_iter1_reg;
        icmp_ln75_reg_1101_pp3_iter3_reg <= icmp_ln75_reg_1101_pp3_iter2_reg;
        icmp_ln75_reg_1101_pp3_iter4_reg <= icmp_ln75_reg_1101_pp3_iter3_reg;
        param_V_addr_reg_1125_pp3_iter2_reg <= param_V_addr_reg_1125;
        param_V_addr_reg_1125_pp3_iter3_reg <= param_V_addr_reg_1125_pp3_iter2_reg;
        param_V_addr_reg_1125_pp3_iter4_reg <= param_V_addr_reg_1125_pp3_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln91_reg_1173 <= icmp_ln91_fu_941_p2;
        icmp_ln91_reg_1173_pp4_iter1_reg <= icmp_ln91_reg_1173;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        num_train <= num_train_new_0_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state33))) begin
        odd_even <= storemerge_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        p_Val2_3_reg_1187 <= param_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1101 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        param_V_addr_reg_1125 <= zext_ln1118_fu_861_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_590_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln49_1_reg_1007 <= select_ln49_1_fu_616_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_700_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln67_1_reg_1061 <= select_ln67_1_fu_726_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_799_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln75_1_reg_1105 <= select_ln75_1_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln67_reg_979 <= sext_ln67_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln1_reg_992[7 : 2] <= shl_ln1_fu_530_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_1003_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        term_reg_1042 <= {{grp_fu_673_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1101_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        tmp_V_1_reg_1141 <= {{grp_fu_869_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        training_label_V <= tmp_4_fu_478_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_reg_1057_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln_reg_1091 <= {{grp_fu_778_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_reg_1057 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln727_reg_1076[7 : 0] <= zext_ln727_fu_762_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((odd_even == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((odd_even == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state11))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage0)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage1)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln91_reg_1173 == 1'd0)) begin
        if ((1'b1 == ap_condition_689)) begin
            Output_2_V_TDATA_int_regslice = p_Val2_3_reg_1187;
        end else if ((1'b1 == ap_condition_683)) begin
            Output_2_V_TDATA_int_regslice = param_V_q0;
        end else begin
            Output_2_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        Output_2_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_condition_pp1_exit_iter3_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter3_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln67_fu_700_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_799_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln91_fu_941_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln75_reg_1101 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_2_phi_fu_390_p4 = select_ln75_1_reg_1105;
    end else begin
        ap_phi_mux_i_2_phi_fu_390_p4 = i_2_reg_386;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln49_reg_1003 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_3_phi_fu_311_p4 = select_ln49_1_reg_1007;
    end else begin
        ap_phi_mux_i_3_phi_fu_311_p4 = i_3_reg_307;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln91_reg_1173 == 1'd0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_i_4_phi_fu_432_p4 = add_ln91_reg_1168;
    end else begin
        ap_phi_mux_i_4_phi_fu_432_p4 = i_4_reg_428;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln67_reg_1057 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_phi_fu_357_p4 = select_ln67_1_reg_1061;
    end else begin
        ap_phi_mux_i_phi_fu_357_p4 = i_reg_353;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        feature_V_address0 = zext_ln727_1_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_address0 = zext_ln340_1_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_address0 = zext_ln340_fu_554_p1;
    end else begin
        feature_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        feature_V_address1 = zext_ln727_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_address1 = zext_ln674_1_fu_564_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_address1 = zext_ln674_fu_538_p1;
    end else begin
        feature_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | (~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        feature_V_ce0 = 1'b1;
    end else begin
        feature_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | (~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        feature_V_ce1 = 1'b1;
    end else begin
        feature_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_d1 = p_Result_3_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_d1 = p_Result_1_fu_543_p1;
    end else begin
        feature_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        feature_V_we0 = 1'b1;
    end else begin
        feature_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        feature_V_we1 = 1'b1;
    end else begin
        feature_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        grad_V_address0 = zext_ln1118_fu_861_p1;
    end else if (((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grad_V_address0 = zext_ln727_reg_1076_pp2_iter4_reg;
    end else begin
        grad_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        grad_V_ce0 = 1'b1;
    end else begin
        grad_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln67_reg_1057_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grad_V_we0 = 1'b1;
    end else begin
        grad_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        param_V_address0 = zext_ln640_fu_953_p1;
    end else if (((ap_enable_reg_pp3_iter5 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        param_V_address0 = param_V_addr_reg_1125_pp3_iter4_reg;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        param_V_address0 = zext_ln727_1_fu_652_p1;
    end else begin
        param_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        param_V_address1 = zext_ln640_1_fu_964_p1;
    end else if (((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        param_V_address1 = param_V_addr_reg_1125_pp3_iter2_reg;
    end else begin
        param_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter5 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        param_V_ce0 = 1'b1;
    end else begin
        param_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        param_V_ce1 = 1'b1;
    end else begin
        param_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln75_reg_1101_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        param_V_we0 = 1'b1;
    end else begin
        param_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln31_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln31_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln67_fu_700_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter5 == 1'b1) & (ap_enable_reg_pp2_iter4 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter5 == 1'b1) & (ap_enable_reg_pp2_iter4 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln67_fu_700_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln75_fu_799_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter5 == 1'b1) & (ap_enable_reg_pp3_iter4 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter5 == 1'b1) & (ap_enable_reg_pp3_iter4 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln75_fu_799_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln90_fu_923_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln91_fu_941_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if (((icmp_ln91_fu_941_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((~((1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage1_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0)) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage1_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln31_fu_514_p2 = (i_1_reg_285 + 7'd1);

assign add_ln49_1_fu_610_p2 = (ap_phi_mux_i_3_phi_fu_311_p4 + 7'd1);

assign add_ln49_fu_584_p2 = (indvar_flatten_reg_296 + 9'd1);

assign add_ln52_fu_646_p2 = (select_ln49_fu_602_p3 + 3'd1);

assign add_ln54_fu_640_p2 = (j_2_cast_fu_636_p1 + p_mid2_fu_628_p3);

assign add_ln67_1_fu_720_p2 = (ap_phi_mux_i_phi_fu_357_p4 + 7'd1);

assign add_ln67_fu_694_p2 = (indvar_flatten9_reg_342 + 9'd1);

assign add_ln70_fu_756_p2 = (select_ln67_fu_712_p3 + 3'd1);

assign add_ln71_fu_750_p2 = (j_cast_fu_746_p1 + p_mid_fu_738_p3);

assign add_ln75_1_fu_819_p2 = (ap_phi_mux_i_2_phi_fu_390_p4 + 7'd1);

assign add_ln75_fu_793_p2 = (indvar_flatten19_reg_375 + 9'd1);

assign add_ln78_fu_855_p2 = (select_ln75_fu_811_p3 + 3'd1);

assign add_ln80_fu_849_p2 = (j_1_cast_fu_845_p1 + p_mid1_fu_837_p3);

assign add_ln85_fu_895_p2 = (num_train + 32'd1);

assign add_ln88_fu_911_p2 = (epoch + 32'd1);

assign add_ln91_fu_935_p2 = (ap_phi_mux_i_4_phi_fu_432_p4 + 8'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln91_reg_1173 == 1'd0));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0))));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0))));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state31_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp4_iter0 == 1'b1) & ((1'b1 == ap_block_state29_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state31_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp4_iter0 == 1'b1) & ((1'b1 == ap_block_state29_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice)));
end

assign ap_block_state10_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((icmp_ln31_fu_520_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

assign ap_block_state20_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0));
end

always @ (*) begin
    ap_block_state29_pp4_stage1_iter0 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0));
end

always @ (*) begin
    ap_block_state30_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0));
end

always @ (*) begin
    ap_block_state30_pp4_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173 == 1'd0));
end

always @ (*) begin
    ap_block_state31_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state31_pp4_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln91_reg_1173_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state33 = ((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_683 = ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_01001) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_689 = ((1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign feature_V_d0 = {{Input_1_V_TDATA_int_regslice[31:16]}};

assign grp_fu_778_p1 = sext_ln67_reg_979;

assign grp_fu_869_p1 = 51'd2251798421176320;

assign icmp_ln31_fu_520_p2 = ((i_1_reg_285 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_590_p2 = ((indvar_flatten_reg_296 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_596_p2 = ((j_2_reg_318 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_700_p2 = ((indvar_flatten9_reg_342 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_706_p2 = ((j_reg_364 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_799_p2 = ((indvar_flatten19_reg_375 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_805_p2 = ((j_1_reg_397 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_901_p2 = ((add_ln85_fu_895_p2 == 32'd4500) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_923_p2 = ((empty_18_reg_419 == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_941_p2 = ((ap_phi_mux_i_4_phi_fu_432_p4 == 8'd128) ? 1'b1 : 1'b0);

assign j_1_cast_fu_845_p1 = select_ln75_fu_811_p3;

assign j_2_cast_fu_636_p1 = select_ln49_fu_602_p3;

assign j_cast_fu_746_p1 = select_ln67_fu_712_p3;

assign or_ln40_fu_548_p2 = (shl_ln1_fu_530_p3 | 8'd1);

assign or_ln43_fu_559_p2 = (shl_ln1_reg_992 | 8'd2);

assign or_ln44_fu_574_p2 = (shl_ln1_reg_992 | 8'd3);

assign or_ln97_fu_958_p2 = (shl_ln96_fu_947_p2 | 8'd1);

assign p_Result_1_fu_543_p1 = Input_1_V_TDATA_int_regslice[15:0];

assign p_Result_3_fu_569_p1 = Input_1_V_TDATA_int_regslice[15:0];

assign p_mid1_fu_837_p3 = {{trunc_ln75_fu_833_p1}, {2'd0}};

assign p_mid2_fu_628_p3 = {{trunc_ln49_fu_624_p1}, {2'd0}};

assign p_mid_fu_738_p3 = {{trunc_ln67_fu_734_p1}, {2'd0}};

assign param_V_d0 = ($signed(reg_468) + $signed(tmp_V_1_reg_1141));

assign result_V_fu_689_p2 = (term_reg_1042 + result_V_1_reg_329);

assign scale_V_fu_504_p2 = (Input_2_V_TDATA_int_regslice - zext_ln703_fu_500_p1);

assign select_ln49_1_fu_616_p3 = ((icmp_ln52_fu_596_p2[0:0] == 1'b1) ? add_ln49_1_fu_610_p2 : ap_phi_mux_i_3_phi_fu_311_p4);

assign select_ln49_fu_602_p3 = ((icmp_ln52_fu_596_p2[0:0] == 1'b1) ? 3'd0 : j_2_reg_318);

assign select_ln67_1_fu_726_p3 = ((icmp_ln70_fu_706_p2[0:0] == 1'b1) ? add_ln67_1_fu_720_p2 : ap_phi_mux_i_phi_fu_357_p4);

assign select_ln67_fu_712_p3 = ((icmp_ln70_fu_706_p2[0:0] == 1'b1) ? 3'd0 : j_reg_364);

assign select_ln75_1_fu_825_p3 = ((icmp_ln78_fu_805_p2[0:0] == 1'b1) ? add_ln75_1_fu_819_p2 : ap_phi_mux_i_2_phi_fu_390_p4);

assign select_ln75_fu_811_p3 = ((icmp_ln78_fu_805_p2[0:0] == 1'b1) ? 3'd0 : j_1_reg_397);

assign sext_ln67_fu_510_p1 = $signed(scale_V_fu_504_p2);

assign shl_ln1_fu_530_p3 = {{trunc_ln39_fu_526_p1}, {2'd0}};

assign shl_ln728_1_fu_766_p3 = {{reg_463}, {7'd0}};

assign shl_ln728_2_fu_657_p3 = {{reg_463}, {7'd0}};

assign shl_ln96_fu_947_p2 = ap_phi_mux_i_4_phi_fu_432_p4 << 8'd1;

assign shl_ln_fu_492_p3 = {{training_label_V}, {19'd0}};

assign tmp_4_fu_478_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign trunc_ln39_fu_526_p1 = i_1_reg_285[5:0];

assign trunc_ln49_fu_624_p1 = select_ln49_1_fu_616_p3[5:0];

assign trunc_ln67_fu_734_p1 = select_ln67_1_fu_726_p3[5:0];

assign trunc_ln75_fu_833_p1 = select_ln75_1_fu_825_p3[5:0];

assign zext_ln1118_fu_861_p1 = add_ln80_reg_1110;

assign zext_ln340_1_fu_579_p1 = or_ln44_fu_574_p2;

assign zext_ln340_fu_554_p1 = or_ln40_fu_548_p2;

assign zext_ln640_1_fu_964_p1 = or_ln97_fu_958_p2;

assign zext_ln640_fu_953_p1 = shl_ln96_fu_947_p2;

assign zext_ln674_1_fu_564_p1 = or_ln43_fu_559_p2;

assign zext_ln674_fu_538_p1 = shl_ln1_fu_530_p3;

assign zext_ln703_fu_500_p1 = shl_ln_fu_492_p3;

assign zext_ln727_1_fu_652_p1 = add_ln54_reg_1012;

assign zext_ln727_fu_762_p1 = add_ln71_reg_1066;

always @ (posedge ap_clk) begin
    shl_ln1_reg_992[1:0] <= 2'b00;
    zext_ln727_reg_1076[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1076_pp2_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1076_pp2_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1076_pp2_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //dotProduct_2
