// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_2_1_data_2_1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.958250,HLS_SYN_LAT=2056,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=157,HLS_SYN_LUT=350,HLS_VERSION=2020_2}" *)

module data_2_1 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_pp2_stage0 = 11'd64;
parameter    ap_ST_fsm_pp2_stage1 = 11'd128;
parameter    ap_ST_fsm_pp2_stage2 = 11'd256;
parameter    ap_ST_fsm_pp2_stage3 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] theta_address0;
reg    theta_ce0;
reg    theta_we0;
reg   [31:0] theta_d0;
wire   [31:0] theta_q0;
reg   [9:0] theta_address1;
reg    theta_ce1;
wire   [31:0] theta_q1;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln15_fu_195_p2;
reg    Input_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln25_fu_212_p2;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln38_reg_310;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln38_reg_310_pp2_iter1_reg;
reg   [8:0] i_2_reg_172;
reg   [31:0] reg_183;
reg    ap_block_state8_pp2_stage1_iter0;
reg    ap_block_state8_io;
reg    ap_block_state12_pp2_stage1_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp2_stage1_11001;
reg    ap_block_state9_pp2_stage2_iter0;
reg    ap_block_state9_io;
reg    ap_block_pp2_stage2_11001;
wire   [9:0] add_ln15_fu_189_p2;
reg    ap_block_state2;
wire   [9:0] add_ln25_fu_206_p2;
reg    ap_block_state4;
wire   [8:0] add_ln38_fu_229_p2;
reg   [8:0] add_ln38_reg_305;
wire    ap_block_state7_pp2_stage0_iter0;
reg    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln38_fu_235_p2;
wire   [9:0] shl_ln_fu_245_p3;
reg   [9:0] shl_ln_reg_314;
reg   [31:0] tmp_1_reg_330;
reg   [31:0] tmp_3_reg_345;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_block_state10_pp2_stage3_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp2_stage3_subdone;
reg    ap_block_pp2_stage1_subdone;
reg   [9:0] i_reg_150;
reg   [9:0] i_1_reg_161;
wire    ap_CS_fsm_state3;
reg   [8:0] ap_phi_mux_i_2_phi_fu_176_p4;
wire   [63:0] zext_ln15_fu_201_p1;
wire   [63:0] zext_ln33_fu_224_p1;
wire   [63:0] zext_ln47_fu_253_p1;
wire   [63:0] zext_ln49_fu_264_p1;
wire   [63:0] zext_ln51_fu_274_p1;
wire   [63:0] zext_ln53_fu_284_p1;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_pp2_stage2_01001;
reg    ap_block_pp2_stage3_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp2_stage3_11001;
wire   [9:0] xor_ln33_fu_218_p2;
wire   [7:0] trunc_ln47_fu_241_p1;
wire   [9:0] or_ln49_fu_258_p2;
wire   [9:0] or_ln51_fu_269_p2;
wire   [9:0] or_ln53_fu_279_p2;
wire    ap_CS_fsm_state13;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg   [10:0] ap_NS_fsm;
reg    ap_block_pp2_stage2_subdone;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

data_2_1_theta #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
theta_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta_address0),
    .ce0(theta_ce0),
    .we0(theta_we0),
    .d0(theta_d0),
    .q0(theta_q0),
    .address1(theta_address1),
    .ce1(theta_ce1),
    .q1(theta_q1)
);

data_2_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_2_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

data_2_1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_161 <= 10'd0;
    end else if ((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (icmp_ln25_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_161 <= add_ln25_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        i_2_reg_172 <= 9'd0;
    end else if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_2_reg_172 <= add_ln38_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_150 <= 10'd0;
    end else if ((~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln15_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_150 <= add_ln15_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_310 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            reg_183 <= theta_q0;
        end else if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            reg_183 <= theta_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln38_reg_305 <= add_ln38_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln38_reg_310 <= icmp_ln38_fu_235_p2;
        icmp_ln38_reg_310_pp2_iter1_reg <= icmp_ln38_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln38_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        shl_ln_reg_314[9 : 2] <= shl_ln_fu_245_p3[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_1_reg_330 <= theta_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        tmp_3_reg_345 <= theta_q1;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln15_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (icmp_ln25_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        Output_1_V_TDATA_int_regslice = tmp_3_reg_345;
    end else if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage3_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
        Output_1_V_TDATA_int_regslice = reg_183;
    end else if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage2_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        Output_1_V_TDATA_int_regslice = tmp_1_reg_330;
    end else if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        Output_1_V_TDATA_int_regslice = theta_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = 32'd1025;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_235_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_310 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_176_p4 = add_ln38_reg_305;
    end else begin
        ap_phi_mux_i_2_phi_fu_176_p4 = i_2_reg_172;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        theta_address0 = zext_ln51_fu_274_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        theta_address0 = zext_ln49_fu_264_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        theta_address0 = zext_ln33_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        theta_address0 = zext_ln15_fu_201_p1;
    end else begin
        theta_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp2_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            theta_address1 = zext_ln53_fu_284_p1;
        end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            theta_address1 = zext_ln47_fu_253_p1;
        end else begin
            theta_address1 = 'bx;
        end
    end else begin
        theta_address1 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        theta_ce0 = 1'b1;
    end else begin
        theta_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        theta_ce1 = 1'b1;
    end else begin
        theta_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        theta_d0 = Input_2_V_TDATA_int_regslice;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        theta_d0 = Input_1_V_TDATA_int_regslice;
    end else begin
        theta_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (icmp_ln25_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln15_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        theta_we0 = 1'b1;
    end else begin
        theta_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln15_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln15_fu_195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (icmp_ln25_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice)) & (icmp_ln25_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln38_fu_235_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln38_fu_235_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln15_fu_189_p2 = (i_reg_150 + 10'd1);

assign add_ln25_fu_206_p2 = (i_1_reg_161 + 10'd1);

assign add_ln38_fu_229_p2 = (ap_phi_mux_i_2_phi_fu_176_p4 + 9'd1);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln38_reg_310 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0)))));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_01001 = ((icmp_ln38_reg_310 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_01001 = ((icmp_ln38_reg_310 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state10_pp2_stage3_iter0 = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter1 = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state12_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp2_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln38_reg_310_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln15_fu_195_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln25_fu_212_p2 == 1'd0) & (1'b0 == Input_2_V_TVALID_int_regslice));
end

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state8_pp2_stage1_iter0 = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state9_io = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state9_pp2_stage2_iter0 = ((icmp_ln38_reg_310 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln15_fu_195_p2 = ((i_reg_150 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_212_p2 = ((i_1_reg_161 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_235_p2 = ((ap_phi_mux_i_2_phi_fu_176_p4 == 9'd256) ? 1'b1 : 1'b0);

assign or_ln49_fu_258_p2 = (shl_ln_fu_245_p3 | 10'd1);

assign or_ln51_fu_269_p2 = (shl_ln_reg_314 | 10'd2);

assign or_ln53_fu_279_p2 = (shl_ln_reg_314 | 10'd3);

assign shl_ln_fu_245_p3 = {{trunc_ln47_fu_241_p1}, {2'd0}};

assign trunc_ln47_fu_241_p1 = ap_phi_mux_i_2_phi_fu_176_p4[7:0];

assign xor_ln33_fu_218_p2 = (i_1_reg_161 ^ 10'd512);

assign zext_ln15_fu_201_p1 = i_reg_150;

assign zext_ln33_fu_224_p1 = xor_ln33_fu_218_p2;

assign zext_ln47_fu_253_p1 = shl_ln_fu_245_p3;

assign zext_ln49_fu_264_p1 = or_ln49_fu_258_p2;

assign zext_ln51_fu_274_p1 = or_ln51_fu_269_p2;

assign zext_ln53_fu_284_p1 = or_ln53_fu_279_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_314[1:0] <= 2'b00;
end

endmodule //data_2_1
