// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_1_4_2_data_1_4_2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=596511,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=407,HLS_SYN_LUT=587,HLS_VERSION=2020_2}" *)

module data_1_4_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Input_3_V_TDATA,
        Input_3_V_TVALID,
        Input_3_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY,
        Output_3_V_TDATA,
        Output_3_V_TVALID,
        Output_3_V_TREADY
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_pp0_stage0 = 17'd2;
parameter    ap_ST_fsm_pp0_stage1 = 17'd4;
parameter    ap_ST_fsm_state6 = 17'd8;
parameter    ap_ST_fsm_pp1_stage0 = 17'd16;
parameter    ap_ST_fsm_pp1_stage1 = 17'd32;
parameter    ap_ST_fsm_state11 = 17'd64;
parameter    ap_ST_fsm_state12 = 17'd128;
parameter    ap_ST_fsm_state13 = 17'd256;
parameter    ap_ST_fsm_pp2_stage0 = 17'd512;
parameter    ap_ST_fsm_pp2_stage1 = 17'd1024;
parameter    ap_ST_fsm_state18 = 17'd2048;
parameter    ap_ST_fsm_state19 = 17'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 17'd8192;
parameter    ap_ST_fsm_pp3_stage1 = 17'd16384;
parameter    ap_ST_fsm_state24 = 17'd32768;
parameter    ap_ST_fsm_state25 = 17'd65536;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
input  [31:0] Input_3_V_TDATA;
input   Input_3_V_TVALID;
output   Input_3_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;
output  [31:0] Output_3_V_TDATA;
output   Output_3_V_TVALID;
input   Output_3_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] epoch;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln29_fu_238_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln34_fu_255_p2;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln34_reg_342;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] icmp_ln43_fu_267_p2;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_pp3_stage1;
reg   [0:0] icmp_ln43_reg_356;
reg    Input_2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln55_fu_214_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln55_reg_291;
reg    Input_3_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln63_fu_226_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln63_reg_310;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state13;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln34_reg_342_pp2_iter1_reg;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln43_reg_356_pp3_iter1_reg;
reg    Output_3_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln55_reg_291_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln63_reg_310_pp1_iter1_reg;
reg   [7:0] i_reg_120;
reg   [7:0] i_4_reg_131;
reg   [6:0] i_2_reg_153;
reg   [6:0] i_6_reg_164;
reg   [31:0] reg_186;
reg    ap_block_state20_pp3_stage0_iter0;
reg    ap_block_state22_pp3_stage0_iter1;
reg    ap_block_state22_io;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] reg_192;
reg    ap_block_state14_pp2_stage0_iter0;
reg    ap_block_state16_pp2_stage0_iter1;
reg    ap_block_state16_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state21_pp3_stage1_iter0;
reg    ap_block_state21_io;
reg    ap_block_state23_pp3_stage1_iter1;
reg    ap_block_state23_io;
reg    ap_block_pp3_stage1_11001;
wire   [0:0] icmp_ln25_fu_202_p2;
wire   [7:0] i_1_fu_208_p2;
reg   [7:0] i_1_reg_286;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] tmp_5_reg_295;
reg   [31:0] tmp_6_reg_300;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] i_5_fu_220_p2;
reg   [7:0] i_5_reg_305;
reg    ap_block_state7_pp1_stage0_iter0;
reg    ap_block_state9_pp1_stage0_iter1;
reg    ap_block_state9_io;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] tmp_7_reg_314;
reg   [31:0] tmp_8_reg_319;
reg    ap_block_state8_pp1_stage1_iter0;
reg    ap_block_state8_io;
reg    ap_block_state10_pp1_stage1_iter1;
reg    ap_block_state10_io;
reg    ap_block_pp1_stage1_11001;
wire   [12:0] training_id_1_fu_232_p2;
reg   [12:0] training_id_1_reg_324;
reg    ap_block_state12;
reg    ap_block_state12_io;
wire   [31:0] add_ln52_fu_244_p2;
wire   [6:0] i_3_fu_249_p2;
reg   [6:0] i_3_reg_337;
reg   [31:0] tmp_2_reg_346;
reg    ap_block_state15_pp2_stage1_iter0;
reg    ap_block_state15_io;
reg    ap_block_state17_pp2_stage1_iter1;
reg    ap_block_state17_io;
reg    ap_block_pp2_stage1_11001;
wire   [6:0] i_7_fu_261_p2;
reg   [6:0] i_7_reg_351;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state6;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state14;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state20;
reg    ap_block_pp3_stage1_subdone;
reg   [7:0] ap_phi_mux_i_phi_fu_124_p4;
reg   [7:0] ap_phi_mux_i_4_phi_fu_135_p4;
reg   [12:0] training_id_reg_142;
wire    ap_CS_fsm_state24;
reg   [6:0] ap_phi_mux_i_2_phi_fu_157_p4;
reg   [6:0] ap_phi_mux_i_6_phi_fu_168_p4;
reg   [31:0] storemerge_reg_175;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state25;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
wire    regslice_both_Output_3_V_U_apdone_blk;
reg    ap_block_state25;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage1_01001;
reg    ap_block_pp3_stage0_01001;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
wire    regslice_both_Input_3_V_U_apdone_blk;
wire   [31:0] Input_3_V_TDATA_int_regslice;
wire    Input_3_V_TVALID_int_regslice;
reg    Input_3_V_TREADY_int_regslice;
wire    regslice_both_Input_3_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg   [31:0] Output_2_V_TDATA_int_regslice;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
reg   [31:0] Output_3_V_TDATA_int_regslice;
reg    Output_3_V_TVALID_int_regslice;
wire    Output_3_V_TREADY_int_regslice;
wire    regslice_both_Output_3_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_3_V_TDATA),
    .vld_in(Input_3_V_TVALID),
    .ack_in(regslice_both_Input_3_V_U_ack_in),
    .data_out(Input_3_V_TDATA_int_regslice),
    .vld_out(Input_3_V_TVALID_int_regslice),
    .ack_out(Input_3_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_3_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_2_V_TDATA_int_regslice),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_3_V_TDATA_int_regslice),
    .vld_in(Output_3_V_TVALID_int_regslice),
    .ack_in(Output_3_V_TREADY_int_regslice),
    .data_out(Output_3_V_TDATA),
    .vld_out(regslice_both_Output_3_V_U_vld_out),
    .ack_out(Output_3_V_TREADY),
    .apdone_blk(regslice_both_Output_3_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln25_fu_202_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln25_fu_202_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state14))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_2_reg_153 <= i_3_reg_337;
    end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
        i_2_reg_153 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_131 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_310 == 1'd0))) begin
        i_4_reg_131 <= i_5_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_reg_356 == 1'd0))) begin
        i_6_reg_164 <= i_7_reg_351;
    end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
        i_6_reg_164 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_202_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_120 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_291 == 1'd0))) begin
        i_reg_120 <= i_1_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        storemerge_reg_175 <= 32'd0;
    end else if ((~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        storemerge_reg_175 <= add_ln52_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_202_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        training_id_reg_142 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        training_id_reg_142 <= training_id_1_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_Output_3_V_U_apdone_blk == 1'b1) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state25))) begin
        epoch <= storemerge_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_1_reg_286 <= i_1_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_3_reg_337 <= i_3_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_5_reg_305 <= i_5_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        i_7_reg_351 <= i_7_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln34_reg_342 <= icmp_ln34_fu_255_p2;
        icmp_ln34_reg_342_pp2_iter1_reg <= icmp_ln34_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln43_reg_356 <= icmp_ln43_fu_267_p2;
        icmp_ln43_reg_356_pp3_iter1_reg <= icmp_ln43_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_291 <= icmp_ln55_fu_214_p2;
        icmp_ln55_reg_291_pp0_iter1_reg <= icmp_ln55_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln63_reg_310 <= icmp_ln63_fu_226_p2;
        icmp_ln63_reg_310_pp1_iter1_reg <= icmp_ln63_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        reg_186 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln34_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        reg_192 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_2_reg_346 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_5_reg_295 <= Input_2_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_6_reg_300 <= Input_2_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_7_reg_314 <= Input_3_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_8_reg_319 <= Input_3_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (1'b1 == ap_CS_fsm_state12))) begin
        training_id_1_reg_324 <= training_id_1_fu_232_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln34_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | (~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln34_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Input_3_V_TDATA_blk_n = Input_3_V_TVALID_int_regslice;
    end else begin
        Input_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Input_3_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_3_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        Output_1_V_TDATA_int_regslice = tmp_2_reg_346;
    end else if (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        Output_1_V_TDATA_int_regslice = reg_192;
    end else if ((~(((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        Output_1_V_TDATA_int_regslice = Input_1_V_TDATA_int_regslice;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | (~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | ((1'b0 == ap_block_pp3_stage1) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_reg_356 == 1'd0)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_reg_356 == 1'd0))) begin
        Output_2_V_TDATA_int_regslice = reg_192;
    end else if ((((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_pp3_stage1_01001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        Output_2_V_TDATA_int_regslice = reg_186;
    end else begin
        Output_2_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln43_reg_356 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_reg_356 == 1'd0)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_291 == 1'd0)))) begin
        Output_3_V_TDATA_blk_n = Output_3_V_TREADY_int_regslice;
    end else begin
        Output_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_310 == 1'd0))) begin
        Output_3_V_TDATA_int_regslice = tmp_8_reg_319;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        Output_3_V_TDATA_int_regslice = tmp_7_reg_314;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_291 == 1'd0))) begin
        Output_3_V_TDATA_int_regslice = tmp_6_reg_300;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        Output_3_V_TDATA_int_regslice = tmp_5_reg_295;
    end else begin
        Output_3_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln63_reg_310 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_291 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_291 == 1'd0)))) begin
        Output_3_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_3_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_226_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_255_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_267_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_3_V_U_apdone_blk == 1'b1) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_157_p4 = i_3_reg_337;
    end else begin
        ap_phi_mux_i_2_phi_fu_157_p4 = i_2_reg_153;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_310 == 1'd0))) begin
        ap_phi_mux_i_4_phi_fu_135_p4 = i_5_reg_305;
    end else begin
        ap_phi_mux_i_4_phi_fu_135_p4 = i_4_reg_131;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln43_reg_356 == 1'd0))) begin
        ap_phi_mux_i_6_phi_fu_168_p4 = i_7_reg_351;
    end else begin
        ap_phi_mux_i_6_phi_fu_168_p4 = i_6_reg_164;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_291 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_124_p4 = i_1_reg_286;
    end else begin
        ap_phi_mux_i_phi_fu_124_p4 = i_reg_120;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_3_V_U_apdone_blk == 1'b1) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln25_fu_202_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((icmp_ln25_fu_202_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln55_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln55_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln63_fu_226_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln63_fu_226_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state12 : begin
            if ((~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if ((~((1'b1 == ap_block_state12_io) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln29_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln34_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((icmp_ln34_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln43_fu_267_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln43_fu_267_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state25 : begin
            if ((~((regslice_both_Output_3_V_U_apdone_blk == 1'b1) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Input_3_V_TREADY = regslice_both_Input_3_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign Output_3_V_TVALID = regslice_both_Output_3_V_U_vld_out;

assign add_ln52_fu_244_p2 = (epoch + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_reg_291 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_reg_291 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_reg_291 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_reg_291 == 1'd0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_fu_226_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_reg_310 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_reg_310 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_reg_310 == 1'd0)))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln34_fu_255_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((icmp_ln34_fu_255_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((icmp_ln34_fu_255_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0)))));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln43_reg_356 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state22_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_fu_267_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state22_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)))));
end

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_reg_356 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage1_11001 = (((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state23_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_reg_356 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = (((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state23_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_reg_356 == 1'd0)))));
end

always @ (*) begin
    ap_block_state10_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp1_stage1_iter1 = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12 = (((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state12_io = ((icmp_ln29_fu_238_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state14_pp2_stage0_iter0 = ((icmp_ln34_fu_255_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state15_io = ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state15_pp2_stage1_iter0 = (((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state16_io = ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state16_pp2_stage0_iter1 = ((icmp_ln34_reg_342 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state17_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp2_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln34_reg_342_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp3_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_fu_267_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state21_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0));
end

always @ (*) begin
    ap_block_state21_pp3_stage1_iter0 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln43_reg_356 == 1'd0)));
end

always @ (*) begin
    ap_block_state22_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp3_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356 == 1'd0));
end

always @ (*) begin
    ap_block_state23_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp3_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_356_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state25 = ((regslice_both_Output_3_V_U_apdone_blk == 1'b1) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_fu_214_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln55_reg_291 == 1'd0)));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291 == 1'd0));
end

always @ (*) begin
    ap_block_state5_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln55_reg_291_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter0 = ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_fu_226_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp1_stage1_iter0 = (((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln63_reg_310 == 1'd0)));
end

always @ (*) begin
    ap_block_state9_io = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp1_stage0_iter1 = ((1'b0 == Output_3_V_TREADY_int_regslice) & (icmp_ln63_reg_310 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_208_p2 = (ap_phi_mux_i_phi_fu_124_p4 + 8'd1);

assign i_3_fu_249_p2 = (ap_phi_mux_i_2_phi_fu_157_p4 + 7'd1);

assign i_5_fu_220_p2 = (ap_phi_mux_i_4_phi_fu_135_p4 + 8'd1);

assign i_7_fu_261_p2 = (ap_phi_mux_i_6_phi_fu_168_p4 + 7'd1);

assign icmp_ln25_fu_202_p2 = (($signed(epoch) < $signed(32'd5)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_238_p2 = ((training_id_reg_142 == 13'd4500) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_255_p2 = ((ap_phi_mux_i_2_phi_fu_157_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_267_p2 = ((ap_phi_mux_i_6_phi_fu_168_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_214_p2 = ((ap_phi_mux_i_phi_fu_124_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_226_p2 = ((ap_phi_mux_i_4_phi_fu_135_p4 == 8'd128) ? 1'b1 : 1'b0);

assign training_id_1_fu_232_p2 = (training_id_reg_142 + 13'd1);

endmodule //data_1_4_2
