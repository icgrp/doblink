// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sigmoid_axi_Sigmoid_axi,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.288125,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=29,HLS_SYN_LUT=277,HLS_VERSION=2020_2}" *)

module Sigmoid_axi (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] lut_i_address0;
reg    lut_i_ce0;
wire   [9:0] lut_i_q0;
reg    Input_1_V_TDATA_blk_n;
reg    Input_2_V_TDATA_blk_n;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    Output_2_V_TDATA_blk_n;
wire   [0:0] icmp_ln1494_fu_125_p2;
reg   [0:0] icmp_ln1494_reg_244;
wire   [0:0] icmp_ln1495_fu_131_p2;
reg   [0:0] icmp_ln1495_reg_250;
wire   [10:0] trunc_ln1_fu_137_p4;
reg   [10:0] trunc_ln1_reg_255;
reg   [0:0] tmp_reg_260;
reg   [10:0] trunc_ln_cast_reg_265;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln2156_1_fu_238_p1;
wire   [63:0] zext_ln534_fu_190_p1;
reg    ap_block_state1;
reg    ap_block_state3;
reg    ap_block_state3_io;
wire   [26:0] trunc_ln703_1_fu_109_p1;
wire   [26:0] trunc_ln703_fu_105_p1;
wire   [31:0] exponent_V_fu_113_p2;
wire   [26:0] add_ln2131_fu_119_p2;
wire   [21:0] in_V_cast_fu_147_p3;
wire   [21:0] in_V_fu_163_p2;
wire   [10:0] index_V_fu_179_p2;
wire   [10:0] index_V_1_fu_184_p3;
wire   [18:0] result_V_fu_195_p3;
wire   [0:0] xor_ln1494_fu_207_p2;
wire   [0:0] and_ln1495_fu_212_p2;
wire   [0:0] or_ln1495_fu_225_p2;
wire   [19:0] select_ln1495_fu_217_p3;
wire   [19:0] zext_ln2156_fu_203_p1;
wire   [19:0] result_V_2_fu_230_p3;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state4;
reg    ap_block_state4_io;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

Sigmoid_axi_lut_i #(
    .DataWidth( 10 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
lut_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_i_address0),
    .ce0(lut_i_ce0),
    .q0(lut_i_q0)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2156_1_fu_238_p1),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2156_1_fu_238_p1),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1494_reg_244 <= icmp_ln1494_fu_125_p2;
        icmp_ln1495_reg_250 <= icmp_ln1495_fu_131_p2;
        tmp_reg_260 <= add_ln2131_fu_119_p2[32'd26];
        trunc_ln1_reg_255 <= {{add_ln2131_fu_119_p2[21:11]}};
        trunc_ln_cast_reg_265 <= {{in_V_fu_163_p2[21:11]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state4_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state4_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lut_i_ce0 = 1'b1;
    end else begin
        lut_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state4_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln2131_fu_119_p2 = (trunc_ln703_1_fu_109_p1 + trunc_ln703_fu_105_p1);

assign and_ln1495_fu_212_p2 = (xor_ln1494_fu_207_p2 & icmp_ln1495_reg_250);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exponent_V_fu_113_p2 = (Input_2_V_TDATA_int_regslice + Input_1_V_TDATA_int_regslice);

assign icmp_ln1494_fu_125_p2 = (($signed(exponent_V_fu_113_p2) > $signed(32'd2097152)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_131_p2 = (($signed(exponent_V_fu_113_p2) < $signed(32'd4292870144)) ? 1'b1 : 1'b0);

assign in_V_cast_fu_147_p3 = {{trunc_ln1_fu_137_p4}, {11'd0}};

assign in_V_fu_163_p2 = (22'd0 - in_V_cast_fu_147_p3);

assign index_V_1_fu_184_p3 = ((tmp_reg_260[0:0] == 1'b1) ? index_V_fu_179_p2 : trunc_ln1_reg_255);

assign index_V_fu_179_p2 = (11'd0 - trunc_ln_cast_reg_265);

assign lut_i_address0 = zext_ln534_fu_190_p1;

assign or_ln1495_fu_225_p2 = (icmp_ln1494_reg_244 | and_ln1495_fu_212_p2);

assign result_V_2_fu_230_p3 = ((or_ln1495_fu_225_p2[0:0] == 1'b1) ? select_ln1495_fu_217_p3 : zext_ln2156_fu_203_p1);

assign result_V_fu_195_p3 = {{lut_i_q0}, {9'd0}};

assign select_ln1495_fu_217_p3 = ((and_ln1495_fu_212_p2[0:0] == 1'b1) ? 20'd0 : 20'd524288);

assign trunc_ln1_fu_137_p4 = {{add_ln2131_fu_119_p2[21:11]}};

assign trunc_ln703_1_fu_109_p1 = Input_2_V_TDATA_int_regslice[26:0];

assign trunc_ln703_fu_105_p1 = Input_1_V_TDATA_int_regslice[26:0];

assign xor_ln1494_fu_207_p2 = (icmp_ln1494_reg_244 ^ 1'd1);

assign zext_ln2156_1_fu_238_p1 = result_V_2_fu_230_p3;

assign zext_ln2156_fu_203_p1 = result_V_fu_195_p3;

assign zext_ln534_fu_190_p1 = index_V_1_fu_184_p3;

endmodule //Sigmoid_axi
