// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn5_update_knn9_sub (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_din,
        Output_1_full_n,
        Output_1_write
);

parameter    ap_ST_fsm_state1 = 77'd1;
parameter    ap_ST_fsm_state2 = 77'd2;
parameter    ap_ST_fsm_state3 = 77'd4;
parameter    ap_ST_fsm_state4 = 77'd8;
parameter    ap_ST_fsm_state5 = 77'd16;
parameter    ap_ST_fsm_state6 = 77'd32;
parameter    ap_ST_fsm_state7 = 77'd64;
parameter    ap_ST_fsm_state8 = 77'd128;
parameter    ap_ST_fsm_state9 = 77'd256;
parameter    ap_ST_fsm_state10 = 77'd512;
parameter    ap_ST_fsm_pp1_stage0 = 77'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 77'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 77'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 77'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 77'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 77'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 77'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 77'd131072;
parameter    ap_ST_fsm_state20 = 77'd262144;
parameter    ap_ST_fsm_state21 = 77'd524288;
parameter    ap_ST_fsm_state22 = 77'd1048576;
parameter    ap_ST_fsm_state23 = 77'd2097152;
parameter    ap_ST_fsm_state24 = 77'd4194304;
parameter    ap_ST_fsm_state25 = 77'd8388608;
parameter    ap_ST_fsm_state26 = 77'd16777216;
parameter    ap_ST_fsm_state27 = 77'd33554432;
parameter    ap_ST_fsm_state28 = 77'd67108864;
parameter    ap_ST_fsm_state29 = 77'd134217728;
parameter    ap_ST_fsm_state30 = 77'd268435456;
parameter    ap_ST_fsm_state31 = 77'd536870912;
parameter    ap_ST_fsm_state32 = 77'd1073741824;
parameter    ap_ST_fsm_state33 = 77'd2147483648;
parameter    ap_ST_fsm_state34 = 77'd4294967296;
parameter    ap_ST_fsm_state35 = 77'd8589934592;
parameter    ap_ST_fsm_state36 = 77'd17179869184;
parameter    ap_ST_fsm_state37 = 77'd34359738368;
parameter    ap_ST_fsm_state38 = 77'd68719476736;
parameter    ap_ST_fsm_state39 = 77'd137438953472;
parameter    ap_ST_fsm_state40 = 77'd274877906944;
parameter    ap_ST_fsm_state41 = 77'd549755813888;
parameter    ap_ST_fsm_state42 = 77'd1099511627776;
parameter    ap_ST_fsm_state43 = 77'd2199023255552;
parameter    ap_ST_fsm_state44 = 77'd4398046511104;
parameter    ap_ST_fsm_state45 = 77'd8796093022208;
parameter    ap_ST_fsm_state46 = 77'd17592186044416;
parameter    ap_ST_fsm_state47 = 77'd35184372088832;
parameter    ap_ST_fsm_state48 = 77'd70368744177664;
parameter    ap_ST_fsm_state49 = 77'd140737488355328;
parameter    ap_ST_fsm_state50 = 77'd281474976710656;
parameter    ap_ST_fsm_state51 = 77'd562949953421312;
parameter    ap_ST_fsm_state52 = 77'd1125899906842624;
parameter    ap_ST_fsm_state53 = 77'd2251799813685248;
parameter    ap_ST_fsm_state54 = 77'd4503599627370496;
parameter    ap_ST_fsm_state55 = 77'd9007199254740992;
parameter    ap_ST_fsm_state56 = 77'd18014398509481984;
parameter    ap_ST_fsm_state57 = 77'd36028797018963968;
parameter    ap_ST_fsm_state58 = 77'd72057594037927936;
parameter    ap_ST_fsm_state59 = 77'd144115188075855872;
parameter    ap_ST_fsm_state60 = 77'd288230376151711744;
parameter    ap_ST_fsm_state61 = 77'd576460752303423488;
parameter    ap_ST_fsm_state62 = 77'd1152921504606846976;
parameter    ap_ST_fsm_state63 = 77'd2305843009213693952;
parameter    ap_ST_fsm_state64 = 77'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 77'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 77'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 77'd36893488147419103232;
parameter    ap_ST_fsm_state68 = 77'd73786976294838206464;
parameter    ap_ST_fsm_state69 = 77'd147573952589676412928;
parameter    ap_ST_fsm_state70 = 77'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 77'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_state73 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_state74 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_state75 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_state76 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_state77 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_state78 = 77'd75557863725914323419136;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_din;
input   Output_1_full_n;
output   Output_1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[31:0] Output_1_din;
reg Output_1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] index9;
reg   [31:0] knn_set9_0;
reg   [31:0] knn_set9_1;
reg   [31:0] knn_set9_2;
reg   [31:0] knn_set9_3;
reg   [31:0] knn_set9_4;
reg   [31:0] knn_set9_5;
reg   [8:0] training_set9_V_0_address0;
reg    training_set9_V_0_ce0;
reg    training_set9_V_0_we0;
wire   [255:0] training_set9_V_0_q0;
reg   [8:0] training_set9_V_1_address0;
reg    training_set9_V_1_ce0;
reg    training_set9_V_1_we0;
wire   [255:0] training_set9_V_1_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln139_fu_480_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln153_fu_536_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln153_reg_1227;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg    Output_1_blk_n;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
reg   [9:0] i_1_reg_244;
reg   [31:0] reg_436;
reg    ap_block_state2;
reg    ap_block_state11_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state12_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state13_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state14_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state15_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state16_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state17_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state18_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_state20;
reg   [31:0] reg_442;
reg   [31:0] reg_446;
reg   [31:0] reg_450;
reg   [31:0] reg_454;
reg   [31:0] reg_458;
reg   [31:0] reg_462;
wire   [0:0] index9_load_load_fu_466_p1;
reg   [0:0] index9_load_reg_1190;
wire   [9:0] add_ln139_fu_470_p2;
reg   [9:0] add_ln139_reg_1194;
wire   [8:0] empty_fu_476_p1;
reg   [8:0] empty_reg_1199;
wire   [0:0] icmp_ln414_fu_486_p2;
reg   [0:0] icmp_ln414_reg_1207;
wire   [8:0] add_ln414_fu_492_p2;
reg   [8:0] add_ln414_reg_1212;
wire   [8:0] select_ln414_fu_498_p3;
reg   [8:0] select_ln414_reg_1217;
wire   [9:0] i_2_fu_530_p2;
reg   [9:0] i_2_reg_1222;
reg   [31:0] tmp_V_60_reg_1273;
reg   [31:0] tmp_V_61_reg_1278;
reg   [31:0] tmp_V_62_reg_1284;
reg   [31:0] tmp_V_63_reg_1290;
reg   [31:0] tmp_V_43_reg_1296;
reg   [31:0] tmp_V_44_reg_1301;
wire   [255:0] p_Result_18_fu_614_p9;
reg   [255:0] p_Result_18_reg_1306;
wire   [8:0] add_ln248_fu_633_p2;
reg   [8:0] add_ln248_reg_1311;
wire    ap_CS_fsm_state36;
wire   [9:0] zext_ln248_fu_639_p1;
reg   [9:0] zext_ln248_reg_1316;
wire   [0:0] icmp_ln248_fu_643_p2;
wire   [1:0] add_ln250_fu_649_p2;
reg   [1:0] add_ln250_reg_1325;
wire    ap_CS_fsm_state37;
wire   [15:0] add_ln252_1_fu_665_p2;
reg   [15:0] add_ln252_1_reg_1333;
wire   [0:0] icmp_ln250_fu_659_p2;
wire   [2:0] sub_ln253_fu_691_p2;
reg   [2:0] sub_ln253_reg_1343;
reg   [8:0] trunc_ln_reg_1348;
wire    ap_CS_fsm_state40;
wire   [9:0] add_ln252_fu_709_p2;
reg   [9:0] add_ln252_reg_1353;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln252_fu_719_p2;
reg   [0:0] icmp_ln252_reg_1359;
wire    ap_CS_fsm_state42;
wire   [9:0] grp_fu_714_p2;
reg   [9:0] urem_ln252_reg_1364;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
reg   [255:0] training_set9_V_0_load_reg_1379;
wire    ap_CS_fsm_state58;
reg   [255:0] training_set9_V_1_load_reg_1384;
wire   [255:0] select_ln252_fu_729_p3;
reg   [255:0] select_ln252_reg_1389;
wire    ap_CS_fsm_state59;
reg   [31:0] knn_set9_0_ret_reg_1412;
wire    ap_CS_fsm_state60;
reg   [31:0] knn_set9_1_ret_reg_1418;
reg   [31:0] knn_set9_2_ret_reg_1424;
reg   [31:0] knn_set9_3_ret_reg_1430;
reg   [31:0] knn_set9_4_ret_reg_1436;
reg   [31:0] knn_set9_5_ret_reg_1442;
wire   [2:0] add_ln69_fu_849_p2;
reg   [2:0] add_ln69_reg_1448;
wire    ap_CS_fsm_state62;
wire   [2:0] empty_28_fu_871_p2;
reg   [2:0] empty_28_reg_1453;
wire   [0:0] icmp_ln71_fu_883_p2;
reg   [0:0] icmp_ln71_reg_1461;
wire   [0:0] icmp_ln69_fu_877_p2;
wire   [1:0] select_ln69_fu_889_p3;
reg   [1:0] select_ln69_reg_1466;
wire   [1:0] add_ln69_1_fu_897_p2;
reg   [1:0] add_ln69_1_reg_1472;
wire   [0:0] empty_30_fu_903_p1;
reg   [0:0] empty_30_reg_1477;
wire   [1:0] select_ln69_2_fu_907_p3;
reg   [1:0] select_ln69_2_reg_1482;
wire   [2:0] p_mid1_fu_925_p2;
reg   [2:0] p_mid1_reg_1487;
wire    ap_CS_fsm_state63;
wire   [2:0] p_t_fu_939_p2;
reg   [2:0] p_t_reg_1492;
wire    ap_CS_fsm_state64;
wire   [1:0] add_ln71_fu_945_p2;
reg   [1:0] add_ln71_reg_1497;
wire   [31:0] min_distance_list_0_fu_968_p8;
reg   [31:0] min_distance_list_0_reg_1502;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln78_fu_985_p2;
reg   [0:0] icmp_ln78_reg_1515;
wire    ap_CS_fsm_state66;
wire   [0:0] icmp_ln78_1_fu_990_p2;
reg   [0:0] icmp_ln78_1_reg_1521;
wire   [5:0] select_ln79_fu_1014_p3;
reg   [5:0] select_ln79_reg_1526;
wire    ap_CS_fsm_state67;
wire   [0:0] icmp_ln78_2_fu_1022_p2;
reg   [0:0] icmp_ln78_2_reg_1531;
reg   [3:0] tmp_reg_1536;
wire   [0:0] and_ln79_1_fu_1042_p2;
reg   [0:0] and_ln79_1_reg_1541;
wire    ap_CS_fsm_state68;
wire   [31:0] select_ln88_fu_1088_p3;
reg   [31:0] select_ln88_reg_1549;
wire    ap_CS_fsm_state69;
wire   [31:0] select_ln88_1_fu_1096_p3;
reg   [31:0] select_ln88_1_reg_1554;
wire   [31:0] select_ln88_2_fu_1104_p3;
reg   [31:0] select_ln88_2_reg_1559;
wire   [0:0] icmp_ln88_1_fu_1112_p2;
reg   [0:0] icmp_ln88_1_reg_1564;
wire   [0:0] icmp_ln93_fu_1118_p2;
reg   [0:0] icmp_ln93_reg_1574;
wire   [31:0] select_ln88_3_fu_1143_p3;
wire    ap_CS_fsm_state70;
wire   [31:0] select_ln88_4_fu_1150_p3;
wire   [31:0] select_ln88_5_fu_1157_p3;
wire   [31:0] select_ln93_6_fu_1164_p3;
wire   [31:0] select_ln93_7_fu_1170_p3;
wire   [31:0] select_ln93_8_fu_1176_p3;
wire    ap_CS_fsm_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_block_pp1_stage7_subdone;
wire    grp_update_knn_fu_417_ap_start;
wire    grp_update_knn_fu_417_ap_done;
wire    grp_update_knn_fu_417_ap_idle;
wire    grp_update_knn_fu_417_ap_ready;
wire   [31:0] grp_update_knn_fu_417_ap_return_0;
wire   [31:0] grp_update_knn_fu_417_ap_return_1;
wire   [31:0] grp_update_knn_fu_417_ap_return_2;
wire   [31:0] grp_update_knn_fu_417_ap_return_3;
wire   [31:0] grp_update_knn_fu_417_ap_return_4;
wire   [31:0] grp_update_knn_fu_417_ap_return_5;
reg   [9:0] i_reg_233;
reg    ap_block_state1;
reg   [9:0] ap_phi_mux_i_1_phi_fu_248_p4;
reg   [8:0] i_3_reg_255;
reg   [1:0] j_reg_266;
wire    ap_CS_fsm_state61;
reg   [15:0] phi_mul_reg_277;
reg   [2:0] indvar_flatten_reg_288;
reg   [1:0] i_4_reg_299;
reg   [31:0] min_distance_list_2_1_reg_310;
reg   [31:0] min_distance_list_1_1_reg_320;
reg   [31:0] min_distance_list_1_1_25_reg_330;
reg   [1:0] j_1_reg_340;
reg   [31:0] p_0119_reg_351;
reg   [31:0] p_0116_reg_362;
reg   [31:0] p_0118_reg_373;
reg   [31:0] p_0_reg_384;
reg   [31:0] p_0120_reg_395;
reg   [31:0] min_distance_list_2_1_26_reg_406;
reg    grp_update_knn_fu_417_ap_start_reg;
wire   [63:0] zext_ln414_fu_503_p1;
wire   [63:0] zext_ln252_1_fu_724_p1;
reg   [31:0] knn_set9_0_load_1_fu_152;
reg   [31:0] knn_set9_1_load_1_fu_156;
reg   [31:0] knn_set9_2_load_1_fu_160;
reg   [31:0] knn_set9_3_load_1_fu_164;
reg   [31:0] knn_set9_4_load_1_fu_168;
reg   [31:0] knn_set9_5_load_1_fu_172;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [255:0] p_Result_s_fu_508_p9;
wire    ap_CS_fsm_state57;
wire   [14:0] empty_24_fu_671_p1;
wire   [0:0] trunc_ln253_fu_679_p1;
wire   [2:0] shl_ln_fu_683_p3;
wire   [2:0] zext_ln250_fu_655_p1;
wire   [30:0] grp_fu_1183_p2;
wire   [9:0] zext_ln252_fu_706_p1;
wire   [0:0] empty_27_fu_859_p1;
wire   [2:0] p_shl_fu_863_p3;
wire   [2:0] zext_ln69_fu_855_p1;
wire   [2:0] p_shl14_mid1_fu_918_p3;
wire   [2:0] zext_ln69_1_fu_915_p1;
wire   [2:0] select_ln69_1_fu_931_p3;
wire   [2:0] j_1_cast_fu_936_p1;
wire   [0:0] xor_ln80_fu_995_p2;
wire   [0:0] and_ln79_fu_1000_p2;
wire   [0:0] or_ln79_fu_1009_p2;
wire   [5:0] zext_ln79_fu_1005_p1;
wire   [0:0] icmp_ln80_fu_1037_p2;
wire   [5:0] select_ln79_1_fu_1047_p3;
wire   [4:0] tmp_1_fu_1053_p4;
wire   [0:0] icmp_ln88_fu_1063_p2;
wire   [31:0] select_ln93_fu_1069_p3;
wire   [31:0] select_ln93_1_fu_1075_p3;
wire   [31:0] select_ln93_2_fu_1082_p3;
wire   [31:0] select_ln93_3_fu_1124_p3;
wire   [31:0] select_ln93_4_fu_1130_p3;
wire   [31:0] select_ln93_5_fu_1137_p3;
wire   [14:0] grp_fu_1183_p0;
wire   [16:0] grp_fu_1183_p1;
reg   [76:0] ap_NS_fsm;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire   [30:0] grp_fu_1183_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 77'd1;
#0 index9 = 1'd0;
#0 knn_set9_0 = 32'd0;
#0 knn_set9_1 = 32'd0;
#0 knn_set9_2 = 32'd0;
#0 knn_set9_3 = 32'd0;
#0 knn_set9_4 = 32'd0;
#0 knn_set9_5 = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_update_knn_fu_417_ap_start_reg = 1'b0;
end

update_knn5_update_knn9_sub_training_set9_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set9_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set9_V_0_address0),
    .ce0(training_set9_V_0_ce0),
    .we0(training_set9_V_0_we0),
    .d0(p_Result_s_fu_508_p9),
    .q0(training_set9_V_0_q0)
);

update_knn5_update_knn9_sub_training_set9_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set9_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set9_V_1_address0),
    .ce0(training_set9_V_1_ce0),
    .we0(training_set9_V_1_we0),
    .d0(p_Result_s_fu_508_p9),
    .q0(training_set9_V_1_q0)
);

update_knn5_update_knn grp_update_knn_fu_417(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_knn_fu_417_ap_start),
    .ap_done(grp_update_knn_fu_417_ap_done),
    .ap_idle(grp_update_knn_fu_417_ap_idle),
    .ap_ready(grp_update_knn_fu_417_ap_ready),
    .test_inst(p_Result_18_reg_1306),
    .train_inst(select_ln252_reg_1389),
    .p_read(knn_set9_0),
    .min_distances_read(knn_set9_0),
    .p_read1(knn_set9_1),
    .min_distances12_read(knn_set9_1),
    .p_read2(knn_set9_2),
    .min_distances2_read(knn_set9_2),
    .p_read3(knn_set9_3),
    .min_distances3_read(knn_set9_3),
    .p_read4(knn_set9_4),
    .min_distances4_read(knn_set9_4),
    .p_read5(knn_set9_5),
    .min_distances5_read(knn_set9_5),
    .min_distances_offset(sub_ln253_reg_1343),
    .ap_return_0(grp_update_knn_fu_417_ap_return_0),
    .ap_return_1(grp_update_knn_fu_417_ap_return_1),
    .ap_return_2(grp_update_knn_fu_417_ap_return_2),
    .ap_return_3(grp_update_knn_fu_417_ap_return_3),
    .ap_return_4(grp_update_knn_fu_417_ap_return_4),
    .ap_return_5(grp_update_knn_fu_417_ap_return_5)
);

update_knn5_urem_10ns_10ns_10_14_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
urem_10ns_10ns_10_14_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln252_reg_1353),
    .din1(10'd450),
    .ce(1'b1),
    .dout(grp_fu_714_p2)
);

update_knn5_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U31(
    .din0(knn_set9_0_load_1_fu_152),
    .din1(knn_set9_1_load_1_fu_156),
    .din2(knn_set9_2_load_1_fu_160),
    .din3(knn_set9_3_load_1_fu_164),
    .din4(knn_set9_4_load_1_fu_168),
    .din5(knn_set9_5_load_1_fu_172),
    .din6(p_t_reg_1492),
    .dout(min_distance_list_0_fu_968_p8)
);

update_knn5_mul_mul_15ns_17ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 31 ))
mul_mul_15ns_17ns_31_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1183_p0),
    .din1(grp_fu_1183_p1),
    .ce(1'b1),
    .dout(grp_fu_1183_p2)
);

update_knn5_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage7_subdone) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_knn_fu_417_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            grp_update_knn_fu_417_ap_start_reg <= 1'b1;
        end else if ((grp_update_knn_fu_417_ap_ready == 1'b1)) begin
            grp_update_knn_fu_417_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_244 <= 10'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_244 <= i_2_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_3_reg_255 <= 9'd0;
    end else if (((icmp_ln250_fu_659_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_3_reg_255 <= add_ln248_reg_1311;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        i_4_reg_299 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        i_4_reg_299 <= select_ln69_2_reg_1482;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index9_load_load_fu_466_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_233 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_reg_233 <= add_ln139_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        indvar_flatten_reg_288 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        indvar_flatten_reg_288 <= add_ln69_reg_1448;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        j_1_reg_340 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        j_1_reg_340 <= add_ln71_reg_1497;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        j_reg_266 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        j_reg_266 <= add_ln250_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_0 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_0 <= knn_set9_0_ret_reg_1412;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_0_load_1_fu_152 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_0_load_1_fu_152 <= knn_set9_0_ret_reg_1412;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_1 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_1 <= knn_set9_1_ret_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_1_load_1_fu_156 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_1_load_1_fu_156 <= knn_set9_1_ret_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_2 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_2 <= knn_set9_2_ret_reg_1424;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_2_load_1_fu_160 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_2_load_1_fu_160 <= knn_set9_2_ret_reg_1424;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_3 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_3 <= knn_set9_3_ret_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_3_load_1_fu_164 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_3_load_1_fu_164 <= knn_set9_3_ret_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_4 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_4 <= knn_set9_4_ret_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_4_load_1_fu_168 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_4_load_1_fu_168 <= knn_set9_4_ret_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_5 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_5 <= knn_set9_5_ret_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set9_5_load_1_fu_172 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        knn_set9_5_load_1_fu_172 <= knn_set9_5_ret_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        min_distance_list_1_1_25_reg_330 <= tmp_V_63_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        min_distance_list_1_1_25_reg_330 <= select_ln93_6_fu_1164_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        min_distance_list_1_1_reg_320 <= tmp_V_62_reg_1284;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        min_distance_list_1_1_reg_320 <= select_ln88_3_fu_1143_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        min_distance_list_2_1_26_reg_406 <= tmp_V_62_reg_1284;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        min_distance_list_2_1_26_reg_406 <= select_ln88_5_fu_1157_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        min_distance_list_2_1_reg_310 <= tmp_V_61_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        min_distance_list_2_1_reg_310 <= select_ln88_reg_1549;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_0116_reg_362 <= tmp_V_61_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        p_0116_reg_362 <= select_ln88_2_reg_1559;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_0118_reg_373 <= tmp_V_63_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        p_0118_reg_373 <= select_ln93_7_fu_1170_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_0119_reg_351 <= tmp_V_43_reg_1296;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        p_0119_reg_351 <= select_ln88_1_reg_1554;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_0120_reg_395 <= tmp_V_44_reg_1301;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        p_0120_reg_395 <= select_ln88_4_fu_1150_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_0_reg_384 <= reg_436;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        p_0_reg_384 <= select_ln93_8_fu_1176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        phi_mul_reg_277 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        phi_mul_reg_277 <= add_ln252_1_reg_1333;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln139_reg_1194 <= add_ln139_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln248_reg_1311 <= add_ln248_fu_633_p2;
        zext_ln248_reg_1316[8 : 0] <= zext_ln248_fu_639_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln250_reg_1325 <= add_ln250_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        add_ln252_1_reg_1333 <= add_ln252_1_fu_665_p2;
        sub_ln253_reg_1343 <= sub_ln253_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln252_reg_1353 <= add_ln252_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd0))) begin
        add_ln414_reg_1212 <= add_ln414_fu_492_p2;
        icmp_ln414_reg_1207 <= icmp_ln414_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_877_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        add_ln69_1_reg_1472 <= add_ln69_1_fu_897_p2;
        empty_30_reg_1477 <= empty_30_fu_903_p1;
        icmp_ln71_reg_1461 <= icmp_ln71_fu_883_p2;
        select_ln69_2_reg_1482 <= select_ln69_2_fu_907_p3;
        select_ln69_reg_1466 <= select_ln69_fu_889_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        add_ln69_reg_1448 <= add_ln69_fu_849_p2;
        empty_28_reg_1453 <= empty_28_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        add_ln71_reg_1497 <= add_ln71_fu_945_p2;
        p_t_reg_1492 <= p_t_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        and_ln79_1_reg_1541 <= and_ln79_1_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_1199 <= empty_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_2_reg_1222 <= i_2_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln153_reg_1227 <= icmp_ln153_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        icmp_ln252_reg_1359 <= icmp_ln252_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        icmp_ln78_1_reg_1521 <= icmp_ln78_1_fu_990_p2;
        icmp_ln78_reg_1515 <= icmp_ln78_fu_985_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        icmp_ln78_2_reg_1531 <= icmp_ln78_2_fu_1022_p2;
        select_ln79_reg_1526[0] <= select_ln79_fu_1014_p3[0];
select_ln79_reg_1526[3] <= select_ln79_fu_1014_p3[3];
select_ln79_reg_1526[5] <= select_ln79_fu_1014_p3[5];
        tmp_reg_1536 <= {{select_ln79_fu_1014_p3[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        icmp_ln88_1_reg_1564 <= icmp_ln88_1_fu_1112_p2;
        icmp_ln93_reg_1574 <= icmp_ln93_fu_1118_p2;
        select_ln88_1_reg_1554 <= select_ln88_1_fu_1096_p3;
        select_ln88_2_reg_1559 <= select_ln88_2_fu_1104_p3;
        select_ln88_reg_1549 <= select_ln88_fu_1088_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (index9_load_reg_1190 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        index9 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        index9_load_reg_1190 <= index9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        knn_set9_0_ret_reg_1412 <= grp_update_knn_fu_417_ap_return_0;
        knn_set9_1_ret_reg_1418 <= grp_update_knn_fu_417_ap_return_1;
        knn_set9_2_ret_reg_1424 <= grp_update_knn_fu_417_ap_return_2;
        knn_set9_3_ret_reg_1430 <= grp_update_knn_fu_417_ap_return_3;
        knn_set9_4_ret_reg_1436 <= grp_update_knn_fu_417_ap_return_4;
        knn_set9_5_ret_reg_1442 <= grp_update_knn_fu_417_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        min_distance_list_0_reg_1502 <= min_distance_list_0_fu_968_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        p_Result_18_reg_1306 <= p_Result_18_fu_614_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_reg_1461 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        p_mid1_reg_1487 <= p_mid1_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln153_fu_536_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_436 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_442 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_446 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_450 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_454 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_458 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_462 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        select_ln252_reg_1389 <= select_ln252_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln414_reg_1217 <= select_ln414_fu_498_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_V_43_reg_1296 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_V_44_reg_1301 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_V_60_reg_1273 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_V_61_reg_1278 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_V_62_reg_1284 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_V_63_reg_1290 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_1359 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        training_set9_V_0_load_reg_1379 <= training_set9_V_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_1359 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        training_set9_V_1_load_reg_1384 <= training_set9_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        trunc_ln_reg_1348 <= {{grp_fu_1183_p2[29:21]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        urem_ln252_reg_1364 <= grp_fu_714_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln153_fu_536_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd0)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state33) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state32) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state31) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state30) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state29) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln153_fu_536_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Output_1_blk_n = Output_1_full_n;
    end else begin
        Output_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0_reg_384;
    end else if (((1'b1 == ap_CS_fsm_state77) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0120_reg_395;
    end else if (((1'b1 == ap_CS_fsm_state76) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0119_reg_351;
    end else if (((1'b1 == ap_CS_fsm_state74) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0118_reg_373;
    end else if (((1'b1 == ap_CS_fsm_state73) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = min_distance_list_2_1_26_reg_406;
    end else if (((1'b1 == ap_CS_fsm_state72) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0116_reg_362;
    end else if ((((1'b1 == ap_CS_fsm_state75) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state71) & (1'b1 == Output_1_full_n)))) begin
        Output_1_din = 32'd0;
    end else if (((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_din = Input_1_V_TDATA_int_regslice;
    end else if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Output_1_din = reg_436;
    end else begin
        Output_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state77) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state76) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state75) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state74) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state73) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state72) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state71) & (1'b1 == Output_1_full_n)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_write = 1'b1;
    end else begin
        Output_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln153_fu_536_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln153_reg_1227 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_248_p4 = i_2_reg_1222;
    end else begin
        ap_phi_mux_i_1_phi_fu_248_p4 = i_1_reg_244;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        training_set9_V_0_address0 = zext_ln252_1_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set9_V_0_address0 = zext_ln414_fu_503_p1;
    end else begin
        training_set9_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set9_V_0_ce0 = 1'b1;
    end else begin
        training_set9_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1207 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set9_V_0_we0 = 1'b1;
    end else begin
        training_set9_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        training_set9_V_1_address0 = zext_ln252_1_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set9_V_1_address0 = zext_ln414_fu_503_p1;
    end else begin
        training_set9_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state57) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set9_V_1_ce0 = 1'b1;
    end else begin
        training_set9_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1207 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set9_V_1_we0 = 1'b1;
    end else begin
        training_set9_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index9_load_load_fu_466_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index9_load_load_fu_466_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln139_fu_480_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln153_fu_536_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln153_fu_536_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln248_fu_643_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln250_fu_659_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((grp_update_knn_fu_417_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln69_fu_877_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign add_ln139_fu_470_p2 = (i_reg_233 + 10'd1);

assign add_ln248_fu_633_p2 = (i_3_reg_255 + 9'd1);

assign add_ln250_fu_649_p2 = (j_reg_266 + 2'd1);

assign add_ln252_1_fu_665_p2 = (phi_mul_reg_277 + 16'd18000);

assign add_ln252_fu_709_p2 = (zext_ln252_fu_706_p1 + zext_ln248_reg_1316);

assign add_ln414_fu_492_p2 = (empty_fu_476_p1 + 9'd62);

assign add_ln69_1_fu_897_p2 = (i_4_reg_299 + 2'd1);

assign add_ln69_fu_849_p2 = (indvar_flatten_reg_288 + 3'd1);

assign add_ln71_fu_945_p2 = (select_ln69_reg_1466 + 2'd1);

assign and_ln79_1_fu_1042_p2 = (icmp_ln80_fu_1037_p2 & icmp_ln78_2_reg_1531);

assign and_ln79_fu_1000_p2 = (xor_ln80_fu_995_p2 & icmp_ln78_1_reg_1521);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_fu_536_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_fu_536_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_fu_536_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_fu_536_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp1_stage1_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state13_pp1_stage2_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_pp1_stage3_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_pp1_stage4_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_pp1_stage5_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_pp1_stage6_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_pp1_stage7_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln153_reg_1227 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((1'b0 == Output_1_full_n) & (icmp_ln153_reg_1227 == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln139_fu_480_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_24_fu_671_p1 = phi_mul_reg_277[14:0];

assign empty_27_fu_859_p1 = i_4_reg_299[0:0];

assign empty_28_fu_871_p2 = (p_shl_fu_863_p3 - zext_ln69_fu_855_p1);

assign empty_30_fu_903_p1 = add_ln69_1_fu_897_p2[0:0];

assign empty_fu_476_p1 = i_reg_233[8:0];

assign grp_fu_1183_p0 = grp_fu_1183_p00;

assign grp_fu_1183_p00 = empty_24_fu_671_p1;

assign grp_fu_1183_p1 = 31'd52429;

assign grp_update_knn_fu_417_ap_start = grp_update_knn_fu_417_ap_start_reg;

assign i_2_fu_530_p2 = (ap_phi_mux_i_1_phi_fu_248_p4 + 10'd1);

assign icmp_ln139_fu_480_p2 = ((i_reg_233 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_536_p2 = ((ap_phi_mux_i_1_phi_fu_248_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln248_fu_643_p2 = ((i_3_reg_255 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_659_p2 = ((j_reg_266 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_719_p2 = ((add_ln252_reg_1353 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_486_p2 = ((i_reg_233 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_877_p2 = ((indvar_flatten_reg_288 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_883_p2 = ((j_1_reg_340 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_990_p2 = (($signed(min_distance_list_0_reg_1502) < $signed(min_distance_list_1_1_reg_320)) ? 1'b1 : 1'b0);

assign icmp_ln78_2_fu_1022_p2 = (($signed(min_distance_list_0_reg_1502) < $signed(min_distance_list_2_1_reg_310)) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_985_p2 = (($signed(min_distance_list_0_reg_1502) < $signed(min_distance_list_1_1_25_reg_330)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1037_p2 = ((tmp_reg_1536 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln88_1_fu_1112_p2 = ((select_ln79_1_fu_1047_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_1063_p2 = ((tmp_1_fu_1053_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1118_p2 = ((select_ln79_1_fu_1047_p3 == 6'd1) ? 1'b1 : 1'b0);

assign index9_load_load_fu_466_p1 = index9;

assign j_1_cast_fu_936_p1 = select_ln69_reg_1466;

assign or_ln79_fu_1009_p2 = (icmp_ln78_reg_1515 | and_ln79_fu_1000_p2);

assign p_Result_18_fu_614_p9 = {{{{{{{{reg_436}, {reg_442}}, {reg_446}}, {reg_450}}, {reg_454}}, {reg_458}}, {reg_462}}, {tmp_V_60_reg_1273}};

assign p_Result_s_fu_508_p9 = {{{{{{{{reg_436}, {reg_442}}, {reg_446}}, {reg_450}}, {reg_454}}, {reg_458}}, {reg_462}}, {Input_1_V_TDATA_int_regslice}};

assign p_mid1_fu_925_p2 = (p_shl14_mid1_fu_918_p3 - zext_ln69_1_fu_915_p1);

assign p_shl14_mid1_fu_918_p3 = {{empty_30_reg_1477}, {2'd0}};

assign p_shl_fu_863_p3 = {{empty_27_fu_859_p1}, {2'd0}};

assign p_t_fu_939_p2 = (select_ln69_1_fu_931_p3 + j_1_cast_fu_936_p1);

assign select_ln252_fu_729_p3 = ((icmp_ln252_reg_1359[0:0] == 1'b1) ? training_set9_V_0_load_reg_1379 : training_set9_V_1_load_reg_1384);

assign select_ln414_fu_498_p3 = ((icmp_ln414_reg_1207[0:0] == 1'b1) ? empty_reg_1199 : add_ln414_reg_1212);

assign select_ln69_1_fu_931_p3 = ((icmp_ln71_reg_1461[0:0] == 1'b1) ? p_mid1_reg_1487 : empty_28_reg_1453);

assign select_ln69_2_fu_907_p3 = ((icmp_ln71_fu_883_p2[0:0] == 1'b1) ? add_ln69_1_fu_897_p2 : i_4_reg_299);

assign select_ln69_fu_889_p3 = ((icmp_ln71_fu_883_p2[0:0] == 1'b1) ? 2'd0 : j_1_reg_340);

assign select_ln79_1_fu_1047_p3 = ((and_ln79_1_reg_1541[0:0] == 1'b1) ? 6'd2 : select_ln79_reg_1526);

assign select_ln79_fu_1014_p3 = ((or_ln79_fu_1009_p2[0:0] == 1'b1) ? zext_ln79_fu_1005_p1 : 6'd40);

assign select_ln88_1_fu_1096_p3 = ((icmp_ln88_fu_1063_p2[0:0] == 1'b1) ? p_0120_reg_395 : select_ln93_1_fu_1075_p3);

assign select_ln88_2_fu_1104_p3 = ((icmp_ln88_fu_1063_p2[0:0] == 1'b1) ? min_distance_list_2_1_26_reg_406 : select_ln93_2_fu_1082_p3);

assign select_ln88_3_fu_1143_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? min_distance_list_1_1_25_reg_330 : select_ln93_3_fu_1124_p3);

assign select_ln88_4_fu_1150_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? p_0_reg_384 : select_ln93_4_fu_1130_p3);

assign select_ln88_5_fu_1157_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? min_distance_list_1_1_25_reg_330 : select_ln93_5_fu_1137_p3);

assign select_ln88_fu_1088_p3 = ((icmp_ln88_fu_1063_p2[0:0] == 1'b1) ? min_distance_list_2_1_26_reg_406 : select_ln93_fu_1069_p3);

assign select_ln93_1_fu_1075_p3 = ((and_ln79_1_reg_1541[0:0] == 1'b1) ? 32'd8 : p_0119_reg_351);

assign select_ln93_2_fu_1082_p3 = ((and_ln79_1_reg_1541[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : p_0116_reg_362);

assign select_ln93_3_fu_1124_p3 = ((icmp_ln93_reg_1574[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : min_distance_list_1_1_reg_320);

assign select_ln93_4_fu_1130_p3 = ((icmp_ln93_reg_1574[0:0] == 1'b1) ? 32'd8 : p_0120_reg_395);

assign select_ln93_5_fu_1137_p3 = ((icmp_ln93_reg_1574[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : min_distance_list_2_1_26_reg_406);

assign select_ln93_6_fu_1164_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : min_distance_list_1_1_25_reg_330);

assign select_ln93_7_fu_1170_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : p_0118_reg_373);

assign select_ln93_8_fu_1176_p3 = ((icmp_ln88_1_reg_1564[0:0] == 1'b1) ? 32'd8 : p_0_reg_384);

assign select_ln93_fu_1069_p3 = ((and_ln79_1_reg_1541[0:0] == 1'b1) ? min_distance_list_0_reg_1502 : min_distance_list_2_1_reg_310);

assign shl_ln_fu_683_p3 = {{trunc_ln253_fu_679_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln253_fu_691_p2 = (shl_ln_fu_683_p3 - zext_ln250_fu_655_p1);

assign tmp_1_fu_1053_p4 = {{select_ln79_1_fu_1047_p3[5:1]}};

assign trunc_ln253_fu_679_p1 = j_reg_266[0:0];

assign xor_ln80_fu_995_p2 = (icmp_ln78_reg_1515 ^ 1'd1);

assign zext_ln248_fu_639_p1 = i_3_reg_255;

assign zext_ln250_fu_655_p1 = j_reg_266;

assign zext_ln252_1_fu_724_p1 = urem_ln252_reg_1364;

assign zext_ln252_fu_706_p1 = trunc_ln_reg_1348;

assign zext_ln414_fu_503_p1 = select_ln414_reg_1217;

assign zext_ln69_1_fu_915_p1 = add_ln69_1_reg_1472;

assign zext_ln69_fu_855_p1 = i_4_reg_299;

assign zext_ln79_fu_1005_p1 = and_ln79_fu_1000_p2;

always @ (posedge ap_clk) begin
    zext_ln248_reg_1316[9] <= 1'b0;
    select_ln79_reg_1526[2:1] <= 2'b00;
    select_ln79_reg_1526[4] <= 1'b0;
end

endmodule //update_knn5_update_knn9_sub
