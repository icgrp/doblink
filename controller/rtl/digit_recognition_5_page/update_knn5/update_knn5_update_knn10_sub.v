// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn5_update_knn10_sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_dout,
        Input_1_empty_n,
        Input_1_read,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 90'd1;
parameter    ap_ST_fsm_pp0_stage0 = 90'd2;
parameter    ap_ST_fsm_pp0_stage1 = 90'd4;
parameter    ap_ST_fsm_pp0_stage2 = 90'd8;
parameter    ap_ST_fsm_pp0_stage3 = 90'd16;
parameter    ap_ST_fsm_pp0_stage4 = 90'd32;
parameter    ap_ST_fsm_pp0_stage5 = 90'd64;
parameter    ap_ST_fsm_pp0_stage6 = 90'd128;
parameter    ap_ST_fsm_pp0_stage7 = 90'd256;
parameter    ap_ST_fsm_state12 = 90'd512;
parameter    ap_ST_fsm_state13 = 90'd1024;
parameter    ap_ST_fsm_state14 = 90'd2048;
parameter    ap_ST_fsm_state15 = 90'd4096;
parameter    ap_ST_fsm_state16 = 90'd8192;
parameter    ap_ST_fsm_state17 = 90'd16384;
parameter    ap_ST_fsm_state18 = 90'd32768;
parameter    ap_ST_fsm_state19 = 90'd65536;
parameter    ap_ST_fsm_state20 = 90'd131072;
parameter    ap_ST_fsm_state21 = 90'd262144;
parameter    ap_ST_fsm_state22 = 90'd524288;
parameter    ap_ST_fsm_state23 = 90'd1048576;
parameter    ap_ST_fsm_state24 = 90'd2097152;
parameter    ap_ST_fsm_state25 = 90'd4194304;
parameter    ap_ST_fsm_state26 = 90'd8388608;
parameter    ap_ST_fsm_state27 = 90'd16777216;
parameter    ap_ST_fsm_state28 = 90'd33554432;
parameter    ap_ST_fsm_state29 = 90'd67108864;
parameter    ap_ST_fsm_state30 = 90'd134217728;
parameter    ap_ST_fsm_state31 = 90'd268435456;
parameter    ap_ST_fsm_state32 = 90'd536870912;
parameter    ap_ST_fsm_state33 = 90'd1073741824;
parameter    ap_ST_fsm_state34 = 90'd2147483648;
parameter    ap_ST_fsm_state35 = 90'd4294967296;
parameter    ap_ST_fsm_state36 = 90'd8589934592;
parameter    ap_ST_fsm_state37 = 90'd17179869184;
parameter    ap_ST_fsm_state38 = 90'd34359738368;
parameter    ap_ST_fsm_state39 = 90'd68719476736;
parameter    ap_ST_fsm_state40 = 90'd137438953472;
parameter    ap_ST_fsm_state41 = 90'd274877906944;
parameter    ap_ST_fsm_state42 = 90'd549755813888;
parameter    ap_ST_fsm_state43 = 90'd1099511627776;
parameter    ap_ST_fsm_state44 = 90'd2199023255552;
parameter    ap_ST_fsm_state45 = 90'd4398046511104;
parameter    ap_ST_fsm_state46 = 90'd8796093022208;
parameter    ap_ST_fsm_state47 = 90'd17592186044416;
parameter    ap_ST_fsm_state48 = 90'd35184372088832;
parameter    ap_ST_fsm_state49 = 90'd70368744177664;
parameter    ap_ST_fsm_state50 = 90'd140737488355328;
parameter    ap_ST_fsm_state51 = 90'd281474976710656;
parameter    ap_ST_fsm_state52 = 90'd562949953421312;
parameter    ap_ST_fsm_state53 = 90'd1125899906842624;
parameter    ap_ST_fsm_state54 = 90'd2251799813685248;
parameter    ap_ST_fsm_state55 = 90'd4503599627370496;
parameter    ap_ST_fsm_state56 = 90'd9007199254740992;
parameter    ap_ST_fsm_state57 = 90'd18014398509481984;
parameter    ap_ST_fsm_state58 = 90'd36028797018963968;
parameter    ap_ST_fsm_state59 = 90'd72057594037927936;
parameter    ap_ST_fsm_state60 = 90'd144115188075855872;
parameter    ap_ST_fsm_state61 = 90'd288230376151711744;
parameter    ap_ST_fsm_state62 = 90'd576460752303423488;
parameter    ap_ST_fsm_state63 = 90'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 90'd2305843009213693952;
parameter    ap_ST_fsm_pp2_stage0 = 90'd4611686018427387904;
parameter    ap_ST_fsm_pp2_stage1 = 90'd9223372036854775808;
parameter    ap_ST_fsm_state69 = 90'd18446744073709551616;
parameter    ap_ST_fsm_state70 = 90'd36893488147419103232;
parameter    ap_ST_fsm_state71 = 90'd73786976294838206464;
parameter    ap_ST_fsm_state72 = 90'd147573952589676412928;
parameter    ap_ST_fsm_state73 = 90'd295147905179352825856;
parameter    ap_ST_fsm_state74 = 90'd590295810358705651712;
parameter    ap_ST_fsm_state75 = 90'd1180591620717411303424;
parameter    ap_ST_fsm_state76 = 90'd2361183241434822606848;
parameter    ap_ST_fsm_state77 = 90'd4722366482869645213696;
parameter    ap_ST_fsm_state78 = 90'd9444732965739290427392;
parameter    ap_ST_fsm_state79 = 90'd18889465931478580854784;
parameter    ap_ST_fsm_state80 = 90'd37778931862957161709568;
parameter    ap_ST_fsm_state81 = 90'd75557863725914323419136;
parameter    ap_ST_fsm_state82 = 90'd151115727451828646838272;
parameter    ap_ST_fsm_state83 = 90'd302231454903657293676544;
parameter    ap_ST_fsm_state84 = 90'd604462909807314587353088;
parameter    ap_ST_fsm_state85 = 90'd1208925819614629174706176;
parameter    ap_ST_fsm_state86 = 90'd2417851639229258349412352;
parameter    ap_ST_fsm_state87 = 90'd4835703278458516698824704;
parameter    ap_ST_fsm_state88 = 90'd9671406556917033397649408;
parameter    ap_ST_fsm_state89 = 90'd19342813113834066795298816;
parameter    ap_ST_fsm_state90 = 90'd38685626227668133590597632;
parameter    ap_ST_fsm_state91 = 90'd77371252455336267181195264;
parameter    ap_ST_fsm_state92 = 90'd154742504910672534362390528;
parameter    ap_ST_fsm_state93 = 90'd309485009821345068724781056;
parameter    ap_ST_fsm_state94 = 90'd618970019642690137449562112;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_dout;
input   Input_1_empty_n;
output   Input_1_read;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [89:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] index10;
reg   [31:0] knn_set10_0;
reg   [31:0] knn_set10_1;
reg   [31:0] knn_set10_2;
reg   [31:0] knn_set10_3;
reg   [31:0] knn_set10_4;
reg   [31:0] knn_set10_5;
reg   [8:0] training_set10_V_0_address0;
reg    training_set10_V_0_ce0;
reg    training_set10_V_0_we0;
wire   [255:0] training_set10_V_0_q0;
reg   [8:0] training_set10_V_1_address0;
reg    training_set10_V_1_ce0;
reg    training_set10_V_1_we0;
wire   [255:0] training_set10_V_1_q0;
reg    Input_1_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln476_reg_1976;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state12;
reg   [0:0] index10_load_reg_1962;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
reg   [9:0] i_reg_348;
reg   [1:0] i_7_reg_515;
reg   [31:0] reg_545;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] reg_550;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] reg_556;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] reg_561;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] reg_566;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] reg_572;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [31:0] reg_578;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [0:0] index10_load_load_fu_582_p1;
wire   [9:0] add_ln476_fu_586_p2;
reg   [9:0] add_ln476_reg_1966;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] empty_fu_592_p1;
reg   [8:0] empty_reg_1971;
wire   [0:0] icmp_ln476_fu_596_p2;
wire   [0:0] icmp_ln414_fu_602_p2;
reg   [0:0] icmp_ln414_reg_1980;
reg   [0:0] icmp_ln414_reg_1980_pp0_iter1_reg;
wire   [8:0] add_ln414_fu_608_p2;
reg   [8:0] add_ln414_reg_1985;
wire   [8:0] select_ln414_fu_614_p3;
reg   [8:0] select_ln414_reg_1990;
reg   [31:0] tmp_V_70_reg_1995;
wire   [255:0] p_Result_19_fu_717_p9;
reg   [255:0] p_Result_19_reg_2042;
wire   [8:0] add_ln552_fu_737_p2;
reg   [8:0] add_ln552_reg_2047;
wire    ap_CS_fsm_state29;
wire   [9:0] zext_ln552_fu_743_p1;
reg   [9:0] zext_ln552_reg_2052;
wire   [0:0] icmp_ln552_fu_747_p2;
wire   [1:0] add_ln554_fu_753_p2;
reg   [1:0] add_ln554_reg_2061;
wire    ap_CS_fsm_state30;
wire   [15:0] add_ln556_1_fu_769_p2;
reg   [15:0] add_ln556_1_reg_2069;
wire   [0:0] icmp_ln554_fu_763_p2;
wire   [2:0] sub_ln557_fu_795_p2;
reg   [2:0] sub_ln557_reg_2079;
reg   [8:0] trunc_ln_reg_2084;
wire    ap_CS_fsm_state33;
wire   [9:0] add_ln556_fu_813_p2;
reg   [9:0] add_ln556_reg_2089;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln556_fu_823_p2;
reg   [0:0] icmp_ln556_reg_2095;
wire    ap_CS_fsm_state35;
wire   [9:0] grp_fu_818_p2;
reg   [9:0] urem_ln556_reg_2100;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [255:0] training_set10_V_0_load_reg_2115;
wire    ap_CS_fsm_state51;
reg   [255:0] training_set10_V_1_load_reg_2120;
wire   [255:0] select_ln556_fu_833_p3;
reg   [255:0] select_ln556_reg_2125;
wire    ap_CS_fsm_state52;
reg   [31:0] knn_set10_0_ret_reg_2148;
wire    ap_CS_fsm_state53;
reg   [31:0] knn_set10_1_ret_reg_2154;
reg   [31:0] knn_set10_2_ret_reg_2160;
reg   [31:0] knn_set10_3_ret_reg_2166;
reg   [31:0] knn_set10_4_ret_reg_2172;
reg   [31:0] knn_set10_5_ret_reg_2178;
wire   [2:0] add_ln368_fu_953_p2;
reg   [2:0] add_ln368_reg_2184;
wire    ap_CS_fsm_state55;
wire   [2:0] empty_36_fu_975_p2;
reg   [2:0] empty_36_reg_2189;
wire   [0:0] icmp_ln370_fu_987_p2;
reg   [0:0] icmp_ln370_reg_2197;
wire   [0:0] icmp_ln368_fu_981_p2;
wire   [1:0] select_ln368_fu_993_p3;
reg   [1:0] select_ln368_reg_2202;
wire   [1:0] add_ln368_1_fu_1001_p2;
reg   [1:0] add_ln368_1_reg_2208;
wire   [0:0] empty_38_fu_1007_p1;
reg   [0:0] empty_38_reg_2213;
wire   [1:0] select_ln368_2_fu_1011_p3;
reg   [1:0] select_ln368_2_reg_2218;
wire   [2:0] p_mid1_fu_1029_p2;
reg   [2:0] p_mid1_reg_2223;
wire    ap_CS_fsm_state56;
wire   [2:0] p_t_fu_1043_p2;
reg   [2:0] p_t_reg_2228;
wire    ap_CS_fsm_state57;
wire   [1:0] add_ln370_fu_1049_p2;
reg   [1:0] add_ln370_reg_2233;
wire   [31:0] min_distance_list_2_fu_1072_p8;
reg   [31:0] min_distance_list_2_reg_2238;
wire    ap_CS_fsm_state58;
wire   [0:0] icmp_ln377_fu_1089_p2;
reg   [0:0] icmp_ln377_reg_2249;
wire    ap_CS_fsm_state59;
wire   [0:0] icmp_ln377_1_fu_1094_p2;
reg   [0:0] icmp_ln377_1_reg_2255;
wire   [5:0] select_ln378_fu_1118_p3;
reg   [5:0] select_ln378_reg_2260;
wire    ap_CS_fsm_state60;
wire   [0:0] icmp_ln377_2_fu_1126_p2;
reg   [0:0] icmp_ln377_2_reg_2265;
reg   [3:0] tmp_2_reg_2270;
wire   [0:0] and_ln378_1_fu_1146_p2;
reg   [0:0] and_ln378_1_reg_2275;
wire    ap_CS_fsm_state61;
wire   [0:0] icmp_ln387_fu_1167_p2;
reg   [0:0] icmp_ln387_reg_2281;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln387_1_fu_1173_p2;
reg   [0:0] icmp_ln387_1_reg_2288;
wire   [0:0] icmp_ln392_fu_1179_p2;
reg   [0:0] icmp_ln392_reg_2300;
wire   [31:0] select_ln378_2_fu_1202_p3;
wire    ap_CS_fsm_state63;
wire   [31:0] min_distance_list_0_3_fu_1217_p3;
wire   [31:0] select_ln392_fu_1241_p3;
wire   [31:0] min_distance_list_0_5_fu_1256_p3;
wire   [31:0] select_ln392_2_fu_1270_p3;
wire   [31:0] min_distance_list_0_7_fu_1285_p3;
wire   [31:0] select_ln387_6_fu_1292_p3;
wire   [31:0] min_distance_list_1_5_fu_1299_p3;
wire   [31:0] select_ln387_8_fu_1305_p3;
wire   [1:0] add_ln432_fu_1412_p2;
reg   [1:0] add_ln432_reg_2490;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state65_pp2_stage0_iter0;
wire    ap_block_state67_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln432_fu_1418_p2;
reg   [0:0] icmp_ln432_reg_2495;
wire   [3:0] trunc_ln435_fu_1436_p1;
reg   [3:0] trunc_ln435_reg_2499;
reg   [3:0] trunc_ln435_reg_2499_pp2_iter1_reg;
wire   [31:0] tmp_s_fu_1470_p12;
reg   [31:0] tmp_s_reg_2504;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state66_pp2_stage1_iter0;
wire    ap_block_state68_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
wire   [31:0] vote_list_0_fu_1495_p2;
reg   [31:0] vote_list_0_reg_2509;
wire   [0:0] icmp_ln445_fu_1586_p2;
reg   [0:0] icmp_ln445_reg_2539;
wire    ap_CS_fsm_state69;
wire   [0:0] max_vote_fu_1592_p2;
reg   [0:0] max_vote_reg_2544;
wire    ap_CS_fsm_state70;
wire   [0:0] icmp_ln445_1_fu_1605_p2;
reg   [0:0] icmp_ln445_1_reg_2553;
wire    ap_CS_fsm_state71;
wire   [1:0] max_vote_1_fu_1619_p3;
reg   [1:0] max_vote_1_reg_2558;
wire    ap_CS_fsm_state72;
wire   [31:0] phi_ln_fu_1630_p18;
reg   [31:0] phi_ln_reg_2564;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln445_2_fu_1655_p2;
reg   [0:0] icmp_ln445_2_reg_2572;
wire    ap_CS_fsm_state74;
wire   [1:0] max_vote_2_fu_1665_p3;
reg   [1:0] max_vote_2_reg_2577;
wire    ap_CS_fsm_state75;
wire   [31:0] phi_ln445_1_fu_1675_p18;
reg   [31:0] phi_ln445_1_reg_2583;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln445_3_fu_1700_p2;
reg   [0:0] icmp_ln445_3_reg_2591;
wire    ap_CS_fsm_state77;
wire   [2:0] max_vote_3_fu_1713_p3;
reg   [2:0] max_vote_3_reg_2596;
wire    ap_CS_fsm_state78;
wire   [31:0] phi_ln445_2_fu_1724_p18;
reg   [31:0] phi_ln445_2_reg_2602;
wire    ap_CS_fsm_state79;
wire   [0:0] icmp_ln445_4_fu_1749_p2;
reg   [0:0] icmp_ln445_4_reg_2610;
wire    ap_CS_fsm_state80;
wire   [2:0] max_vote_4_fu_1759_p3;
reg   [2:0] max_vote_4_reg_2615;
wire    ap_CS_fsm_state81;
wire   [31:0] phi_ln445_3_fu_1769_p18;
reg   [31:0] phi_ln445_3_reg_2621;
wire    ap_CS_fsm_state82;
wire   [0:0] icmp_ln445_5_fu_1794_p2;
reg   [0:0] icmp_ln445_5_reg_2629;
wire    ap_CS_fsm_state83;
wire   [2:0] max_vote_5_fu_1804_p3;
reg   [2:0] max_vote_5_reg_2634;
wire    ap_CS_fsm_state84;
wire   [31:0] phi_ln445_4_fu_1814_p18;
reg   [31:0] phi_ln445_4_reg_2640;
wire    ap_CS_fsm_state85;
wire   [0:0] icmp_ln445_6_fu_1839_p2;
reg   [0:0] icmp_ln445_6_reg_2648;
wire    ap_CS_fsm_state86;
wire   [2:0] max_vote_6_fu_1849_p3;
reg   [2:0] max_vote_6_reg_2653;
wire    ap_CS_fsm_state87;
wire   [3:0] zext_ln438_2_fu_1856_p1;
reg   [3:0] zext_ln438_2_reg_2658;
wire    ap_CS_fsm_state88;
wire   [31:0] phi_ln445_5_fu_1859_p18;
reg   [31:0] phi_ln445_5_reg_2663;
wire   [0:0] icmp_ln445_7_fu_1884_p2;
reg   [0:0] icmp_ln445_7_reg_2671;
wire    ap_CS_fsm_state89;
wire   [3:0] max_vote_7_fu_1894_p3;
reg   [3:0] max_vote_7_reg_2676;
wire    ap_CS_fsm_state90;
wire   [31:0] phi_ln445_6_fu_1901_p18;
reg   [31:0] phi_ln445_6_reg_2682;
wire    ap_CS_fsm_state91;
wire   [0:0] icmp_ln445_8_fu_1925_p2;
reg   [0:0] icmp_ln445_8_reg_2687;
wire    ap_CS_fsm_state92;
wire   [31:0] p_Result_21_fu_1946_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state64;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state65;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
wire    grp_update_knn_fu_526_ap_start;
wire    grp_update_knn_fu_526_ap_done;
wire    grp_update_knn_fu_526_ap_idle;
wire    grp_update_knn_fu_526_ap_ready;
wire   [31:0] grp_update_knn_fu_526_ap_return_0;
wire   [31:0] grp_update_knn_fu_526_ap_return_1;
wire   [31:0] grp_update_knn_fu_526_ap_return_2;
wire   [31:0] grp_update_knn_fu_526_ap_return_3;
wire   [31:0] grp_update_knn_fu_526_ap_return_4;
wire   [31:0] grp_update_knn_fu_526_ap_return_5;
reg   [9:0] ap_phi_mux_i_phi_fu_352_p4;
reg   [8:0] i_5_reg_359;
reg   [1:0] j_reg_370;
wire    ap_CS_fsm_state54;
reg   [15:0] phi_mul_reg_381;
reg   [2:0] indvar_flatten_reg_392;
reg   [1:0] i_6_reg_403;
reg   [31:0] label_list_2_1_reg_414;
reg   [31:0] label_list_1_1_reg_424;
reg   [31:0] label_list_0_1_reg_434;
reg   [31:0] min_distance_list_2_1_reg_444;
reg   [31:0] min_distance_list_1_1_reg_454;
reg   [31:0] min_distance_list_1_3_reg_464;
reg   [1:0] j_2_reg_474;
reg   [31:0] label_list_1_2_reg_485;
reg   [31:0] label_list_2_2_reg_495;
reg   [31:0] min_distance_list_2_3_reg_505;
reg   [1:0] ap_phi_mux_i_7_phi_fu_519_p4;
wire    ap_block_pp2_stage0;
reg    grp_update_knn_fu_526_ap_start_reg;
wire   [63:0] zext_ln414_fu_619_p1;
wire   [63:0] zext_ln556_1_fu_828_p1;
reg    ap_block_state13;
reg    ap_block_state13_io;
reg   [31:0] knn_set10_0_load_1_fu_188;
reg   [31:0] knn_set10_1_load_1_fu_192;
reg   [31:0] knn_set10_2_load_1_fu_196;
reg   [31:0] knn_set10_3_load_1_fu_200;
reg   [31:0] knn_set10_4_load_1_fu_204;
reg   [31:0] knn_set10_5_load_1_fu_208;
reg   [31:0] vote_list_9_fu_212;
reg   [31:0] vote_list_9_1_fu_216;
reg   [31:0] vote_list_9_2_fu_220;
reg   [31:0] vote_list_9_3_fu_224;
reg   [31:0] vote_list_9_4_fu_228;
reg   [31:0] vote_list_9_5_fu_232;
reg   [31:0] vote_list_9_6_fu_236;
reg   [31:0] vote_list_9_7_fu_240;
reg   [31:0] vote_list_9_8_fu_244;
reg   [31:0] vote_list_9_9_fu_248;
reg   [31:0] vote_list_9_10_fu_252;
reg   [31:0] ap_sig_allocacmp_vote_list_9_10_load;
wire    ap_block_pp2_stage1;
reg   [31:0] vote_list_9_11_fu_256;
reg   [31:0] ap_sig_allocacmp_vote_list_9_11_load;
reg   [31:0] vote_list_9_12_fu_260;
reg   [31:0] ap_sig_allocacmp_vote_list_9_12_load;
reg   [31:0] vote_list_9_13_fu_264;
reg   [31:0] ap_sig_allocacmp_vote_list_9_13_load;
reg   [31:0] vote_list_9_14_fu_268;
reg   [31:0] ap_sig_allocacmp_vote_list_9_14_load;
reg   [31:0] vote_list_9_15_fu_272;
reg   [31:0] ap_sig_allocacmp_vote_list_9_15_load;
reg   [31:0] vote_list_9_16_fu_276;
reg   [31:0] ap_sig_allocacmp_vote_list_9_16_load;
reg   [31:0] vote_list_9_17_fu_280;
reg   [31:0] ap_sig_allocacmp_vote_list_9_17_load;
reg   [31:0] vote_list_9_18_fu_284;
reg   [31:0] ap_sig_allocacmp_vote_list_9_18_load;
reg   [31:0] vote_list_9_19_fu_288;
reg   [31:0] ap_sig_allocacmp_vote_list_9_19_load;
wire   [255:0] p_Result_s_fu_624_p9;
wire    ap_CS_fsm_state50;
wire   [14:0] empty_34_fu_775_p1;
wire   [0:0] trunc_ln557_fu_783_p1;
wire   [2:0] shl_ln_fu_787_p3;
wire   [2:0] zext_ln554_fu_759_p1;
wire   [30:0] grp_fu_1955_p2;
wire   [9:0] zext_ln556_fu_810_p1;
wire   [0:0] empty_35_fu_963_p1;
wire   [2:0] p_shl5_fu_967_p3;
wire   [2:0] zext_ln368_fu_959_p1;
wire   [2:0] p_shl5_mid1_fu_1022_p3;
wire   [2:0] zext_ln368_1_fu_1019_p1;
wire   [2:0] select_ln368_1_fu_1035_p3;
wire   [2:0] j_2_cast_fu_1040_p1;
wire   [0:0] xor_ln379_fu_1099_p2;
wire   [0:0] and_ln378_fu_1104_p2;
wire   [0:0] or_ln378_fu_1113_p2;
wire   [5:0] zext_ln378_fu_1109_p1;
wire   [0:0] icmp_ln379_fu_1141_p2;
wire   [5:0] select_ln378_1_fu_1151_p3;
wire   [4:0] tmp_3_fu_1157_p4;
wire   [0:0] xor_ln387_fu_1192_p2;
wire   [0:0] and_ln378_2_fu_1197_p2;
wire   [31:0] select_ln387_fu_1185_p3;
wire   [31:0] min_distance_list_0_2_fu_1210_p3;
wire   [0:0] xor_ln387_1_fu_1231_p2;
wire   [0:0] and_ln392_fu_1236_p2;
wire   [31:0] select_ln387_2_fu_1224_p3;
wire   [31:0] min_distance_list_0_4_fu_1249_p3;
wire   [31:0] select_ln387_4_fu_1263_p3;
wire   [31:0] min_distance_list_0_6_fu_1278_p3;
wire   [31:0] tmp_fu_1424_p5;
wire   [31:0] select_ln445_fu_1600_p3;
wire   [0:0] xor_ln445_fu_1614_p2;
wire   [1:0] zext_ln438_fu_1611_p1;
wire   [3:0] phi_ln_fu_1630_p17;
wire   [0:0] xor_ln445_1_fu_1660_p2;
wire   [3:0] phi_ln445_1_fu_1675_p17;
wire   [0:0] xor_ln445_2_fu_1708_p2;
wire   [2:0] zext_ln438_1_fu_1705_p1;
wire   [3:0] phi_ln445_2_fu_1724_p17;
wire   [0:0] xor_ln445_3_fu_1754_p2;
wire   [3:0] phi_ln445_3_fu_1769_p17;
wire   [0:0] xor_ln445_4_fu_1799_p2;
wire   [3:0] phi_ln445_4_fu_1814_p17;
wire   [0:0] xor_ln445_5_fu_1844_p2;
wire   [3:0] phi_ln445_5_fu_1859_p17;
wire   [0:0] xor_ln445_6_fu_1889_p2;
wire   [0:0] xor_ln445_7_fu_1930_p2;
wire   [3:0] max_vote_8_fu_1935_p3;
wire   [7:0] zext_ln438_3_fu_1942_p1;
wire   [14:0] grp_fu_1955_p0;
wire   [16:0] grp_fu_1955_p1;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg    ap_block_state94;
reg   [89:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire   [30:0] grp_fu_1955_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 90'd1;
#0 index10 = 1'd0;
#0 knn_set10_0 = 32'd0;
#0 knn_set10_1 = 32'd0;
#0 knn_set10_2 = 32'd0;
#0 knn_set10_3 = 32'd0;
#0 knn_set10_4 = 32'd0;
#0 knn_set10_5 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_update_knn_fu_526_ap_start_reg = 1'b0;
end

update_knn5_update_knn9_sub_training_set9_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set10_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set10_V_0_address0),
    .ce0(training_set10_V_0_ce0),
    .we0(training_set10_V_0_we0),
    .d0(p_Result_s_fu_624_p9),
    .q0(training_set10_V_0_q0)
);

update_knn5_update_knn9_sub_training_set9_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set10_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set10_V_1_address0),
    .ce0(training_set10_V_1_ce0),
    .we0(training_set10_V_1_we0),
    .d0(p_Result_s_fu_624_p9),
    .q0(training_set10_V_1_q0)
);

update_knn5_update_knn grp_update_knn_fu_526(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_knn_fu_526_ap_start),
    .ap_done(grp_update_knn_fu_526_ap_done),
    .ap_idle(grp_update_knn_fu_526_ap_idle),
    .ap_ready(grp_update_knn_fu_526_ap_ready),
    .test_inst(p_Result_19_reg_2042),
    .train_inst(select_ln556_reg_2125),
    .p_read(knn_set10_0),
    .min_distances_read(knn_set10_0),
    .p_read1(knn_set10_1),
    .min_distances12_read(knn_set10_1),
    .p_read2(knn_set10_2),
    .min_distances2_read(knn_set10_2),
    .p_read3(knn_set10_3),
    .min_distances3_read(knn_set10_3),
    .p_read4(knn_set10_4),
    .min_distances4_read(knn_set10_4),
    .p_read5(knn_set10_5),
    .min_distances5_read(knn_set10_5),
    .min_distances_offset(sub_ln557_reg_2079),
    .ap_return_0(grp_update_knn_fu_526_ap_return_0),
    .ap_return_1(grp_update_knn_fu_526_ap_return_1),
    .ap_return_2(grp_update_knn_fu_526_ap_return_2),
    .ap_return_3(grp_update_knn_fu_526_ap_return_3),
    .ap_return_4(grp_update_knn_fu_526_ap_return_4),
    .ap_return_5(grp_update_knn_fu_526_ap_return_5)
);

update_knn5_urem_10ns_10ns_10_14_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
urem_10ns_10ns_10_14_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln556_reg_2089),
    .din1(10'd450),
    .ce(1'b1),
    .dout(grp_fu_818_p2)
);

update_knn5_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U40(
    .din0(knn_set10_0_load_1_fu_188),
    .din1(knn_set10_1_load_1_fu_192),
    .din2(knn_set10_2_load_1_fu_196),
    .din3(knn_set10_3_load_1_fu_200),
    .din4(knn_set10_4_load_1_fu_204),
    .din5(knn_set10_5_load_1_fu_208),
    .din6(p_t_reg_2228),
    .dout(min_distance_list_2_fu_1072_p8)
);

update_knn5_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U41(
    .din0(label_list_0_1_reg_434),
    .din1(label_list_1_1_reg_424),
    .din2(label_list_2_1_reg_414),
    .din3(ap_phi_mux_i_7_phi_fu_519_p4),
    .dout(tmp_fu_1424_p5)
);

update_knn5_mux_104_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_104_32_1_1_U42(
    .din0(ap_sig_allocacmp_vote_list_9_10_load),
    .din1(ap_sig_allocacmp_vote_list_9_11_load),
    .din2(ap_sig_allocacmp_vote_list_9_12_load),
    .din3(ap_sig_allocacmp_vote_list_9_13_load),
    .din4(ap_sig_allocacmp_vote_list_9_14_load),
    .din5(ap_sig_allocacmp_vote_list_9_15_load),
    .din6(ap_sig_allocacmp_vote_list_9_16_load),
    .din7(ap_sig_allocacmp_vote_list_9_17_load),
    .din8(ap_sig_allocacmp_vote_list_9_18_load),
    .din9(ap_sig_allocacmp_vote_list_9_19_load),
    .din10(trunc_ln435_reg_2499),
    .dout(tmp_s_fu_1470_p12)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U43(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_2_fu_220),
    .din4(vote_list_9_2_fu_220),
    .din5(vote_list_9_2_fu_220),
    .din6(vote_list_9_2_fu_220),
    .din7(vote_list_9_2_fu_220),
    .din8(vote_list_9_2_fu_220),
    .din9(vote_list_9_2_fu_220),
    .din10(vote_list_9_2_fu_220),
    .din11(vote_list_9_2_fu_220),
    .din12(vote_list_9_2_fu_220),
    .din13(vote_list_9_2_fu_220),
    .din14(vote_list_9_2_fu_220),
    .din15(vote_list_9_2_fu_220),
    .din16(phi_ln_fu_1630_p17),
    .dout(phi_ln_fu_1630_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U44(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_3_fu_224),
    .din5(vote_list_9_3_fu_224),
    .din6(vote_list_9_3_fu_224),
    .din7(vote_list_9_3_fu_224),
    .din8(vote_list_9_3_fu_224),
    .din9(vote_list_9_3_fu_224),
    .din10(vote_list_9_3_fu_224),
    .din11(vote_list_9_3_fu_224),
    .din12(vote_list_9_3_fu_224),
    .din13(vote_list_9_3_fu_224),
    .din14(vote_list_9_3_fu_224),
    .din15(vote_list_9_3_fu_224),
    .din16(phi_ln445_1_fu_1675_p17),
    .dout(phi_ln445_1_fu_1675_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U45(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_4_fu_228),
    .din5(vote_list_9_4_fu_228),
    .din6(vote_list_9_4_fu_228),
    .din7(vote_list_9_4_fu_228),
    .din8(vote_list_9_4_fu_228),
    .din9(vote_list_9_4_fu_228),
    .din10(vote_list_9_4_fu_228),
    .din11(vote_list_9_4_fu_228),
    .din12(vote_list_9_4_fu_228),
    .din13(vote_list_9_4_fu_228),
    .din14(vote_list_9_4_fu_228),
    .din15(vote_list_9_4_fu_228),
    .din16(phi_ln445_2_fu_1724_p17),
    .dout(phi_ln445_2_fu_1724_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U46(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_4_fu_228),
    .din5(vote_list_9_5_fu_232),
    .din6(vote_list_9_5_fu_232),
    .din7(vote_list_9_5_fu_232),
    .din8(vote_list_9_5_fu_232),
    .din9(vote_list_9_5_fu_232),
    .din10(vote_list_9_5_fu_232),
    .din11(vote_list_9_5_fu_232),
    .din12(vote_list_9_5_fu_232),
    .din13(vote_list_9_5_fu_232),
    .din14(vote_list_9_5_fu_232),
    .din15(vote_list_9_5_fu_232),
    .din16(phi_ln445_3_fu_1769_p17),
    .dout(phi_ln445_3_fu_1769_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U47(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_4_fu_228),
    .din5(vote_list_9_5_fu_232),
    .din6(vote_list_9_6_fu_236),
    .din7(vote_list_9_6_fu_236),
    .din8(vote_list_9_6_fu_236),
    .din9(vote_list_9_6_fu_236),
    .din10(vote_list_9_6_fu_236),
    .din11(vote_list_9_6_fu_236),
    .din12(vote_list_9_6_fu_236),
    .din13(vote_list_9_6_fu_236),
    .din14(vote_list_9_6_fu_236),
    .din15(vote_list_9_6_fu_236),
    .din16(phi_ln445_4_fu_1814_p17),
    .dout(phi_ln445_4_fu_1814_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U48(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_4_fu_228),
    .din5(vote_list_9_5_fu_232),
    .din6(vote_list_9_6_fu_236),
    .din7(vote_list_9_7_fu_240),
    .din8(vote_list_9_7_fu_240),
    .din9(vote_list_9_7_fu_240),
    .din10(vote_list_9_7_fu_240),
    .din11(vote_list_9_7_fu_240),
    .din12(vote_list_9_7_fu_240),
    .din13(vote_list_9_7_fu_240),
    .din14(vote_list_9_7_fu_240),
    .din15(vote_list_9_7_fu_240),
    .din16(phi_ln445_5_fu_1859_p17),
    .dout(phi_ln445_5_fu_1859_p18)
);

update_knn5_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U49(
    .din0(vote_list_9_1_fu_216),
    .din1(vote_list_9_fu_212),
    .din2(vote_list_9_2_fu_220),
    .din3(vote_list_9_3_fu_224),
    .din4(vote_list_9_4_fu_228),
    .din5(vote_list_9_5_fu_232),
    .din6(vote_list_9_6_fu_236),
    .din7(vote_list_9_7_fu_240),
    .din8(vote_list_9_8_fu_244),
    .din9(vote_list_9_8_fu_244),
    .din10(vote_list_9_8_fu_244),
    .din11(vote_list_9_8_fu_244),
    .din12(vote_list_9_8_fu_244),
    .din13(vote_list_9_8_fu_244),
    .din14(vote_list_9_8_fu_244),
    .din15(vote_list_9_8_fu_244),
    .din16(max_vote_7_reg_2676),
    .dout(phi_ln445_6_fu_1901_p18)
);

update_knn5_mul_mul_15ns_17ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 31 ))
mul_mul_15ns_17ns_31_4_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1955_p0),
    .din1(grp_fu_1955_p1),
    .ce(1'b1),
    .dout(grp_fu_1955_p2)
);

update_knn5_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state94))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index10_load_load_fu_582_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index10_load_load_fu_582_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state65) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_knn_fu_526_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state52)) begin
            grp_update_knn_fu_526_ap_start_reg <= 1'b1;
        end else if ((grp_update_knn_fu_526_ap_ready == 1'b1)) begin
            grp_update_knn_fu_526_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_empty_n))) begin
        i_5_reg_359 <= 9'd0;
    end else if (((icmp_ln554_fu_763_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        i_5_reg_359 <= add_ln552_reg_2047;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        i_6_reg_403 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i_6_reg_403 <= select_ln368_2_reg_2218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_7_reg_515 <= 2'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln432_reg_2495 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_7_reg_515 <= add_ln432_reg_2490;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index10_load_load_fu_582_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_348 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_348 <= add_ln476_reg_1966;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        indvar_flatten_reg_392 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        indvar_flatten_reg_392 <= add_ln368_reg_2184;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        j_2_reg_474 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        j_2_reg_474 <= add_ln370_reg_2233;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        j_reg_370 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        j_reg_370 <= add_ln554_reg_2061;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_0 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_0 <= knn_set10_0_ret_reg_2148;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_0_load_1_fu_188 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_0_load_1_fu_188 <= knn_set10_0_ret_reg_2148;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_1 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_1 <= knn_set10_1_ret_reg_2154;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_1_load_1_fu_192 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_1_load_1_fu_192 <= knn_set10_1_ret_reg_2154;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_2 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_2 <= knn_set10_2_ret_reg_2160;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_2_load_1_fu_196 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_2_load_1_fu_196 <= knn_set10_2_ret_reg_2160;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_3 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_3 <= knn_set10_3_ret_reg_2166;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_3_load_1_fu_200 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_3_load_1_fu_200 <= knn_set10_3_ret_reg_2166;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_4 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_4 <= knn_set10_4_ret_reg_2172;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_4_load_1_fu_204 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_4_load_1_fu_204 <= knn_set10_4_ret_reg_2172;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_5 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_5 <= knn_set10_5_ret_reg_2178;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        knn_set10_5_load_1_fu_208 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        knn_set10_5_load_1_fu_208 <= knn_set10_5_ret_reg_2178;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        label_list_0_1_reg_434 <= reg_572;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        label_list_0_1_reg_434 <= select_ln387_6_fu_1292_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        label_list_1_1_reg_424 <= reg_566;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        label_list_1_1_reg_424 <= select_ln392_fu_1241_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        label_list_1_2_reg_485 <= reg_572;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        label_list_1_2_reg_485 <= select_ln387_8_fu_1305_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        label_list_2_1_reg_414 <= reg_561;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        label_list_2_1_reg_414 <= select_ln378_2_fu_1202_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        label_list_2_2_reg_495 <= reg_566;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        label_list_2_2_reg_495 <= select_ln392_2_fu_1270_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        min_distance_list_1_1_reg_454 <= reg_550;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        min_distance_list_1_1_reg_454 <= min_distance_list_0_5_fu_1256_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        min_distance_list_1_3_reg_464 <= reg_556;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        min_distance_list_1_3_reg_464 <= min_distance_list_1_5_fu_1299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        min_distance_list_2_1_reg_444 <= reg_545;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        min_distance_list_2_1_reg_444 <= min_distance_list_0_3_fu_1217_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        min_distance_list_2_3_reg_505 <= reg_550;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        min_distance_list_2_3_reg_505 <= min_distance_list_0_7_fu_1285_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln552_fu_747_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        phi_mul_reg_381 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        phi_mul_reg_381 <= add_ln556_1_reg_2069;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_10_fu_252 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_10_fu_252 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_11_fu_256 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_11_fu_256 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_12_fu_260 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd2) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_12_fu_260 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_13_fu_264 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd3) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_13_fu_264 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_14_fu_268 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd4) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_14_fu_268 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_15_fu_272 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd5) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_15_fu_272 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_16_fu_276 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd6) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_16_fu_276 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_17_fu_280 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd7) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_17_fu_280 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_18_fu_284 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd8) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_18_fu_284 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_19_fu_288 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001) & ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd9) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd10) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd11) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd12) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd13) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd14) | (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd15))))))))) begin
        vote_list_9_19_fu_288 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_1_fu_216 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_1_fu_216 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_2_fu_220 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd2) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_2_fu_220 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_3_fu_224 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd3) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_3_fu_224 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_4_fu_228 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd4) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_4_fu_228 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_5_fu_232 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd5) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_5_fu_232 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_6_fu_236 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd6) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_6_fu_236 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_7_fu_240 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd7) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_7_fu_240 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_8_fu_244 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd8) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_8_fu_244 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_9_fu_248 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001) & ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd9) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd10) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd11) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd12) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd13) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd14) | (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd15))))))))) begin
        vote_list_9_9_fu_248 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        vote_list_9_fu_212 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        vote_list_9_fu_212 <= vote_list_0_reg_2509;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln368_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
        add_ln368_1_reg_2208 <= add_ln368_1_fu_1001_p2;
        empty_38_reg_2213 <= empty_38_fu_1007_p1;
        icmp_ln370_reg_2197 <= icmp_ln370_fu_987_p2;
        select_ln368_2_reg_2218 <= select_ln368_2_fu_1011_p3;
        select_ln368_reg_2202 <= select_ln368_fu_993_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        add_ln368_reg_2184 <= add_ln368_fu_953_p2;
        empty_36_reg_2189 <= empty_36_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        add_ln370_reg_2233 <= add_ln370_fu_1049_p2;
        p_t_reg_2228 <= p_t_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln476_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln414_reg_1985 <= add_ln414_fu_608_p2;
        icmp_ln414_reg_1980 <= icmp_ln414_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln432_reg_2490 <= add_ln432_fu_1412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln476_reg_1966 <= add_ln476_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln552_reg_2047 <= add_ln552_fu_737_p2;
        zext_ln552_reg_2052[8 : 0] <= zext_ln552_fu_743_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln554_reg_2061 <= add_ln554_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln554_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        add_ln556_1_reg_2069 <= add_ln556_1_fu_769_p2;
        sub_ln557_reg_2079 <= sub_ln557_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        add_ln556_reg_2089 <= add_ln556_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        and_ln378_1_reg_2275 <= and_ln378_1_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_1971 <= empty_fu_592_p1;
        icmp_ln414_reg_1980_pp0_iter1_reg <= icmp_ln414_reg_1980;
        icmp_ln476_reg_1976 <= icmp_ln476_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        icmp_ln377_1_reg_2255 <= icmp_ln377_1_fu_1094_p2;
        icmp_ln377_reg_2249 <= icmp_ln377_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        icmp_ln377_2_reg_2265 <= icmp_ln377_2_fu_1126_p2;
        select_ln378_reg_2260[0] <= select_ln378_fu_1118_p3[0];
select_ln378_reg_2260[3] <= select_ln378_fu_1118_p3[3];
select_ln378_reg_2260[5] <= select_ln378_fu_1118_p3[5];
        tmp_2_reg_2270 <= {{select_ln378_fu_1118_p3[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        icmp_ln387_1_reg_2288 <= icmp_ln387_1_fu_1173_p2;
        icmp_ln387_reg_2281 <= icmp_ln387_fu_1167_p2;
        icmp_ln392_reg_2300 <= icmp_ln392_fu_1179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln432_reg_2495 <= icmp_ln432_fu_1418_p2;
        trunc_ln435_reg_2499_pp2_iter1_reg <= trunc_ln435_reg_2499;
        vote_list_0_reg_2509 <= vote_list_0_fu_1495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        icmp_ln445_1_reg_2553 <= icmp_ln445_1_fu_1605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        icmp_ln445_2_reg_2572 <= icmp_ln445_2_fu_1655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        icmp_ln445_3_reg_2591 <= icmp_ln445_3_fu_1700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        icmp_ln445_4_reg_2610 <= icmp_ln445_4_fu_1749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        icmp_ln445_5_reg_2629 <= icmp_ln445_5_fu_1794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        icmp_ln445_6_reg_2648 <= icmp_ln445_6_fu_1839_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        icmp_ln445_7_reg_2671 <= icmp_ln445_7_fu_1884_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        icmp_ln445_8_reg_2687 <= icmp_ln445_8_fu_1925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        icmp_ln445_reg_2539 <= icmp_ln445_fu_1586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln556_reg_2095 <= icmp_ln556_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (index10_load_reg_1962 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        index10 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        index10_load_reg_1962 <= index10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        knn_set10_0_ret_reg_2148 <= grp_update_knn_fu_526_ap_return_0;
        knn_set10_1_ret_reg_2154 <= grp_update_knn_fu_526_ap_return_1;
        knn_set10_2_ret_reg_2160 <= grp_update_knn_fu_526_ap_return_2;
        knn_set10_3_ret_reg_2166 <= grp_update_knn_fu_526_ap_return_3;
        knn_set10_4_ret_reg_2172 <= grp_update_knn_fu_526_ap_return_4;
        knn_set10_5_ret_reg_2178 <= grp_update_knn_fu_526_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        max_vote_1_reg_2558 <= max_vote_1_fu_1619_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        max_vote_2_reg_2577 <= max_vote_2_fu_1665_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        max_vote_3_reg_2596 <= max_vote_3_fu_1713_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        max_vote_4_reg_2615 <= max_vote_4_fu_1759_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        max_vote_5_reg_2634 <= max_vote_5_fu_1804_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        max_vote_6_reg_2653 <= max_vote_6_fu_1849_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        max_vote_7_reg_2676 <= max_vote_7_fu_1894_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        max_vote_reg_2544 <= max_vote_fu_1592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        min_distance_list_2_reg_2238 <= min_distance_list_2_fu_1072_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Result_19_reg_2042 <= p_Result_19_fu_717_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln370_reg_2197 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        p_mid1_reg_2223 <= p_mid1_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        phi_ln445_1_reg_2583 <= phi_ln445_1_fu_1675_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        phi_ln445_2_reg_2602 <= phi_ln445_2_fu_1724_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        phi_ln445_3_reg_2621 <= phi_ln445_3_fu_1769_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        phi_ln445_4_reg_2640 <= phi_ln445_4_fu_1814_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        phi_ln445_5_reg_2663 <= phi_ln445_5_fu_1859_p18;
        zext_ln438_2_reg_2658[2 : 0] <= zext_ln438_2_fu_1856_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        phi_ln445_6_reg_2682 <= phi_ln445_6_fu_1901_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        phi_ln_reg_2564 <= phi_ln_fu_1630_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_545 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_550 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_556 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_561 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_566 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_572 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_578 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln414_reg_1990 <= select_ln414_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        select_ln556_reg_2125 <= select_ln556_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_70_reg_1995 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln432_reg_2495 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        tmp_s_reg_2504 <= tmp_s_fu_1470_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln556_reg_2095 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        training_set10_V_0_load_reg_2115 <= training_set10_V_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln556_reg_2095 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        training_set10_V_1_load_reg_2120 <= training_set10_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln432_fu_1418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln435_reg_2499 <= trunc_ln435_fu_1436_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        trunc_ln_reg_2084 <= {{grp_fu_1955_p2[29:21]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        urem_ln556_reg_2100 <= grp_fu_818_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_blk_n = Input_1_empty_n;
    end else begin
        Input_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state27) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state26) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state25) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state24) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state23) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state21) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state19) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state17) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == Input_1_empty_n)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == Input_1_empty_n)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | (~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_read = 1'b1;
    end else begin
        Input_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state12) | ((index10_load_reg_1962 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == Output_1_V_TREADY_int_regslice)) begin
        if ((1'b1 == ap_CS_fsm_state93)) begin
            Output_1_V_TDATA_int_regslice = p_Result_21_fu_1946_p3;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            Output_1_V_TDATA_int_regslice = 32'd2001;
        end else begin
            Output_1_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state93) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == Output_1_V_TREADY_int_regslice)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln476_fu_596_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln432_fu_1418_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state94))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln432_reg_2495 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_7_phi_fu_519_p4 = add_ln432_reg_2490;
    end else begin
        ap_phi_mux_i_7_phi_fu_519_p4 = i_7_reg_515;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln476_reg_1976 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_352_p4 = add_ln476_reg_1966;
    end else begin
        ap_phi_mux_i_phi_fu_352_p4 = i_reg_348;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state94))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_10_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_10_load = vote_list_9_10_fu_252;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_11_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_11_load = vote_list_9_11_fu_256;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd2) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_12_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_12_load = vote_list_9_12_fu_260;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd3) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_13_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_13_load = vote_list_9_13_fu_264;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd4) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_14_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_14_load = vote_list_9_14_fu_268;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd5) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_15_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_15_load = vote_list_9_15_fu_272;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd6) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_16_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_16_load = vote_list_9_16_fu_276;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd7) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_17_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_17_load = vote_list_9_17_fu_280;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd8) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_sig_allocacmp_vote_list_9_18_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_18_load = vote_list_9_18_fu_284;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1) & ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd9) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd10) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd11) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd12) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd13) | ((trunc_ln435_reg_2499_pp2_iter1_reg == 4'd14) | (trunc_ln435_reg_2499_pp2_iter1_reg == 4'd15))))))))) begin
        ap_sig_allocacmp_vote_list_9_19_load = vote_list_0_reg_2509;
    end else begin
        ap_sig_allocacmp_vote_list_9_19_load = vote_list_9_19_fu_288;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        training_set10_V_0_address0 = zext_ln556_1_fu_828_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        training_set10_V_0_address0 = zext_ln414_fu_619_p1;
    end else begin
        training_set10_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        training_set10_V_0_ce0 = 1'b1;
    end else begin
        training_set10_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1980_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        training_set10_V_0_we0 = 1'b1;
    end else begin
        training_set10_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        training_set10_V_1_address0 = zext_ln556_1_fu_828_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        training_set10_V_1_address0 = zext_ln414_fu_619_p1;
    end else begin
        training_set10_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        training_set10_V_1_ce0 = 1'b1;
    end else begin
        training_set10_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1980_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        training_set10_V_1_we0 = 1'b1;
    end else begin
        training_set10_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index10_load_load_fu_582_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index10_load_load_fu_582_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln476_fu_596_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln476_fu_596_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b1 == ap_block_state13_io) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln552_fu_747_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln554_fu_763_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_update_knn_fu_526_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln368_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln432_fu_1418_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln432_fu_1418_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((1'b1 == ap_CS_fsm_state93) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln368_1_fu_1001_p2 = (i_6_reg_403 + 2'd1);

assign add_ln368_fu_953_p2 = (indvar_flatten_reg_392 + 3'd1);

assign add_ln370_fu_1049_p2 = (select_ln368_reg_2202 + 2'd1);

assign add_ln414_fu_608_p2 = (empty_fu_592_p1 + 9'd62);

assign add_ln432_fu_1412_p2 = (ap_phi_mux_i_7_phi_fu_519_p4 + 2'd1);

assign add_ln476_fu_586_p2 = (ap_phi_mux_i_phi_fu_352_p4 + 10'd1);

assign add_ln552_fu_737_p2 = (i_5_reg_359 + 9'd1);

assign add_ln554_fu_753_p2 = (j_reg_370 + 2'd1);

assign add_ln556_1_fu_769_p2 = (phi_mul_reg_381 + 16'd18000);

assign add_ln556_fu_813_p2 = (zext_ln556_fu_810_p1 + zext_ln552_reg_2052);

assign and_ln378_1_fu_1146_p2 = (icmp_ln379_fu_1141_p2 & icmp_ln377_2_reg_2265);

assign and_ln378_2_fu_1197_p2 = (xor_ln387_fu_1192_p2 & and_ln378_1_reg_2275);

assign and_ln378_fu_1104_p2 = (xor_ln379_fu_1099_p2 & icmp_ln377_1_reg_2255);

assign and_ln392_fu_1236_p2 = (xor_ln387_1_fu_1231_p2 & icmp_ln392_reg_2300);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd89];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (1'b0 == Input_1_empty_n);
end

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13 = ((1'b0 == Input_1_empty_n) | ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_state13_io = ((index10_load_reg_1962 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

assign ap_block_state65_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

always @ (*) begin
    ap_block_state94 = ((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln476_reg_1976 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_34_fu_775_p1 = phi_mul_reg_381[14:0];

assign empty_35_fu_963_p1 = i_6_reg_403[0:0];

assign empty_36_fu_975_p2 = (p_shl5_fu_967_p3 - zext_ln368_fu_959_p1);

assign empty_38_fu_1007_p1 = add_ln368_1_fu_1001_p2[0:0];

assign empty_fu_592_p1 = ap_phi_mux_i_phi_fu_352_p4[8:0];

assign grp_fu_1955_p0 = grp_fu_1955_p00;

assign grp_fu_1955_p00 = empty_34_fu_775_p1;

assign grp_fu_1955_p1 = 31'd52429;

assign grp_update_knn_fu_526_ap_start = grp_update_knn_fu_526_ap_start_reg;

assign icmp_ln368_fu_981_p2 = ((indvar_flatten_reg_392 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln370_fu_987_p2 = ((j_2_reg_474 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln377_1_fu_1094_p2 = (($signed(min_distance_list_2_reg_2238) < $signed(min_distance_list_1_1_reg_454)) ? 1'b1 : 1'b0);

assign icmp_ln377_2_fu_1126_p2 = (($signed(min_distance_list_2_reg_2238) < $signed(min_distance_list_2_1_reg_444)) ? 1'b1 : 1'b0);

assign icmp_ln377_fu_1089_p2 = (($signed(min_distance_list_2_reg_2238) < $signed(min_distance_list_1_3_reg_464)) ? 1'b1 : 1'b0);

assign icmp_ln379_fu_1141_p2 = ((tmp_2_reg_2270 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln387_1_fu_1173_p2 = ((select_ln378_1_fu_1151_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln387_fu_1167_p2 = ((tmp_3_fu_1157_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln392_fu_1179_p2 = ((select_ln378_1_fu_1151_p3 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_602_p2 = ((ap_phi_mux_i_phi_fu_352_p4 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln432_fu_1418_p2 = ((ap_phi_mux_i_7_phi_fu_519_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln445_1_fu_1605_p2 = (($signed(vote_list_9_2_fu_220) < $signed(select_ln445_fu_1600_p3)) ? 1'b1 : 1'b0);

assign icmp_ln445_2_fu_1655_p2 = (($signed(vote_list_9_3_fu_224) < $signed(phi_ln_reg_2564)) ? 1'b1 : 1'b0);

assign icmp_ln445_3_fu_1700_p2 = (($signed(vote_list_9_4_fu_228) < $signed(phi_ln445_1_reg_2583)) ? 1'b1 : 1'b0);

assign icmp_ln445_4_fu_1749_p2 = (($signed(vote_list_9_5_fu_232) < $signed(phi_ln445_2_reg_2602)) ? 1'b1 : 1'b0);

assign icmp_ln445_5_fu_1794_p2 = (($signed(vote_list_9_6_fu_236) < $signed(phi_ln445_3_reg_2621)) ? 1'b1 : 1'b0);

assign icmp_ln445_6_fu_1839_p2 = (($signed(vote_list_9_7_fu_240) < $signed(phi_ln445_4_reg_2640)) ? 1'b1 : 1'b0);

assign icmp_ln445_7_fu_1884_p2 = (($signed(vote_list_9_8_fu_244) < $signed(phi_ln445_5_reg_2663)) ? 1'b1 : 1'b0);

assign icmp_ln445_8_fu_1925_p2 = (($signed(vote_list_9_9_fu_248) < $signed(phi_ln445_6_reg_2682)) ? 1'b1 : 1'b0);

assign icmp_ln445_fu_1586_p2 = (($signed(vote_list_9_fu_212) < $signed(vote_list_9_1_fu_216)) ? 1'b1 : 1'b0);

assign icmp_ln476_fu_596_p2 = ((ap_phi_mux_i_phi_fu_352_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln552_fu_747_p2 = ((i_5_reg_359 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln554_fu_763_p2 = ((j_reg_370 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln556_fu_823_p2 = ((add_ln556_reg_2089 < 10'd450) ? 1'b1 : 1'b0);

assign index10_load_load_fu_582_p1 = index10;

assign j_2_cast_fu_1040_p1 = select_ln368_reg_2202;

assign max_vote_1_fu_1619_p3 = ((xor_ln445_fu_1614_p2[0:0] == 1'b1) ? 2'd2 : zext_ln438_fu_1611_p1);

assign max_vote_2_fu_1665_p3 = ((xor_ln445_1_fu_1660_p2[0:0] == 1'b1) ? 2'd3 : max_vote_1_reg_2558);

assign max_vote_3_fu_1713_p3 = ((xor_ln445_2_fu_1708_p2[0:0] == 1'b1) ? 3'd4 : zext_ln438_1_fu_1705_p1);

assign max_vote_4_fu_1759_p3 = ((xor_ln445_3_fu_1754_p2[0:0] == 1'b1) ? 3'd5 : max_vote_3_reg_2596);

assign max_vote_5_fu_1804_p3 = ((xor_ln445_4_fu_1799_p2[0:0] == 1'b1) ? 3'd6 : max_vote_4_reg_2615);

assign max_vote_6_fu_1849_p3 = ((xor_ln445_5_fu_1844_p2[0:0] == 1'b1) ? 3'd7 : max_vote_5_reg_2634);

assign max_vote_7_fu_1894_p3 = ((xor_ln445_6_fu_1889_p2[0:0] == 1'b1) ? 4'd8 : zext_ln438_2_reg_2658);

assign max_vote_8_fu_1935_p3 = ((xor_ln445_7_fu_1930_p2[0:0] == 1'b1) ? 4'd9 : max_vote_7_reg_2676);

assign max_vote_fu_1592_p2 = (icmp_ln445_reg_2539 ^ 1'd1);

assign min_distance_list_0_2_fu_1210_p3 = ((icmp_ln387_reg_2281[0:0] == 1'b1) ? min_distance_list_2_3_reg_505 : min_distance_list_2_1_reg_444);

assign min_distance_list_0_3_fu_1217_p3 = ((and_ln378_2_fu_1197_p2[0:0] == 1'b1) ? min_distance_list_2_reg_2238 : min_distance_list_0_2_fu_1210_p3);

assign min_distance_list_0_4_fu_1249_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? min_distance_list_1_3_reg_464 : min_distance_list_1_1_reg_454);

assign min_distance_list_0_5_fu_1256_p3 = ((and_ln392_fu_1236_p2[0:0] == 1'b1) ? min_distance_list_2_reg_2238 : min_distance_list_0_4_fu_1249_p3);

assign min_distance_list_0_6_fu_1278_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? min_distance_list_1_3_reg_464 : min_distance_list_2_3_reg_505);

assign min_distance_list_0_7_fu_1285_p3 = ((and_ln392_fu_1236_p2[0:0] == 1'b1) ? min_distance_list_2_reg_2238 : min_distance_list_0_6_fu_1278_p3);

assign min_distance_list_1_5_fu_1299_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? min_distance_list_2_reg_2238 : min_distance_list_1_3_reg_464);

assign or_ln378_fu_1113_p2 = (icmp_ln377_reg_2249 | and_ln378_fu_1104_p2);

assign p_Result_19_fu_717_p9 = {{{{{{{{reg_545}, {reg_550}}, {reg_556}}, {reg_561}}, {reg_566}}, {reg_572}}, {reg_578}}, {Input_1_dout}};

assign p_Result_21_fu_1946_p3 = {{24'd0}, {zext_ln438_3_fu_1942_p1}};

assign p_Result_s_fu_624_p9 = {{{{{{{{reg_545}, {reg_550}}, {reg_556}}, {reg_561}}, {reg_566}}, {reg_572}}, {reg_578}}, {tmp_V_70_reg_1995}};

assign p_mid1_fu_1029_p2 = (p_shl5_mid1_fu_1022_p3 - zext_ln368_1_fu_1019_p1);

assign p_shl5_fu_967_p3 = {{empty_35_fu_963_p1}, {2'd0}};

assign p_shl5_mid1_fu_1022_p3 = {{empty_38_reg_2213}, {2'd0}};

assign p_t_fu_1043_p2 = (select_ln368_1_fu_1035_p3 + j_2_cast_fu_1040_p1);

assign phi_ln445_1_fu_1675_p17 = max_vote_2_reg_2577;

assign phi_ln445_2_fu_1724_p17 = max_vote_3_reg_2596;

assign phi_ln445_3_fu_1769_p17 = max_vote_4_reg_2615;

assign phi_ln445_4_fu_1814_p17 = max_vote_5_reg_2634;

assign phi_ln445_5_fu_1859_p17 = max_vote_6_reg_2653;

assign phi_ln_fu_1630_p17 = max_vote_1_reg_2558;

assign select_ln368_1_fu_1035_p3 = ((icmp_ln370_reg_2197[0:0] == 1'b1) ? p_mid1_reg_2223 : empty_36_reg_2189);

assign select_ln368_2_fu_1011_p3 = ((icmp_ln370_fu_987_p2[0:0] == 1'b1) ? add_ln368_1_fu_1001_p2 : i_6_reg_403);

assign select_ln368_fu_993_p3 = ((icmp_ln370_fu_987_p2[0:0] == 1'b1) ? 2'd0 : j_2_reg_474);

assign select_ln378_1_fu_1151_p3 = ((and_ln378_1_reg_2275[0:0] == 1'b1) ? 6'd2 : select_ln378_reg_2260);

assign select_ln378_2_fu_1202_p3 = ((and_ln378_2_fu_1197_p2[0:0] == 1'b1) ? 32'd9 : select_ln387_fu_1185_p3);

assign select_ln378_fu_1118_p3 = ((or_ln378_fu_1113_p2[0:0] == 1'b1) ? zext_ln378_fu_1109_p1 : 6'd40);

assign select_ln387_2_fu_1224_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? label_list_1_2_reg_485 : label_list_1_1_reg_424);

assign select_ln387_4_fu_1263_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? label_list_1_2_reg_485 : label_list_2_2_reg_495);

assign select_ln387_6_fu_1292_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? 32'd9 : label_list_0_1_reg_434);

assign select_ln387_8_fu_1305_p3 = ((icmp_ln387_1_reg_2288[0:0] == 1'b1) ? 32'd9 : label_list_1_2_reg_485);

assign select_ln387_fu_1185_p3 = ((icmp_ln387_reg_2281[0:0] == 1'b1) ? label_list_2_2_reg_495 : label_list_2_1_reg_414);

assign select_ln392_2_fu_1270_p3 = ((and_ln392_fu_1236_p2[0:0] == 1'b1) ? 32'd9 : select_ln387_4_fu_1263_p3);

assign select_ln392_fu_1241_p3 = ((and_ln392_fu_1236_p2[0:0] == 1'b1) ? 32'd9 : select_ln387_2_fu_1224_p3);

assign select_ln414_fu_614_p3 = ((icmp_ln414_reg_1980[0:0] == 1'b1) ? empty_reg_1971 : add_ln414_reg_1985);

assign select_ln445_fu_1600_p3 = ((max_vote_reg_2544[0:0] == 1'b1) ? vote_list_9_fu_212 : vote_list_9_1_fu_216);

assign select_ln556_fu_833_p3 = ((icmp_ln556_reg_2095[0:0] == 1'b1) ? training_set10_V_0_load_reg_2115 : training_set10_V_1_load_reg_2120);

assign shl_ln_fu_787_p3 = {{trunc_ln557_fu_783_p1}, {2'd0}};

assign sub_ln557_fu_795_p2 = (shl_ln_fu_787_p3 - zext_ln554_fu_759_p1);

assign tmp_3_fu_1157_p4 = {{select_ln378_1_fu_1151_p3[5:1]}};

assign trunc_ln435_fu_1436_p1 = tmp_fu_1424_p5[3:0];

assign trunc_ln557_fu_783_p1 = j_reg_370[0:0];

assign vote_list_0_fu_1495_p2 = (tmp_s_reg_2504 + 32'd1);

assign xor_ln379_fu_1099_p2 = (icmp_ln377_reg_2249 ^ 1'd1);

assign xor_ln387_1_fu_1231_p2 = (icmp_ln387_1_reg_2288 ^ 1'd1);

assign xor_ln387_fu_1192_p2 = (icmp_ln387_reg_2281 ^ 1'd1);

assign xor_ln445_1_fu_1660_p2 = (icmp_ln445_2_reg_2572 ^ 1'd1);

assign xor_ln445_2_fu_1708_p2 = (icmp_ln445_3_reg_2591 ^ 1'd1);

assign xor_ln445_3_fu_1754_p2 = (icmp_ln445_4_reg_2610 ^ 1'd1);

assign xor_ln445_4_fu_1799_p2 = (icmp_ln445_5_reg_2629 ^ 1'd1);

assign xor_ln445_5_fu_1844_p2 = (icmp_ln445_6_reg_2648 ^ 1'd1);

assign xor_ln445_6_fu_1889_p2 = (icmp_ln445_7_reg_2671 ^ 1'd1);

assign xor_ln445_7_fu_1930_p2 = (icmp_ln445_8_reg_2687 ^ 1'd1);

assign xor_ln445_fu_1614_p2 = (icmp_ln445_1_reg_2553 ^ 1'd1);

assign zext_ln368_1_fu_1019_p1 = add_ln368_1_reg_2208;

assign zext_ln368_fu_959_p1 = i_6_reg_403;

assign zext_ln378_fu_1109_p1 = and_ln378_fu_1104_p2;

assign zext_ln414_fu_619_p1 = select_ln414_reg_1990;

assign zext_ln438_1_fu_1705_p1 = max_vote_2_reg_2577;

assign zext_ln438_2_fu_1856_p1 = max_vote_6_reg_2653;

assign zext_ln438_3_fu_1942_p1 = max_vote_8_fu_1935_p3;

assign zext_ln438_fu_1611_p1 = max_vote_reg_2544;

assign zext_ln552_fu_743_p1 = i_5_reg_359;

assign zext_ln554_fu_759_p1 = j_reg_370;

assign zext_ln556_1_fu_828_p1 = urem_ln556_reg_2100;

assign zext_ln556_fu_810_p1 = trunc_ln_reg_2084;

always @ (posedge ap_clk) begin
    zext_ln552_reg_2052[9] <= 1'b0;
    select_ln378_reg_2260[2:1] <= 2'b00;
    select_ln378_reg_2260[4] <= 1'b0;
    zext_ln438_2_reg_2658[3] <= 1'b0;
end

endmodule //update_knn5_update_knn10_sub
