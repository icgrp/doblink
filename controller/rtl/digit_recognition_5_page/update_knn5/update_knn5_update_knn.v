// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn5_update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst,
        train_inst,
        p_read,
        min_distances_read,
        p_read1,
        min_distances12_read,
        p_read2,
        min_distances2_read,
        p_read3,
        min_distances3_read,
        p_read4,
        min_distances4_read,
        p_read5,
        min_distances5_read,
        min_distances_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_state5 = 10'd4;
parameter    ap_ST_fsm_state6 = 10'd8;
parameter    ap_ST_fsm_state7 = 10'd16;
parameter    ap_ST_fsm_state8 = 10'd32;
parameter    ap_ST_fsm_state9 = 10'd64;
parameter    ap_ST_fsm_state10 = 10'd128;
parameter    ap_ST_fsm_state11 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] test_inst;
input  [255:0] train_inst;
input  [31:0] p_read;
input  [31:0] min_distances_read;
input  [31:0] p_read1;
input  [31:0] min_distances12_read;
input  [31:0] p_read2;
input  [31:0] min_distances2_read;
input  [31:0] p_read3;
input  [31:0] min_distances3_read;
input  [31:0] p_read4;
input  [31:0] min_distances4_read;
input  [31:0] p_read5;
input  [31:0] min_distances5_read;
input  [2:0] min_distances_offset;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] dist_reg_180;
reg   [8:0] i_reg_192;
wire   [255:0] ret_fu_293_p2;
reg   [255:0] ret_reg_770;
wire   [0:0] tmp_4_fu_299_p3;
reg   [0:0] tmp_4_reg_778;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_4_reg_778_pp0_iter1_reg;
wire   [8:0] i_11_fu_307_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] add_ln11_fu_395_p2;
reg   [1:0] add_ln11_reg_787;
wire   [1:0] add_ln11_1_fu_401_p2;
reg   [1:0] add_ln11_1_reg_792;
wire   [2:0] add_ln11_2_fu_413_p2;
reg   [2:0] add_ln11_2_reg_797;
wire   [8:0] cnt_1_fu_422_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] zext_ln24_1_fu_428_p1;
reg   [31:0] zext_ln24_1_reg_807;
wire    ap_CS_fsm_state5;
wire   [1:0] add_ln33_fu_432_p2;
reg   [1:0] add_ln33_reg_818;
wire    ap_CS_fsm_state6;
wire   [2:0] add_ln35_fu_448_p2;
reg   [2:0] add_ln35_reg_826;
wire   [0:0] icmp_ln33_fu_438_p2;
wire   [0:0] icmp_ln43_fu_453_p2;
reg   [0:0] icmp_ln43_reg_831;
wire   [31:0] tmp_fu_458_p8;
reg   [31:0] tmp_reg_835;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln35_fu_469_p2;
reg   [0:0] icmp_ln35_reg_841;
wire    ap_CS_fsm_state8;
wire   [31:0] max_dist_id_1_fu_478_p3;
wire    ap_CS_fsm_state9;
wire   [31:0] max_dist_1_fu_485_p3;
wire   [2:0] add_ln44_fu_495_p2;
reg   [2:0] add_ln44_reg_857;
wire    ap_CS_fsm_state10;
wire   [31:0] select_ln44_fu_626_p3;
reg   [31:0] select_ln44_reg_867;
wire    ap_CS_fsm_state11;
wire   [31:0] select_ln44_1_fu_632_p3;
reg   [31:0] select_ln44_1_reg_872;
wire   [31:0] select_ln44_2_fu_638_p3;
reg   [31:0] select_ln44_2_reg_877;
wire   [31:0] select_ln44_3_fu_644_p3;
reg   [31:0] select_ln44_3_reg_882;
wire   [31:0] select_ln44_4_fu_650_p3;
reg   [31:0] select_ln44_4_reg_887;
wire   [31:0] select_ln44_5_fu_656_p3;
reg   [31:0] select_ln44_5_reg_892;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] k_reg_203;
reg   [31:0] max_dist_reg_215;
reg   [31:0] max_dist_id_reg_227;
reg   [31:0] ap_phi_mux_phi_ln46_phi_fu_242_p4;
reg   [31:0] phi_ln46_reg_239;
wire    ap_CS_fsm_state12;
reg   [31:0] ap_phi_mux_phi_ln46_1_phi_fu_251_p4;
reg   [31:0] phi_ln46_1_reg_248;
reg   [31:0] ap_phi_mux_phi_ln46_2_phi_fu_260_p4;
reg   [31:0] phi_ln46_2_reg_257;
reg   [31:0] ap_phi_mux_phi_ln46_3_phi_fu_269_p4;
reg   [31:0] phi_ln46_3_reg_266;
reg   [31:0] ap_phi_mux_phi_ln46_4_phi_fu_278_p4;
reg   [31:0] phi_ln46_4_reg_275;
reg   [31:0] ap_phi_mux_phi_ln46_5_phi_fu_287_p4;
reg   [31:0] phi_ln46_5_reg_284;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln24_fu_313_p1;
wire   [0:0] tmp_5_fu_321_p3;
wire   [7:0] trunc_ln24_fu_317_p1;
wire   [7:0] i_8_fu_332_p2;
wire   [31:0] zext_ln8_fu_338_p1;
wire   [0:0] tmp_6_fu_342_p3;
wire   [7:0] i_9_fu_353_p2;
wire   [31:0] zext_ln8_1_fu_359_p1;
wire   [0:0] tmp_7_fu_363_p3;
wire   [7:0] i_10_fu_374_p2;
wire   [31:0] zext_ln8_2_fu_380_p1;
wire   [0:0] tmp_8_fu_384_p3;
wire   [1:0] zext_ln8_3_fu_328_p1;
wire   [1:0] zext_ln8_4_fu_349_p1;
wire   [1:0] zext_ln8_5_fu_370_p1;
wire   [1:0] zext_ln11_fu_391_p1;
wire   [2:0] zext_ln11_2_fu_410_p1;
wire   [2:0] zext_ln11_1_fu_407_p1;
wire   [8:0] zext_ln11_3_fu_419_p1;
wire   [2:0] zext_ln35_fu_444_p1;
wire   [31:0] zext_ln35_1_fu_474_p1;
wire   [2:0] trunc_ln44_fu_491_p1;
wire   [0:0] write_flag_fu_500_p10;
wire   [0:0] write_flag4_fu_563_p10;
wire   [0:0] write_flag8_fu_605_p10;
wire   [0:0] write_flag3_fu_584_p10;
wire   [0:0] write_flag2_fu_542_p10;
wire   [0:0] write_flag1_fu_521_p10;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
end

update_knn5_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U1(
    .din0(min_distances_read),
    .din1(min_distances12_read),
    .din2(min_distances2_read),
    .din3(min_distances3_read),
    .din4(min_distances4_read),
    .din5(min_distances5_read),
    .din6(add_ln35_reg_826),
    .dout(tmp_fu_458_p8)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U2(
    .din0(1'd1),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(add_ln44_reg_857),
    .dout(write_flag_fu_500_p10)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U3(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd1),
    .din6(1'd1),
    .din7(1'd1),
    .din8(add_ln44_reg_857),
    .dout(write_flag1_fu_521_p10)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U4(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd1),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(add_ln44_reg_857),
    .dout(write_flag2_fu_542_p10)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U5(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(add_ln44_reg_857),
    .dout(write_flag4_fu_563_p10)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U6(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd1),
    .din4(1'd0),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(add_ln44_reg_857),
    .dout(write_flag3_fu_584_p10)
);

update_knn5_mux_83_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 1 ))
mux_83_1_1_1_U7(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd0),
    .din5(1'd0),
    .din6(1'd0),
    .din7(1'd0),
    .din8(add_ln44_reg_857),
    .dout(write_flag8_fu_605_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_0_preg <= ap_phi_mux_phi_ln46_5_phi_fu_287_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_1_preg <= ap_phi_mux_phi_ln46_2_phi_fu_260_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_2_preg <= ap_phi_mux_phi_ln46_phi_fu_242_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_3_preg <= ap_phi_mux_phi_ln46_1_phi_fu_251_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_4_preg <= ap_phi_mux_phi_ln46_3_phi_fu_269_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_return_5_preg <= ap_phi_mux_phi_ln46_4_phi_fu_278_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_4_reg_778_pp0_iter1_reg == 1'd0))) begin
        dist_reg_180 <= cnt_1_fu_422_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dist_reg_180 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_4_fu_299_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_192 <= i_11_fu_307_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_192 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_203 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_203 <= add_ln33_reg_818;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_dist_id_reg_227 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_dist_id_reg_227 <= max_dist_id_1_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_dist_reg_215 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_dist_reg_215 <= max_dist_1_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_1_reg_248 <= p_read3;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_1_reg_248 <= select_ln44_3_reg_882;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_2_reg_257 <= p_read1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_2_reg_257 <= select_ln44_1_reg_872;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_3_reg_266 <= p_read4;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_3_reg_266 <= select_ln44_4_reg_887;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_4_reg_275 <= p_read5;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_4_reg_275 <= select_ln44_5_reg_892;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_5_reg_284 <= p_read;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_5_reg_284 <= select_ln44_reg_867;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
        phi_ln46_reg_239 <= p_read2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        phi_ln46_reg_239 <= select_ln44_2_reg_877;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_4_fu_299_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln11_1_reg_792 <= add_ln11_1_fu_401_p2;
        add_ln11_reg_787 <= add_ln11_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_4_reg_778 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln11_2_reg_797 <= add_ln11_2_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln33_reg_818 <= add_ln33_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln33_fu_438_p2 == 1'd0))) begin
        add_ln35_reg_826 <= add_ln35_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd1))) begin
        add_ln44_reg_857 <= add_ln44_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln35_reg_841 <= icmp_ln35_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln33_fu_438_p2 == 1'd1))) begin
        icmp_ln43_reg_831 <= icmp_ln43_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ret_reg_770 <= ret_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln44_1_reg_872 <= select_ln44_1_fu_632_p3;
        select_ln44_2_reg_877 <= select_ln44_2_fu_638_p3;
        select_ln44_3_reg_882 <= select_ln44_3_fu_644_p3;
        select_ln44_4_reg_887 <= select_ln44_4_fu_650_p3;
        select_ln44_5_reg_892 <= select_ln44_5_fu_656_p3;
        select_ln44_reg_867 <= select_ln44_fu_626_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_778 <= i_reg_192[32'd8];
        tmp_4_reg_778_pp0_iter1_reg <= tmp_4_reg_778;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_reg_835 <= tmp_fu_458_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        zext_ln24_1_reg_807[8 : 0] <= zext_ln24_1_fu_428_p1[8 : 0];
    end
end

always @ (*) begin
    if ((tmp_4_fu_299_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_1_phi_fu_251_p4 = select_ln44_3_reg_882;
    end else begin
        ap_phi_mux_phi_ln46_1_phi_fu_251_p4 = phi_ln46_1_reg_248;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_2_phi_fu_260_p4 = select_ln44_1_reg_872;
    end else begin
        ap_phi_mux_phi_ln46_2_phi_fu_260_p4 = phi_ln46_2_reg_257;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_3_phi_fu_269_p4 = select_ln44_4_reg_887;
    end else begin
        ap_phi_mux_phi_ln46_3_phi_fu_269_p4 = phi_ln46_3_reg_266;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_4_phi_fu_278_p4 = select_ln44_5_reg_892;
    end else begin
        ap_phi_mux_phi_ln46_4_phi_fu_278_p4 = phi_ln46_4_reg_275;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_5_phi_fu_287_p4 = select_ln44_reg_867;
    end else begin
        ap_phi_mux_phi_ln46_5_phi_fu_287_p4 = phi_ln46_5_reg_284;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_reg_831 == 1'd1))) begin
        ap_phi_mux_phi_ln46_phi_fu_242_p4 = select_ln44_2_reg_877;
    end else begin
        ap_phi_mux_phi_ln46_phi_fu_242_p4 = phi_ln46_reg_239;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_0 = ap_phi_mux_phi_ln46_5_phi_fu_287_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_1 = ap_phi_mux_phi_ln46_2_phi_fu_260_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_2 = ap_phi_mux_phi_ln46_phi_fu_242_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_3 = ap_phi_mux_phi_ln46_1_phi_fu_251_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_4 = ap_phi_mux_phi_ln46_3_phi_fu_269_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_return_5 = ap_phi_mux_phi_ln46_4_phi_fu_278_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_4_fu_299_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_4_fu_299_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln33_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln43_reg_831 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_401_p2 = (zext_ln8_5_fu_370_p1 + zext_ln11_fu_391_p1);

assign add_ln11_2_fu_413_p2 = (zext_ln11_2_fu_410_p1 + zext_ln11_1_fu_407_p1);

assign add_ln11_fu_395_p2 = (zext_ln8_3_fu_328_p1 + zext_ln8_4_fu_349_p1);

assign add_ln33_fu_432_p2 = (k_reg_203 + 2'd1);

assign add_ln35_fu_448_p2 = (zext_ln35_fu_444_p1 + min_distances_offset);

assign add_ln44_fu_495_p2 = (trunc_ln44_fu_491_p1 + min_distances_offset);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cnt_1_fu_422_p2 = (dist_reg_180 + zext_ln11_3_fu_419_p1);

assign i_10_fu_374_p2 = (trunc_ln24_fu_317_p1 | 8'd3);

assign i_11_fu_307_p2 = (i_reg_192 + 9'd4);

assign i_8_fu_332_p2 = (trunc_ln24_fu_317_p1 | 8'd1);

assign i_9_fu_353_p2 = (trunc_ln24_fu_317_p1 | 8'd2);

assign icmp_ln33_fu_438_p2 = ((k_reg_203 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_469_p2 = (($signed(tmp_reg_835) > $signed(max_dist_reg_215)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_453_p2 = (($signed(zext_ln24_1_reg_807) < $signed(max_dist_reg_215)) ? 1'b1 : 1'b0);

assign max_dist_1_fu_485_p3 = ((icmp_ln35_reg_841[0:0] == 1'b1) ? tmp_reg_835 : max_dist_reg_215);

assign max_dist_id_1_fu_478_p3 = ((icmp_ln35_reg_841[0:0] == 1'b1) ? zext_ln35_1_fu_474_p1 : max_dist_id_reg_227);

assign ret_fu_293_p2 = (train_inst ^ test_inst);

assign select_ln44_1_fu_632_p3 = ((write_flag4_fu_563_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read1);

assign select_ln44_2_fu_638_p3 = ((write_flag8_fu_605_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read2);

assign select_ln44_3_fu_644_p3 = ((write_flag3_fu_584_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read3);

assign select_ln44_4_fu_650_p3 = ((write_flag2_fu_542_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read4);

assign select_ln44_5_fu_656_p3 = ((write_flag1_fu_521_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read5);

assign select_ln44_fu_626_p3 = ((write_flag_fu_500_p10[0:0] == 1'b1) ? zext_ln24_1_reg_807 : p_read);

assign tmp_4_fu_299_p3 = i_reg_192[32'd8];

assign tmp_5_fu_321_p3 = ret_reg_770[zext_ln24_fu_313_p1];

assign tmp_6_fu_342_p3 = ret_reg_770[zext_ln8_fu_338_p1];

assign tmp_7_fu_363_p3 = ret_reg_770[zext_ln8_1_fu_359_p1];

assign tmp_8_fu_384_p3 = ret_reg_770[zext_ln8_2_fu_380_p1];

assign trunc_ln24_fu_317_p1 = i_reg_192[7:0];

assign trunc_ln44_fu_491_p1 = max_dist_id_reg_227[2:0];

assign zext_ln11_1_fu_407_p1 = add_ln11_reg_787;

assign zext_ln11_2_fu_410_p1 = add_ln11_1_reg_792;

assign zext_ln11_3_fu_419_p1 = add_ln11_2_reg_797;

assign zext_ln11_fu_391_p1 = tmp_8_fu_384_p3;

assign zext_ln24_1_fu_428_p1 = dist_reg_180;

assign zext_ln24_fu_313_p1 = i_reg_192;

assign zext_ln35_1_fu_474_p1 = k_reg_203;

assign zext_ln35_fu_444_p1 = k_reg_203;

assign zext_ln8_1_fu_359_p1 = i_9_fu_353_p2;

assign zext_ln8_2_fu_380_p1 = i_10_fu_374_p2;

assign zext_ln8_3_fu_328_p1 = tmp_5_fu_321_p3;

assign zext_ln8_4_fu_349_p1 = tmp_6_fu_342_p3;

assign zext_ln8_5_fu_370_p1 = tmp_7_fu_363_p3;

assign zext_ln8_fu_338_p1 = i_8_fu_332_p2;

always @ (posedge ap_clk) begin
    zext_ln24_1_reg_807[31:9] <= 23'b00000000000000000000000;
end

endmodule //update_knn5_update_knn
