// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_redir_m,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.846000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1120,HLS_SYN_LUT=1715,HLS_VERSION=2018_3}" *)

module data_redir_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] Output_1_V_V_1_data_reg;
reg    Output_1_V_V_1_vld_reg;
wire    Output_1_V_V_1_vld_in;
reg    Output_1_V_V_1_ack_in;
wire    Output_1_V_V_1_ack_out;
reg   [31:0] Output_2_V_V_1_data_reg;
reg    Output_2_V_V_1_vld_reg;
wire    Output_2_V_V_1_vld_in;
reg    Output_2_V_V_1_ack_in;
wire    Output_2_V_V_1_ack_out;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [31:0] tmp_V_reg_181;
reg    ap_block_state1;
reg   [31:0] tmp_V_37_reg_186;
reg   [31:0] tmp_V_38_reg_191;
reg   [31:0] tmp_V_39_reg_196;
reg   [31:0] tmp_V_40_reg_201;
reg   [31:0] tmp_V_41_reg_206;
reg   [7:0] triangle_2ds_1_x0_V_reg_211;
wire    ap_CS_fsm_state7;
wire    grp_projection_odd_m_fu_110_ap_ready;
wire    grp_projection_odd_m_fu_110_ap_done;
wire    grp_projection_even_m_fu_117_ap_ready;
wire    grp_projection_even_m_fu_117_ap_done;
reg    ap_block_state7_on_subcall_done;
reg   [7:0] triangle_2ds_1_y0_V_reg_216;
reg   [7:0] triangle_2ds_1_x1_V_reg_221;
reg   [7:0] triangle_2ds_1_y1_V_reg_226;
reg   [7:0] triangle_2ds_1_x2_V_reg_231;
reg   [7:0] triangle_2ds_1_y2_V_reg_236;
reg   [7:0] triangle_2ds_1_z_V_reg_241;
reg   [7:0] triangle_2ds_2_x0_V_reg_246;
reg   [7:0] triangle_2ds_2_y0_V_reg_251;
reg   [7:0] triangle_2ds_2_x1_V_reg_256;
reg   [7:0] triangle_2ds_2_y1_V_reg_261;
reg   [7:0] triangle_2ds_2_x2_V_reg_266;
reg   [7:0] triangle_2ds_2_y2_V_reg_271;
reg   [7:0] triangle_2ds_2_z_V_reg_276;
wire    grp_rasterization1_odd_m_fu_60_ap_start;
wire    grp_rasterization1_odd_m_fu_60_ap_done;
wire    grp_rasterization1_odd_m_fu_60_ap_idle;
wire    grp_rasterization1_odd_m_fu_60_ap_ready;
wire   [31:0] grp_rasterization1_odd_m_fu_60_Output_1_V_V;
wire    grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_vld;
wire    grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_ack;
wire    grp_rasterization1_even_s_fu_85_ap_start;
wire    grp_rasterization1_even_s_fu_85_ap_done;
wire    grp_rasterization1_even_s_fu_85_ap_idle;
wire    grp_rasterization1_even_s_fu_85_ap_ready;
wire   [31:0] grp_rasterization1_even_s_fu_85_Output_1_V_V;
wire    grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_vld;
wire    grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_ack;
wire    grp_projection_odd_m_fu_110_ap_start;
wire    grp_projection_odd_m_fu_110_ap_idle;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_0;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_1;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_2;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_3;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_4;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_5;
wire   [7:0] grp_projection_odd_m_fu_110_ap_return_6;
wire    grp_projection_even_m_fu_117_ap_start;
wire    grp_projection_even_m_fu_117_ap_idle;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_0;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_1;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_2;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_3;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_4;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_5;
wire   [7:0] grp_projection_even_m_fu_117_ap_return_6;
reg    grp_rasterization1_odd_m_fu_60_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    ap_block_state9_on_subcall_done;
reg    grp_rasterization1_even_s_fu_85_ap_start_reg;
reg    grp_projection_odd_m_fu_110_ap_start_reg;
reg    grp_projection_even_m_fu_117_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    ap_block_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 Output_1_V_V_1_data_reg = 32'd0;
#0 Output_1_V_V_1_vld_reg = 1'b0;
#0 Output_2_V_V_1_data_reg = 32'd0;
#0 Output_2_V_V_1_vld_reg = 1'b0;
#0 grp_rasterization1_odd_m_fu_60_ap_start_reg = 1'b0;
#0 grp_rasterization1_even_s_fu_85_ap_start_reg = 1'b0;
#0 grp_projection_odd_m_fu_110_ap_start_reg = 1'b0;
#0 grp_projection_even_m_fu_117_ap_start_reg = 1'b0;
end

rasterization1_odd_m grp_rasterization1_odd_m_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization1_odd_m_fu_60_ap_start),
    .ap_done(grp_rasterization1_odd_m_fu_60_ap_done),
    .ap_idle(grp_rasterization1_odd_m_fu_60_ap_idle),
    .ap_ready(grp_rasterization1_odd_m_fu_60_ap_ready),
    .triangle_2d_x0_V(triangle_2ds_1_x0_V_reg_211),
    .triangle_2d_y0_V(triangle_2ds_1_y0_V_reg_216),
    .triangle_2d_x1_V(triangle_2ds_1_x1_V_reg_221),
    .triangle_2d_y1_V(triangle_2ds_1_y1_V_reg_226),
    .triangle_2d_x2_V(triangle_2ds_1_x2_V_reg_231),
    .triangle_2d_y2_V(triangle_2ds_1_y2_V_reg_236),
    .triangle_2d_z_V(triangle_2ds_1_z_V_reg_241),
    .Output_1_V_V(grp_rasterization1_odd_m_fu_60_Output_1_V_V),
    .Output_1_V_V_ap_vld(grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_ack)
);

rasterization1_even_s grp_rasterization1_even_s_fu_85(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rasterization1_even_s_fu_85_ap_start),
    .ap_done(grp_rasterization1_even_s_fu_85_ap_done),
    .ap_idle(grp_rasterization1_even_s_fu_85_ap_idle),
    .ap_ready(grp_rasterization1_even_s_fu_85_ap_ready),
    .triangle_2d_x0_V(triangle_2ds_2_x0_V_reg_246),
    .triangle_2d_y0_V(triangle_2ds_2_y0_V_reg_251),
    .triangle_2d_x1_V(triangle_2ds_2_x1_V_reg_256),
    .triangle_2d_y1_V(triangle_2ds_2_y1_V_reg_261),
    .triangle_2d_x2_V(triangle_2ds_2_x2_V_reg_266),
    .triangle_2d_y2_V(triangle_2ds_2_y2_V_reg_271),
    .triangle_2d_z_V(triangle_2ds_2_z_V_reg_276),
    .Output_1_V_V(grp_rasterization1_even_s_fu_85_Output_1_V_V),
    .Output_1_V_V_ap_vld(grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_vld),
    .Output_1_V_V_ap_ack(grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_ack)
);

projection_odd_m grp_projection_odd_m_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_projection_odd_m_fu_110_ap_start),
    .ap_done(grp_projection_odd_m_fu_110_ap_done),
    .ap_idle(grp_projection_odd_m_fu_110_ap_idle),
    .ap_ready(grp_projection_odd_m_fu_110_ap_ready),
    .input_lo_V(tmp_V_reg_181),
    .input_mi_V(tmp_V_37_reg_186),
    .input_hi_V(tmp_V_38_reg_191),
    .ap_return_0(grp_projection_odd_m_fu_110_ap_return_0),
    .ap_return_1(grp_projection_odd_m_fu_110_ap_return_1),
    .ap_return_2(grp_projection_odd_m_fu_110_ap_return_2),
    .ap_return_3(grp_projection_odd_m_fu_110_ap_return_3),
    .ap_return_4(grp_projection_odd_m_fu_110_ap_return_4),
    .ap_return_5(grp_projection_odd_m_fu_110_ap_return_5),
    .ap_return_6(grp_projection_odd_m_fu_110_ap_return_6)
);

projection_even_m grp_projection_even_m_fu_117(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_projection_even_m_fu_117_ap_start),
    .ap_done(grp_projection_even_m_fu_117_ap_done),
    .ap_idle(grp_projection_even_m_fu_117_ap_idle),
    .ap_ready(grp_projection_even_m_fu_117_ap_ready),
    .input_lo_V(tmp_V_39_reg_196),
    .input_mi_V(tmp_V_40_reg_201),
    .input_hi_V(tmp_V_41_reg_206),
    .ap_return_0(grp_projection_even_m_fu_117_ap_return_0),
    .ap_return_1(grp_projection_even_m_fu_117_ap_return_1),
    .ap_return_2(grp_projection_even_m_fu_117_ap_return_2),
    .ap_return_3(grp_projection_even_m_fu_117_ap_return_3),
    .ap_return_4(grp_projection_even_m_fu_117_ap_return_4),
    .ap_return_5(grp_projection_even_m_fu_117_ap_return_5),
    .ap_return_6(grp_projection_even_m_fu_117_ap_return_6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_projection_even_m_fu_117_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_projection_even_m_fu_117_ap_start_reg <= 1'b1;
        end else if ((grp_projection_even_m_fu_117_ap_ready == 1'b1)) begin
            grp_projection_even_m_fu_117_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_projection_odd_m_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_projection_odd_m_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_projection_odd_m_fu_110_ap_ready == 1'b1)) begin
            grp_projection_odd_m_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization1_even_s_fu_85_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_rasterization1_even_s_fu_85_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization1_even_s_fu_85_ap_ready == 1'b1)) begin
            grp_rasterization1_even_s_fu_85_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rasterization1_odd_m_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_rasterization1_odd_m_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_rasterization1_odd_m_fu_60_ap_ready == 1'b1)) begin
            grp_rasterization1_odd_m_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Output_1_V_V_1_vld_reg) & (1'b1 == Output_1_V_V_1_vld_in))) begin
        Output_1_V_V_1_vld_reg <= 1'b1;
    end else if (((1'b0 == Output_1_V_V_1_vld_in) & (1'b1 == Output_1_V_V_1_ack_out) & (1'b1 == Output_1_V_V_1_vld_reg))) begin
        Output_1_V_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Output_2_V_V_1_vld_reg) & (1'b1 == Output_2_V_V_1_vld_in))) begin
        Output_2_V_V_1_vld_reg <= 1'b1;
    end else if (((1'b0 == Output_2_V_V_1_vld_in) & (1'b1 == Output_2_V_V_1_ack_out) & (1'b1 == Output_2_V_V_1_vld_reg))) begin
        Output_2_V_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Output_1_V_V_1_vld_reg) & (1'b1 == Output_1_V_V_1_vld_in)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Output_1_V_V_1_ack_out) & (1'b1 == Output_1_V_V_1_vld_in) & (1'b1 == Output_1_V_V_1_vld_reg)))) begin
        Output_1_V_V_1_data_reg <= grp_rasterization1_odd_m_fu_60_Output_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == Output_2_V_V_1_vld_reg) & (1'b1 == Output_2_V_V_1_vld_in)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == Output_2_V_V_1_ack_out) & (1'b1 == Output_2_V_V_1_vld_in) & (1'b1 == Output_2_V_V_1_vld_reg)))) begin
        Output_2_V_V_1_data_reg <= grp_rasterization1_even_s_fu_85_Output_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_37_reg_186 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_38_reg_191 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_39_reg_196 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_V_40_reg_201 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_41_reg_206 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_181 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        triangle_2ds_1_x0_V_reg_211 <= grp_projection_odd_m_fu_110_ap_return_0;
        triangle_2ds_1_x1_V_reg_221 <= grp_projection_odd_m_fu_110_ap_return_2;
        triangle_2ds_1_x2_V_reg_231 <= grp_projection_odd_m_fu_110_ap_return_4;
        triangle_2ds_1_y0_V_reg_216 <= grp_projection_odd_m_fu_110_ap_return_1;
        triangle_2ds_1_y1_V_reg_226 <= grp_projection_odd_m_fu_110_ap_return_3;
        triangle_2ds_1_y2_V_reg_236 <= grp_projection_odd_m_fu_110_ap_return_5;
        triangle_2ds_1_z_V_reg_241 <= grp_projection_odd_m_fu_110_ap_return_6;
        triangle_2ds_2_x0_V_reg_246 <= grp_projection_even_m_fu_117_ap_return_0;
        triangle_2ds_2_x1_V_reg_256 <= grp_projection_even_m_fu_117_ap_return_2;
        triangle_2ds_2_x2_V_reg_266 <= grp_projection_even_m_fu_117_ap_return_4;
        triangle_2ds_2_y0_V_reg_251 <= grp_projection_even_m_fu_117_ap_return_1;
        triangle_2ds_2_y1_V_reg_261 <= grp_projection_even_m_fu_117_ap_return_3;
        triangle_2ds_2_y2_V_reg_271 <= grp_projection_even_m_fu_117_ap_return_5;
        triangle_2ds_2_z_V_reg_276 <= grp_projection_even_m_fu_117_ap_return_6;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == Output_1_V_V_1_vld_reg) | ((1'b1 == Output_1_V_V_1_ack_out) & (1'b1 == Output_1_V_V_1_vld_reg)))) begin
        Output_1_V_V_1_ack_in = 1'b1;
    end else begin
        Output_1_V_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Output_2_V_V_1_vld_reg) | ((1'b1 == Output_2_V_V_1_ack_out) & (1'b1 == Output_2_V_V_1_vld_reg)))) begin
        Output_2_V_V_1_ack_in = 1'b1;
    end else begin
        Output_2_V_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_V_1_ack_in) | (1'b0 == Output_1_V_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_V_1_ack_in) | (1'b0 == Output_1_V_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == Output_2_V_V_1_ack_in) | (1'b0 == Output_1_V_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = Output_1_V_V_1_data_reg;

assign Output_1_V_V_1_ack_out = Output_1_V_V_ap_ack;

assign Output_1_V_V_1_vld_in = grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_vld;

assign Output_1_V_V_ap_vld = Output_1_V_V_1_vld_reg;

assign Output_2_V_V = Output_2_V_V_1_data_reg;

assign Output_2_V_V_1_ack_out = Output_2_V_V_ap_ack;

assign Output_2_V_V_1_vld_in = grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_vld;

assign Output_2_V_V_ap_vld = Output_2_V_V_1_vld_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((1'b0 == Output_2_V_V_1_ack_in) | (1'b0 == Output_1_V_V_1_ack_in));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((grp_projection_even_m_fu_117_ap_done == 1'b0) | (grp_projection_odd_m_fu_110_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state9_on_subcall_done = ((grp_rasterization1_even_s_fu_85_ap_done == 1'b0) | (grp_rasterization1_odd_m_fu_60_ap_done == 1'b0));
end

assign grp_projection_even_m_fu_117_ap_start = grp_projection_even_m_fu_117_ap_start_reg;

assign grp_projection_odd_m_fu_110_ap_start = grp_projection_odd_m_fu_110_ap_start_reg;

assign grp_rasterization1_even_s_fu_85_Output_1_V_V_ap_ack = (ap_CS_fsm_state9 & Output_2_V_V_1_ack_in);

assign grp_rasterization1_even_s_fu_85_ap_start = grp_rasterization1_even_s_fu_85_ap_start_reg;

assign grp_rasterization1_odd_m_fu_60_Output_1_V_V_ap_ack = (ap_CS_fsm_state9 & Output_1_V_V_1_ack_in);

assign grp_rasterization1_odd_m_fu_60_ap_start = grp_rasterization1_odd_m_fu_60_ap_start_reg;

endmodule //data_redir_m
