// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rasterization2_even (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 18'd16384;
parameter    ap_ST_fsm_state37 = 18'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 18'd65536;
parameter    ap_ST_fsm_state41 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;
reg[31:0] Output_2_V_V;
reg Output_2_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] fragment_x_V_address0;
reg    fragment_x_V_ce0;
reg    fragment_x_V_we0;
wire   [7:0] fragment_x_V_q0;
reg   [8:0] fragment_y_V_1_address0;
reg    fragment_y_V_1_ce0;
reg    fragment_y_V_1_we0;
wire   [7:0] fragment_y_V_1_q0;
reg   [8:0] fragment_z_V_1_address0;
reg    fragment_z_V_1_ce0;
reg    fragment_z_V_1_we0;
wire   [7:0] fragment_z_V_1_q0;
reg   [8:0] fragment_color_V_1_address0;
reg    fragment_color_V_1_ce0;
reg    fragment_color_V_1_we0;
wire   [7:0] fragment_color_V_1_q0;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    Output_1_V_V_blk_n;
reg   [0:0] tmp_s_reg_582;
wire    ap_CS_fsm_state37;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_38_reg_804;
reg    Output_2_V_V_blk_n;
reg   [15:0] t_V_8_reg_183;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state15_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_state18_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_state20_pp0_stage0_iter5;
wire    ap_block_state21_pp0_stage0_iter6;
wire    ap_block_state22_pp0_stage0_iter7;
wire    ap_block_state23_pp0_stage0_iter8;
wire    ap_block_state24_pp0_stage0_iter9;
wire    ap_block_state25_pp0_stage0_iter10;
wire    ap_block_state26_pp0_stage0_iter11;
wire    ap_block_state27_pp0_stage0_iter12;
wire    ap_block_state28_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state30_pp0_stage0_iter15;
wire    ap_block_state31_pp0_stage0_iter16;
wire    ap_block_state32_pp0_stage0_iter17;
wire    ap_block_state33_pp0_stage0_iter18;
wire    ap_block_state34_pp0_stage0_iter19;
wire    ap_block_state35_pp0_stage0_iter20;
wire    ap_block_state36_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] i_op_assign_reg_195;
wire   [0:0] tmp_s_fu_219_p2;
reg    ap_block_state1;
wire   [7:0] triangle_2d_same_x0_s_fu_225_p1;
reg   [7:0] triangle_2d_same_x0_s_reg_586;
wire   [7:0] triangle_2d_same_y0_s_fu_229_p1;
reg   [7:0] triangle_2d_same_y0_s_reg_591;
wire   [7:0] triangle_2d_same_x1_s_fu_233_p1;
reg   [7:0] triangle_2d_same_x1_s_reg_596;
wire   [7:0] triangle_2d_same_y1_s_fu_237_p1;
reg   [7:0] triangle_2d_same_y1_s_reg_601;
wire   [7:0] triangle_2d_same_x2_s_fu_241_p1;
reg   [7:0] triangle_2d_same_x2_s_reg_606;
wire   [7:0] triangle_2d_same_y2_s_fu_245_p1;
reg   [7:0] triangle_2d_same_y2_s_reg_611;
wire   [7:0] triangle_2d_same_z_V_fu_249_p1;
reg   [7:0] triangle_2d_same_z_V_reg_616;
wire   [15:0] tmp_30_fu_253_p1;
reg   [15:0] tmp_30_reg_621;
wire   [7:0] tmp_31_fu_257_p1;
reg   [7:0] tmp_31_reg_626;
wire   [7:0] tmp_32_fu_261_p1;
reg   [7:0] tmp_32_reg_631;
wire   [15:0] tmp_12_cast_fu_269_p1;
reg   [15:0] tmp_12_cast_reg_657;
reg    ap_block_state14_io;
wire   [8:0] rhs_V_19_fu_273_p1;
reg   [8:0] rhs_V_19_reg_663;
wire   [8:0] lhs_V_28_fu_276_p1;
reg   [8:0] lhs_V_28_reg_668;
wire   [8:0] rhs_V_20_fu_279_p1;
reg   [8:0] rhs_V_20_reg_673;
wire  signed [17:0] rhs_V_6_fu_288_p1;
reg  signed [17:0] rhs_V_6_reg_678;
wire   [8:0] lhs_V_29_fu_292_p1;
reg   [8:0] lhs_V_29_reg_683;
wire  signed [17:0] rhs_V_7_fu_301_p1;
reg  signed [17:0] rhs_V_7_reg_688;
wire   [8:0] lhs_V_30_fu_305_p1;
reg   [8:0] lhs_V_30_reg_693;
wire  signed [17:0] rhs_V_8_fu_314_p1;
reg  signed [17:0] rhs_V_8_reg_698;
wire   [8:0] lhs_V_31_fu_318_p1;
reg   [8:0] lhs_V_31_reg_703;
wire  signed [17:0] rhs_V_9_fu_327_p1;
reg  signed [17:0] rhs_V_9_reg_708;
wire  signed [17:0] rhs_V_3_fu_337_p1;
reg  signed [17:0] rhs_V_3_reg_713;
wire  signed [17:0] rhs_V_fu_347_p1;
reg  signed [17:0] rhs_V_reg_718;
wire   [0:0] exitcond2_fu_366_p2;
reg   [0:0] exitcond2_reg_723;
wire   [15:0] k_V_fu_371_p2;
reg   [15:0] k_V_reg_727;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] x_V_fu_391_p2;
reg   [7:0] x_V_reg_732;
reg   [7:0] x_V_reg_732_pp0_iter20_reg;
wire   [7:0] y_V_fu_400_p2;
reg   [7:0] y_V_reg_738;
reg   [7:0] y_V_reg_738_pp0_iter20_reg;
wire  signed [17:0] grp_fu_540_p3;
reg  signed [17:0] ret_V_27_reg_745;
reg    ap_enable_reg_pp0_iter20;
wire  signed [17:0] grp_fu_546_p3;
reg  signed [17:0] ret_V_32_reg_750;
wire  signed [17:0] grp_fu_552_p3;
reg  signed [17:0] ret_V_37_reg_755;
wire   [0:0] exitcond_fu_502_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state38_pp1_stage0_iter0;
wire    ap_block_state39_pp1_stage0_iter1;
wire    ap_block_state40_pp1_stage0_iter2;
reg    ap_block_state40_io;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_fu_508_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_1_fu_514_p1;
reg   [63:0] tmp_1_reg_772;
reg   [7:0] fragment_y_V_1_load_reg_789;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter21;
reg    ap_block_state37_io;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state38;
reg   [15:0] ap_phi_mux_t_V_8_phi_fu_187_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_8_fu_428_p1;
wire   [0:0] tmp_36_fu_420_p3;
reg   [15:0] t_V_6_fu_64;
wire   [15:0] t_V_7_fu_469_p3;
reg   [15:0] t_V_5_fu_68;
wire   [15:0] i_top_V_2_fu_461_p3;
reg   [15:0] t_V_fu_72;
wire   [15:0] i_V_fu_436_p2;
wire   [31:0] tmp_V_26_fu_492_p1;
wire   [31:0] p_Result_s_fu_527_p5;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_V_27_fu_497_p1;
wire   [1:0] flag_V_fu_215_p1;
wire   [7:0] tmp_33_fu_265_p1;
wire   [8:0] ret_V_24_fu_282_p2;
wire   [8:0] ret_V_18_fu_295_p2;
wire   [8:0] ret_V_19_fu_308_p2;
wire   [8:0] ret_V_20_fu_321_p2;
wire   [8:0] ret_V_21_fu_331_p2;
wire   [8:0] ret_V_22_fu_341_p2;
wire   [7:0] grp_fu_377_p1;
wire   [7:0] grp_fu_382_p1;
wire   [7:0] grp_fu_377_p2;
wire   [7:0] ret_V_fu_387_p1;
wire   [7:0] grp_fu_382_p2;
wire   [7:0] tmp_35_fu_396_p1;
wire  signed [17:0] grp_fu_558_p4;
wire  signed [17:0] grp_fu_566_p4;
wire   [17:0] tmp1_fu_411_p2;
wire  signed [17:0] grp_fu_574_p4;
wire   [17:0] tmp_i_fu_415_p2;
wire   [0:0] tmp_37_fu_442_p3;
wire   [15:0] i_top_V_fu_449_p2;
wire   [15:0] i_bot_V_fu_455_p2;
wire   [7:0] grp_fu_540_p0;
wire   [8:0] lhs_V_20_fu_405_p1;
wire   [7:0] grp_fu_540_p1;
wire  signed [8:0] grp_fu_540_p2;
wire   [7:0] grp_fu_546_p0;
wire   [7:0] grp_fu_546_p1;
wire  signed [8:0] grp_fu_546_p2;
wire   [7:0] grp_fu_552_p0;
wire   [7:0] grp_fu_552_p1;
wire  signed [8:0] grp_fu_552_p2;
wire   [7:0] grp_fu_558_p0;
wire   [8:0] lhs_V_fu_408_p1;
wire   [7:0] grp_fu_558_p1;
wire  signed [8:0] grp_fu_558_p2;
wire   [7:0] grp_fu_566_p0;
wire   [7:0] grp_fu_566_p1;
wire  signed [8:0] grp_fu_566_p2;
wire   [7:0] grp_fu_574_p0;
wire   [7:0] grp_fu_574_p1;
wire  signed [8:0] grp_fu_574_p2;
wire    ap_CS_fsm_state41;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
end

rasterization2_odd_fragment_x_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_x_V_address0),
    .ce0(fragment_x_V_ce0),
    .we0(fragment_x_V_we0),
    .d0(x_V_reg_732_pp0_iter20_reg),
    .q0(fragment_x_V_q0)
);

rasterization2_odd_fragment_x_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_y_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_y_V_1_address0),
    .ce0(fragment_y_V_1_ce0),
    .we0(fragment_y_V_1_we0),
    .d0(y_V_reg_738_pp0_iter20_reg),
    .q0(fragment_y_V_1_q0)
);

rasterization2_odd_fragment_x_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_z_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_z_V_1_address0),
    .ce0(fragment_z_V_1_ce0),
    .we0(fragment_z_V_1_we0),
    .d0(triangle_2d_same_z_V_reg_616),
    .q0(fragment_z_V_1_q0)
);

rasterization2_odd_fragment_x_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
fragment_color_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fragment_color_V_1_address0),
    .ce0(fragment_color_V_1_ce0),
    .we0(fragment_color_V_1_we0),
    .d0(8'd100),
    .q0(fragment_color_V_1_q0)
);

rasterization2_m_urem_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_m_urem_16ns_8ns_8_20_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_8_phi_fu_187_p4),
    .din1(grp_fu_377_p1),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

rasterization2_m_udiv_16ns_8ns_8_20_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
rasterization2_m_udiv_16ns_8ns_8_20_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_t_V_8_phi_fu_187_p4),
    .din1(grp_fu_382_p1),
    .ce(1'b1),
    .dout(grp_fu_382_p2)
);

rasterization2_m_am_submul_8ns_8ns_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_m_am_submul_8ns_8ns_9s_18_1_1_U19(
    .din0(grp_fu_540_p0),
    .din1(grp_fu_540_p1),
    .din2(grp_fu_540_p2),
    .dout(grp_fu_540_p3)
);

rasterization2_m_am_submul_8ns_8ns_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_m_am_submul_8ns_8ns_9s_18_1_1_U20(
    .din0(grp_fu_546_p0),
    .din1(grp_fu_546_p1),
    .din2(grp_fu_546_p2),
    .dout(grp_fu_546_p3)
);

rasterization2_m_am_submul_8ns_8ns_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
rasterization2_m_am_submul_8ns_8ns_9s_18_1_1_U21(
    .din0(grp_fu_552_p0),
    .din1(grp_fu_552_p1),
    .din2(grp_fu_552_p2),
    .dout(grp_fu_552_p3)
);

rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1_U22(
    .din0(grp_fu_558_p0),
    .din1(grp_fu_558_p1),
    .din2(grp_fu_558_p2),
    .din3(ret_V_27_reg_745),
    .dout(grp_fu_558_p4)
);

rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1_U23(
    .din0(grp_fu_566_p0),
    .din1(grp_fu_566_p1),
    .din2(grp_fu_566_p2),
    .din3(ret_V_32_reg_750),
    .dout(grp_fu_566_p4)
);

rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
rasterization2_m_ama_submul_sub_8ns_8ns_9s_18s_18_1_1_U24(
    .din0(grp_fu_574_p0),
    .din1(grp_fu_574_p1),
    .din2(grp_fu_574_p2),
    .din3(ret_V_37_reg_755),
    .dout(grp_fu_574_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state38)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_502_p2 == 1'd0))) begin
        i_op_assign_reg_195 <= j_fu_508_p2;
    end else if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
        i_op_assign_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        t_V_5_fu_68 <= i_top_V_2_fu_461_p3;
    end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
        t_V_5_fu_68 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        t_V_6_fu_64 <= t_V_7_fu_469_p3;
    end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
        t_V_6_fu_64 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
        t_V_8_reg_183 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_723 == 1'd0))) begin
        t_V_8_reg_183 <= k_V_reg_727;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        t_V_fu_72 <= i_V_fu_436_p2;
    end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
        t_V_fu_72 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_723 <= exitcond2_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fragment_y_V_1_load_reg_789 <= fragment_y_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_V_reg_727 <= k_V_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
        lhs_V_28_reg_668[7 : 0] <= lhs_V_28_fu_276_p1[7 : 0];
        lhs_V_29_reg_683[7 : 0] <= lhs_V_29_fu_292_p1[7 : 0];
        lhs_V_30_reg_693[7 : 0] <= lhs_V_30_fu_305_p1[7 : 0];
        lhs_V_31_reg_703[7 : 0] <= lhs_V_31_fu_318_p1[7 : 0];
        rhs_V_19_reg_663[7 : 0] <= rhs_V_19_fu_273_p1[7 : 0];
        rhs_V_20_reg_673[7 : 0] <= rhs_V_20_fu_279_p1[7 : 0];
        rhs_V_3_reg_713 <= rhs_V_3_fu_337_p1;
        rhs_V_6_reg_678 <= rhs_V_6_fu_288_p1;
        rhs_V_7_reg_688 <= rhs_V_7_fu_301_p1;
        rhs_V_8_reg_698 <= rhs_V_8_fu_314_p1;
        rhs_V_9_reg_708 <= rhs_V_9_fu_327_p1;
        rhs_V_reg_718 <= rhs_V_fu_347_p1;
        tmp_12_cast_reg_657[7 : 0] <= tmp_12_cast_fu_269_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        ret_V_27_reg_745 <= grp_fu_540_p3;
        ret_V_32_reg_750 <= grp_fu_546_p3;
        ret_V_37_reg_755 <= grp_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_502_p2 == 1'd0))) begin
        tmp_1_reg_772[15 : 0] <= tmp_1_fu_514_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_30_reg_621 <= tmp_30_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_31_reg_626 <= tmp_31_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_32_reg_631 <= tmp_32_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_38_reg_804 <= fragment_y_V_1_q0[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_582 <= tmp_s_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
        triangle_2d_same_x0_s_reg_586 <= triangle_2d_same_x0_s_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
        triangle_2d_same_x1_s_reg_596 <= triangle_2d_same_x1_s_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
        triangle_2d_same_x2_s_reg_606 <= triangle_2d_same_x2_s_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        triangle_2d_same_y0_s_reg_591 <= triangle_2d_same_y0_s_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
        triangle_2d_same_y1_s_reg_601 <= triangle_2d_same_y1_s_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
        triangle_2d_same_y2_s_reg_611 <= triangle_2d_same_y2_s_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
        triangle_2d_same_z_V_reg_616 <= triangle_2d_same_z_V_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        x_V_reg_732 <= x_V_fu_391_p2;
        x_V_reg_732_pp0_iter20_reg <= x_V_reg_732;
        y_V_reg_738 <= y_V_fu_400_p2;
        y_V_reg_738_pp0_iter20_reg <= y_V_reg_738;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_38_reg_804 == 1'd1))) begin
        Output_1_V_V = p_Result_s_fu_527_p5;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        Output_1_V_V = tmp_V_26_fu_492_p1;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0))) begin
        Output_1_V_V = 32'd0;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_38_reg_804 == 1'd1)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | (~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_38_reg_804 == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_38_reg_804 == 1'd0))) begin
        Output_2_V_V = p_Result_s_fu_527_p5;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        Output_2_V_V = tmp_V_27_fu_497_p1;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0))) begin
        Output_2_V_V = 32'd0;
    end else begin
        Output_2_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_38_reg_804 == 1'd0)) | ((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37)) | (~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0)))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (tmp_38_reg_804 == 1'd0)) | ((1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0)))) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond2_fu_366_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_502_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_723 == 1'd0))) begin
        ap_phi_mux_t_V_8_phi_fu_187_p4 = k_V_reg_727;
    end else begin
        ap_phi_mux_t_V_8_phi_fu_187_p4 = t_V_8_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_color_V_1_address0 = tmp_1_reg_772;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_color_V_1_address0 = tmp_8_fu_428_p1;
    end else begin
        fragment_color_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_color_V_1_ce0 = 1'b1;
    end else begin
        fragment_color_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        fragment_color_V_1_we0 = 1'b1;
    end else begin
        fragment_color_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_x_V_address0 = tmp_1_reg_772;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_x_V_address0 = tmp_8_fu_428_p1;
    end else begin
        fragment_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_x_V_ce0 = 1'b1;
    end else begin
        fragment_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        fragment_x_V_we0 = 1'b1;
    end else begin
        fragment_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_y_V_1_address0 = tmp_1_fu_514_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_y_V_1_address0 = tmp_8_fu_428_p1;
    end else begin
        fragment_y_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_y_V_1_ce0 = 1'b1;
    end else begin
        fragment_y_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        fragment_y_V_1_we0 = 1'b1;
    end else begin
        fragment_y_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        fragment_z_V_1_address0 = tmp_1_reg_772;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        fragment_z_V_1_address0 = tmp_8_fu_428_p1;
    end else begin
        fragment_z_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
        fragment_z_V_1_ce0 = 1'b1;
    end else begin
        fragment_z_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter21 == 1'b1) & (tmp_36_fu_420_p3 == 1'd0))) begin
        fragment_z_V_1_we0 = 1'b1;
    end else begin
        fragment_z_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (1'b1 == ap_block_state14_io)) & (1'b1 == ap_CS_fsm_state14) & (tmp_s_reg_582 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_366_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_366_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b0 == ap_block_state37_io) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_502_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_502_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state40_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = (((1'b0 == Output_2_V_V_ap_ack) & (tmp_s_reg_582 == 1'd0)) | ((1'b0 == Output_1_V_V_ap_ack) & (tmp_s_reg_582 == 1'd0)));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((1'b0 == Output_2_V_V_ap_ack) | (1'b0 == Output_1_V_V_ap_ack));
end

assign ap_block_state38_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_io = (((1'b0 == Output_2_V_V_ap_ack) & (tmp_38_reg_804 == 1'd0)) | ((1'b0 == Output_1_V_V_ap_ack) & (tmp_38_reg_804 == 1'd1)));
end

assign ap_block_state40_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond2_fu_366_p2 = ((ap_phi_mux_t_V_8_phi_fu_187_p4 == tmp_30_reg_621) ? 1'b1 : 1'b0);

assign exitcond_fu_502_p2 = ((i_op_assign_reg_195 == t_V_fu_72) ? 1'b1 : 1'b0);

assign flag_V_fu_215_p1 = Input_1_V_V[1:0];

assign grp_fu_377_p1 = tmp_12_cast_reg_657;

assign grp_fu_382_p1 = tmp_12_cast_reg_657;

assign grp_fu_540_p0 = lhs_V_20_fu_405_p1;

assign grp_fu_540_p1 = rhs_V_20_reg_673;

assign grp_fu_540_p2 = rhs_V_7_reg_688;

assign grp_fu_546_p0 = lhs_V_20_fu_405_p1;

assign grp_fu_546_p1 = lhs_V_28_reg_668;

assign grp_fu_546_p2 = rhs_V_9_reg_708;

assign grp_fu_552_p0 = lhs_V_20_fu_405_p1;

assign grp_fu_552_p1 = lhs_V_30_reg_693;

assign grp_fu_552_p2 = rhs_V_reg_718;

assign grp_fu_558_p0 = lhs_V_fu_408_p1;

assign grp_fu_558_p1 = rhs_V_19_reg_663;

assign grp_fu_558_p2 = rhs_V_6_reg_678;

assign grp_fu_566_p0 = lhs_V_fu_408_p1;

assign grp_fu_566_p1 = lhs_V_29_reg_683;

assign grp_fu_566_p2 = rhs_V_8_reg_698;

assign grp_fu_574_p0 = lhs_V_fu_408_p1;

assign grp_fu_574_p1 = lhs_V_31_reg_703;

assign grp_fu_574_p2 = rhs_V_3_reg_713;

assign i_V_fu_436_p2 = (t_V_fu_72 + 16'd1);

assign i_bot_V_fu_455_p2 = (t_V_6_fu_64 + 16'd1);

assign i_top_V_2_fu_461_p3 = ((tmp_37_fu_442_p3[0:0] === 1'b1) ? i_top_V_fu_449_p2 : t_V_5_fu_68);

assign i_top_V_fu_449_p2 = (t_V_5_fu_68 + 16'd1);

assign j_fu_508_p2 = (i_op_assign_reg_195 + 16'd1);

assign k_V_fu_371_p2 = (ap_phi_mux_t_V_8_phi_fu_187_p4 + 16'd1);

assign lhs_V_20_fu_405_p1 = y_V_reg_738;

assign lhs_V_28_fu_276_p1 = triangle_2d_same_y1_s_reg_601;

assign lhs_V_29_fu_292_p1 = triangle_2d_same_x1_s_reg_596;

assign lhs_V_30_fu_305_p1 = triangle_2d_same_y2_s_reg_611;

assign lhs_V_31_fu_318_p1 = triangle_2d_same_x2_s_reg_606;

assign lhs_V_fu_408_p1 = x_V_reg_732_pp0_iter20_reg;

assign p_Result_s_fu_527_p5 = {{{{fragment_color_V_1_q0}, {fragment_z_V_1_q0}}, {fragment_y_V_1_load_reg_789}}, {fragment_x_V_q0}};

assign ret_V_18_fu_295_p2 = (lhs_V_29_fu_292_p1 - rhs_V_19_fu_273_p1);

assign ret_V_19_fu_308_p2 = (lhs_V_30_fu_305_p1 - lhs_V_28_fu_276_p1);

assign ret_V_20_fu_321_p2 = (lhs_V_31_fu_318_p1 - lhs_V_29_fu_292_p1);

assign ret_V_21_fu_331_p2 = (rhs_V_20_fu_279_p1 - lhs_V_30_fu_305_p1);

assign ret_V_22_fu_341_p2 = (rhs_V_19_fu_273_p1 - lhs_V_31_fu_318_p1);

assign ret_V_24_fu_282_p2 = (lhs_V_28_fu_276_p1 - rhs_V_20_fu_279_p1);

assign ret_V_fu_387_p1 = grp_fu_377_p2[7:0];

assign rhs_V_19_fu_273_p1 = triangle_2d_same_x0_s_reg_586;

assign rhs_V_20_fu_279_p1 = triangle_2d_same_y0_s_reg_591;

assign rhs_V_3_fu_337_p1 = $signed(ret_V_21_fu_331_p2);

assign rhs_V_6_fu_288_p1 = $signed(ret_V_24_fu_282_p2);

assign rhs_V_7_fu_301_p1 = $signed(ret_V_18_fu_295_p2);

assign rhs_V_8_fu_314_p1 = $signed(ret_V_19_fu_308_p2);

assign rhs_V_9_fu_327_p1 = $signed(ret_V_20_fu_321_p2);

assign rhs_V_fu_347_p1 = $signed(ret_V_22_fu_341_p2);

assign t_V_7_fu_469_p3 = ((tmp_37_fu_442_p3[0:0] === 1'b1) ? t_V_6_fu_64 : i_bot_V_fu_455_p2);

assign tmp1_fu_411_p2 = (grp_fu_566_p4 | grp_fu_558_p4);

assign tmp_12_cast_fu_269_p1 = tmp_33_fu_265_p1;

assign tmp_1_fu_514_p1 = i_op_assign_reg_195;

assign tmp_30_fu_253_p1 = Input_1_V_V[15:0];

assign tmp_31_fu_257_p1 = Input_1_V_V[7:0];

assign tmp_32_fu_261_p1 = Input_1_V_V[7:0];

assign tmp_33_fu_265_p1 = Input_1_V_V[7:0];

assign tmp_35_fu_396_p1 = grp_fu_382_p2[7:0];

assign tmp_36_fu_420_p3 = tmp_i_fu_415_p2[32'd17];

assign tmp_37_fu_442_p3 = y_V_reg_738_pp0_iter20_reg[32'd7];

assign tmp_8_fu_428_p1 = t_V_fu_72;

assign tmp_V_26_fu_492_p1 = t_V_5_fu_68;

assign tmp_V_27_fu_497_p1 = t_V_6_fu_64;

assign tmp_i_fu_415_p2 = (tmp1_fu_411_p2 | grp_fu_574_p4);

assign tmp_s_fu_219_p2 = ((flag_V_fu_215_p1 == 2'd0) ? 1'b1 : 1'b0);

assign triangle_2d_same_x0_s_fu_225_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_x1_s_fu_233_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_x2_s_fu_241_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y0_s_fu_229_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y1_s_fu_237_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_y2_s_fu_245_p1 = Input_1_V_V[7:0];

assign triangle_2d_same_z_V_fu_249_p1 = Input_1_V_V[7:0];

assign x_V_fu_391_p2 = (ret_V_fu_387_p1 + tmp_31_reg_626);

assign y_V_fu_400_p2 = (tmp_35_fu_396_p1 + tmp_32_reg_631);

always @ (posedge ap_clk) begin
    tmp_12_cast_reg_657[15:8] <= 8'b00000000;
    rhs_V_19_reg_663[8] <= 1'b0;
    lhs_V_28_reg_668[8] <= 1'b0;
    rhs_V_20_reg_673[8] <= 1'b0;
    lhs_V_29_reg_683[8] <= 1'b0;
    lhs_V_30_reg_693[8] <= 1'b0;
    lhs_V_31_reg_703[8] <= 1'b0;
    tmp_1_reg_772[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //rasterization2_even
