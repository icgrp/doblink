// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="coloringFB_bot_m,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.605875,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=222,HLS_SYN_LUT=518,HLS_VERSION=2020_1}" *)

module coloringFB_bot_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] counter_V;
reg   [14:0] frame_buffer_V_address0;
reg    frame_buffer_V_ce0;
reg    frame_buffer_V_we0;
reg   [7:0] frame_buffer_V_d0;
wire   [7:0] frame_buffer_V_q0;
reg   [14:0] frame_buffer_V_address1;
reg    frame_buffer_V_ce1;
wire   [7:0] frame_buffer_V_q1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln701_fu_337_p2;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_V_reg_539;
reg    ap_block_state1;
reg   [15:0] t_V_2_reg_544;
wire   [0:0] icmp_ln879_fu_255_p2;
wire   [15:0] add_ln887_fu_267_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] select_ln544_1_fu_293_p3;
wire   [0:0] icmp_ln887_fu_261_p2;
wire   [7:0] j_V_fu_328_p2;
wire   [15:0] empty_5_fu_334_p1;
reg   [15:0] empty_5_reg_571;
wire    ap_CS_fsm_state3;
wire   [15:0] i_V_1_fu_342_p2;
reg    ap_block_state4;
wire   [15:0] add_ln700_fu_400_p2;
wire    ap_CS_fsm_state5;
wire   [8:0] i_fu_417_p2;
reg   [8:0] i_reg_595;
wire    ap_CS_fsm_state6;
wire   [16:0] zext_ln714_fu_431_p1;
reg   [16:0] zext_ln714_reg_600;
wire   [0:0] icmp_ln713_fu_411_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_4_fu_435_p3;
wire   [6:0] trunc_ln714_fu_457_p1;
reg   [6:0] trunc_ln714_reg_613;
wire   [7:0] j_fu_480_p2;
reg   [7:0] j_reg_624;
reg   [7:0] frame_buffer_V_load_reg_629;
wire    ap_CS_fsm_state8;
reg   [7:0] frame_buffer_V_load_1_reg_634;
reg   [15:0] indvar_flatten_reg_173;
reg   [8:0] t_V_reg_184;
reg   [7:0] t_V_1_reg_195;
reg   [15:0] t_V_3_reg_206;
reg   [8:0] i_0_reg_217;
wire   [0:0] icmp_ln879_1_fu_405_p2;
reg   [7:0] j_0_reg_229;
reg   [15:0] counter_V_new_0_reg_240;
wire   [63:0] zext_ln321_1_fu_323_p1;
wire   [63:0] zext_ln321_4_fu_395_p1;
wire   [63:0] zext_ln215_4_fu_452_p1;
wire   [63:0] zext_ln215_1_fu_475_p1;
wire   [63:0] zext_ln215_2_fu_499_p1;
wire   [63:0] zext_ln215_3_fu_517_p1;
wire    ap_CS_fsm_state11;
wire    regslice_forward_Output_1_V_V_U_apdone_blk;
wire   [0:0] icmp_ln887_1_fu_279_p2;
wire   [8:0] i_V_fu_273_p2;
wire   [15:0] tmp_fu_301_p3;
wire   [7:0] select_ln544_fu_285_p3;
wire   [16:0] zext_ln321_fu_313_p1;
wire   [16:0] zext_ln696_fu_309_p1;
wire   [16:0] add_ln321_fu_317_p2;
wire   [7:0] tmp_3_fu_359_p4;
wire   [7:0] trunc_ln321_fu_373_p1;
wire   [14:0] tmp_5_fu_377_p3;
wire   [15:0] zext_ln321_3_fu_385_p1;
wire   [15:0] zext_ln321_2_fu_369_p1;
wire   [15:0] add_ln321_1_fu_389_p2;
wire   [15:0] tmp_6_fu_423_p3;
wire   [16:0] zext_ln215_fu_443_p1;
wire   [16:0] add_ln215_fu_447_p2;
wire   [6:0] or_ln716_fu_461_p2;
wire   [15:0] tmp_7_fu_467_p3;
wire   [6:0] or_ln717_fu_486_p2;
wire   [15:0] tmp_8_fu_491_p3;
wire   [6:0] or_ln718_fu_504_p2;
wire   [15:0] tmp_9_fu_509_p3;
reg   [10:0] ap_NS_fsm;
wire   [31:0] Output_1_V_V_int;
reg    Output_1_V_V_ap_vld_int;
wire    Output_1_V_V_ap_ack_int;
wire    regslice_forward_Output_1_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 counter_V = 16'd0;
end

coloringFB_bot_m_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
frame_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(frame_buffer_V_address0),
    .ce0(frame_buffer_V_ce0),
    .we0(frame_buffer_V_we0),
    .d0(frame_buffer_V_d0),
    .q0(frame_buffer_V_q0),
    .address1(frame_buffer_V_address1),
    .ce1(frame_buffer_V_ce1),
    .q1(frame_buffer_V_q1)
);

regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_Output_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Output_1_V_V_int),
    .vld_in(Output_1_V_V_ap_vld_int),
    .ack_in(Output_1_V_V_ap_ack_int),
    .data_out(Output_1_V_V),
    .vld_out(regslice_forward_Output_1_V_V_U_vld_out),
    .ack_out(Output_1_V_V_ap_ack),
    .apdone_blk(regslice_forward_Output_1_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln713_fu_411_p2 == 1'd1))) begin
        counter_V_new_0_reg_240 <= 16'd0;
    end else if (((icmp_ln879_1_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        counter_V_new_0_reg_240 <= add_ln700_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln879_1_fu_405_p2 == 1'd1))) begin
        i_0_reg_217 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_4_fu_435_p3 == 1'd1))) begin
        i_0_reg_217 <= i_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (icmp_ln879_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_173 <= 16'd0;
    end else if (((icmp_ln887_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_173 <= add_ln887_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln713_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_reg_229 <= 8'd0;
    end else if (((1'b1 == Output_1_V_V_ap_ack_int) & (1'b1 == ap_CS_fsm_state10))) begin
        j_0_reg_229 <= j_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (icmp_ln879_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_1_reg_195 <= 8'd0;
    end else if (((icmp_ln887_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_195 <= j_V_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln701_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_3_reg_206 <= i_V_1_fu_342_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_3_reg_206 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (icmp_ln879_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_184 <= 9'd0;
    end else if (((icmp_ln887_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_reg_184 <= select_ln544_1_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        counter_V <= counter_V_new_0_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_5_reg_571 <= empty_5_fu_334_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_buffer_V_load_1_reg_634 <= frame_buffer_V_q1;
        frame_buffer_V_load_reg_629 <= frame_buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_595 <= i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_435_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_reg_624 <= j_fu_480_p2;
        trunc_ln714_reg_613 <= trunc_ln714_fu_457_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_2_reg_544 <= counter_V;
        tmp_V_reg_539 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln713_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln714_reg_600[15 : 7] <= zext_ln714_fu_431_p1[15 : 7];
    end
end

always @ (*) begin
    if (((~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln701_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln701_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_ap_ack_int) & (1'b1 == ap_CS_fsm_state9))) begin
        Output_1_V_V_ap_vld_int = 1'b1;
    end else begin
        Output_1_V_V_ap_vld_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack_int;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_buffer_V_address0 = zext_ln215_3_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        frame_buffer_V_address0 = zext_ln215_4_fu_452_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        frame_buffer_V_address0 = zext_ln321_4_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_buffer_V_address0 = zext_ln321_1_fu_323_p1;
    end else begin
        frame_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_buffer_V_address1 = zext_ln215_2_fu_499_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        frame_buffer_V_address1 = zext_ln215_1_fu_475_p1;
    end else begin
        frame_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state4)))) begin
        frame_buffer_V_ce0 = 1'b1;
    end else begin
        frame_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        frame_buffer_V_ce1 = 1'b1;
    end else begin
        frame_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        frame_buffer_V_d0 = {{Input_1_V_V[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame_buffer_V_d0 = 8'd0;
    end else begin
        frame_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln701_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        frame_buffer_V_we0 = 1'b1;
    end else begin
        frame_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (icmp_ln879_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (icmp_ln879_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln701_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln701_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln879_1_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln713_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_4_fu_435_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == Output_1_V_V_ap_ack_int) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == Output_1_V_V_ap_ack_int) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((regslice_forward_Output_1_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_ap_vld = regslice_forward_Output_1_V_V_U_vld_out;

assign Output_1_V_V_int = {{{{frame_buffer_V_q0}, {frame_buffer_V_q1}}, {frame_buffer_V_load_1_reg_634}}, {frame_buffer_V_load_reg_629}};

assign add_ln215_fu_447_p2 = (zext_ln215_fu_443_p1 + zext_ln714_reg_600);

assign add_ln321_1_fu_389_p2 = (zext_ln321_3_fu_385_p1 + zext_ln321_2_fu_369_p1);

assign add_ln321_fu_317_p2 = (zext_ln321_fu_313_p1 + zext_ln696_fu_309_p1);

assign add_ln700_fu_400_p2 = (t_V_2_reg_544 + 16'd1);

assign add_ln887_fu_267_p2 = (indvar_flatten_reg_173 + 16'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln701_fu_337_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld));
end

assign empty_5_fu_334_p1 = tmp_V_reg_539[15:0];

assign i_V_1_fu_342_p2 = (t_V_3_reg_206 + 16'd1);

assign i_V_fu_273_p2 = (t_V_reg_184 + 9'd1);

assign i_fu_417_p2 = (i_0_reg_217 + 9'd1);

assign icmp_ln701_fu_337_p2 = ((t_V_3_reg_206 == empty_5_reg_571) ? 1'b1 : 1'b0);

assign icmp_ln713_fu_411_p2 = ((i_0_reg_217 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_405_p2 = ((add_ln700_fu_400_p2 == 16'd3192) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_255_p2 = ((counter_V == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_279_p2 = ((t_V_1_reg_195 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_261_p2 = ((indvar_flatten_reg_173 == 16'd32768) ? 1'b1 : 1'b0);

assign j_V_fu_328_p2 = (select_ln544_fu_285_p3 + 8'd1);

assign j_fu_480_p2 = (8'd4 + j_0_reg_229);

assign or_ln716_fu_461_p2 = (trunc_ln714_fu_457_p1 | 7'd1);

assign or_ln717_fu_486_p2 = (trunc_ln714_reg_613 | 7'd2);

assign or_ln718_fu_504_p2 = (trunc_ln714_reg_613 | 7'd3);

assign select_ln544_1_fu_293_p3 = ((icmp_ln887_1_fu_279_p2[0:0] === 1'b1) ? i_V_fu_273_p2 : t_V_reg_184);

assign select_ln544_fu_285_p3 = ((icmp_ln887_1_fu_279_p2[0:0] === 1'b1) ? 8'd0 : t_V_1_reg_195);

assign tmp_3_fu_359_p4 = {{Input_1_V_V[15:8]}};

assign tmp_4_fu_435_p3 = j_0_reg_229[32'd7];

assign tmp_5_fu_377_p3 = {{trunc_ln321_fu_373_p1}, {7'd0}};

assign tmp_6_fu_423_p3 = {{i_0_reg_217}, {7'd0}};

assign tmp_7_fu_467_p3 = {{i_0_reg_217}, {or_ln716_fu_461_p2}};

assign tmp_8_fu_491_p3 = {{i_0_reg_217}, {or_ln717_fu_486_p2}};

assign tmp_9_fu_509_p3 = {{i_0_reg_217}, {or_ln718_fu_504_p2}};

assign tmp_fu_301_p3 = {{select_ln544_1_fu_293_p3}, {7'd0}};

assign trunc_ln321_fu_373_p1 = Input_1_V_V[7:0];

assign trunc_ln714_fu_457_p1 = j_0_reg_229[6:0];

assign zext_ln215_1_fu_475_p1 = tmp_7_fu_467_p3;

assign zext_ln215_2_fu_499_p1 = tmp_8_fu_491_p3;

assign zext_ln215_3_fu_517_p1 = tmp_9_fu_509_p3;

assign zext_ln215_4_fu_452_p1 = add_ln215_fu_447_p2;

assign zext_ln215_fu_443_p1 = j_0_reg_229;

assign zext_ln321_1_fu_323_p1 = add_ln321_fu_317_p2;

assign zext_ln321_2_fu_369_p1 = tmp_3_fu_359_p4;

assign zext_ln321_3_fu_385_p1 = tmp_5_fu_377_p3;

assign zext_ln321_4_fu_395_p1 = add_ln321_1_fu_389_p2;

assign zext_ln321_fu_313_p1 = select_ln544_fu_285_p3;

assign zext_ln696_fu_309_p1 = tmp_fu_301_p3;

assign zext_ln714_fu_431_p1 = tmp_6_fu_423_p3;

always @ (posedge ap_clk) begin
    zext_ln714_reg_600[6:0] <= 7'b0000000;
    zext_ln714_reg_600[16] <= 1'b0;
end

endmodule //coloringFB_bot_m
