// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_partition_matmul_partition,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.559000,HLS_SYN_LAT=2306,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=507,HLS_SYN_LUT=525,HLS_VERSION=2020_2}" *)

module matmul_partition (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln50_fu_173_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [7:0] add_ln50_fu_167_p2;
reg   [7:0] add_ln50_reg_339;
reg    ap_block_state2;
reg   [31:0] tmp_V_reg_347;
wire   [5:0] trunc_ln414_fu_179_p1;
reg   [5:0] trunc_ln414_reg_352;
wire   [0:0] icmp_ln414_fu_193_p2;
reg   [0:0] icmp_ln414_reg_357;
reg   [31:0] tmp_V_1_reg_361;
reg   [31:0] tmp_V_2_reg_366;
reg   [31:0] tmp_V_3_reg_371;
reg   [31:0] tmp_V_4_reg_376;
reg   [31:0] tmp_V_5_reg_381;
reg   [31:0] tmp_V_6_reg_386;
wire   [7:0] add_ln64_fu_219_p2;
reg   [7:0] add_ln64_reg_391;
wire    ap_CS_fsm_state10;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire   [0:0] icmp_ln64_fu_225_p2;
wire   [0:0] icmp_ln674_fu_251_p2;
reg   [0:0] icmp_ln674_reg_409;
reg   [31:0] p_Result_1_reg_419;
reg   [31:0] p_Result_2_reg_424;
reg   [31:0] p_Result_3_reg_429;
reg   [31:0] p_Result_4_reg_434;
reg   [31:0] p_Result_5_reg_439;
reg   [31:0] p_Result_6_reg_444;
wire   [31:0] trunc_ln674_1_fu_335_p1;
reg   [31:0] trunc_ln674_1_reg_449;
reg   [5:0] A_V_0_address0;
reg    A_V_0_ce0;
reg    A_V_0_we0;
wire   [255:0] A_V_0_q0;
reg   [5:0] A_V_1_address0;
reg    A_V_1_ce0;
reg    A_V_1_we0;
wire   [255:0] A_V_1_q0;
reg   [7:0] i_reg_145;
reg   [7:0] i_1_reg_156;
wire   [63:0] zext_ln414_fu_199_p1;
wire   [63:0] zext_ln674_fu_235_p1;
wire   [255:0] p_Result_s_fu_204_p9;
wire   [1:0] tmp_fu_183_p4;
wire   [5:0] trunc_ln674_fu_231_p1;
wire   [1:0] tmp_1_fu_241_p4;
wire   [255:0] p_Val2_s_fu_257_p3;
reg   [18:0] ap_NS_fsm;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

matmul_partition_A_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
A_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_V_0_address0),
    .ce0(A_V_0_ce0),
    .we0(A_V_0_we0),
    .d0(p_Result_s_fu_204_p9),
    .q0(A_V_0_q0)
);

matmul_partition_A_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
A_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_V_1_address0),
    .ce0(A_V_1_ce0),
    .we0(A_V_1_we0),
    .d0(p_Result_s_fu_204_p9),
    .q0(A_V_1_q0)
);

matmul_partition_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

matmul_partition_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln50_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_156 <= 8'd0;
    end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
        i_1_reg_156 <= add_ln64_reg_391;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_145 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_reg_145 <= add_ln50_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln50_reg_339 <= add_ln50_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0))) begin
        add_ln64_reg_391 <= add_ln64_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln414_reg_357 <= icmp_ln414_fu_193_p2;
        tmp_V_reg_347 <= Input_1_V_TDATA_int_regslice;
        trunc_ln414_reg_352 <= trunc_ln414_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln64_fu_225_p2 == 1'd0))) begin
        icmp_ln674_reg_409 <= icmp_ln674_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Result_1_reg_419 <= {{p_Val2_s_fu_257_p3[223:192]}};
        p_Result_2_reg_424 <= {{p_Val2_s_fu_257_p3[191:160]}};
        p_Result_3_reg_429 <= {{p_Val2_s_fu_257_p3[159:128]}};
        p_Result_4_reg_434 <= {{p_Val2_s_fu_257_p3[127:96]}};
        p_Result_5_reg_439 <= {{p_Val2_s_fu_257_p3[95:64]}};
        p_Result_6_reg_444 <= {{p_Val2_s_fu_257_p3[63:32]}};
        trunc_ln674_1_reg_449 <= trunc_ln674_1_fu_335_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_V_1_reg_361 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_2_reg_366 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_V_3_reg_371 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_V_4_reg_376 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_V_5_reg_381 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_V_6_reg_386 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_V_0_address0 = zext_ln674_fu_235_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_V_0_address0 = zext_ln414_fu_199_p1;
    end else begin
        A_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state10) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0)))) begin
        A_V_0_ce0 = 1'b1;
    end else begin
        A_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice) & (icmp_ln414_reg_357 == 1'd1))) begin
        A_V_0_we0 = 1'b1;
    end else begin
        A_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_V_1_address0 = zext_ln674_fu_235_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_V_1_address0 = zext_ln414_fu_199_p1;
    end else begin
        A_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state10) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0)))) begin
        A_V_1_ce0 = 1'b1;
    end else begin
        A_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice) & (icmp_ln414_reg_357 == 1'd0))) begin
        A_V_1_we0 = 1'b1;
    end else begin
        A_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln50_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID_int_regslice)) | (~((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln50_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == Output_1_V_TREADY_int_regslice)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            Output_1_V_TDATA_int_regslice = trunc_ln674_1_reg_449;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            Output_1_V_TDATA_int_regslice = p_Result_6_reg_444;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            Output_1_V_TDATA_int_regslice = p_Result_5_reg_439;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            Output_1_V_TDATA_int_regslice = p_Result_4_reg_434;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            Output_1_V_TDATA_int_regslice = p_Result_3_reg_429;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            Output_1_V_TDATA_int_regslice = p_Result_2_reg_424;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            Output_1_V_TDATA_int_regslice = p_Result_1_reg_419;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            Output_1_V_TDATA_int_regslice = {{p_Val2_s_fu_257_p3[255:224]}};
        end else begin
            Output_1_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state11)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln64_fu_225_p2 == 1'd1) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln64_fu_225_p2 == 1'd1) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln50_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln50_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln64_fu_225_p2 == 1'd1) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln64_fu_225_p2 == 1'd0) & (regslice_both_Output_1_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln50_fu_167_p2 = (i_reg_145 + 8'd1);

assign add_ln64_fu_219_p2 = (i_1_reg_156 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((icmp_ln50_fu_173_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln414_fu_193_p2 = ((tmp_fu_183_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_173_p2 = ((i_reg_145 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_225_p2 = ((i_1_reg_156 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_251_p2 = ((tmp_1_fu_241_p4 == 2'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_204_p9 = {{{{{{{{tmp_V_reg_347}, {tmp_V_1_reg_361}}, {tmp_V_2_reg_366}}, {tmp_V_3_reg_371}}, {tmp_V_4_reg_376}}, {tmp_V_5_reg_381}}, {tmp_V_6_reg_386}}, {Input_1_V_TDATA_int_regslice}};

assign p_Val2_s_fu_257_p3 = ((icmp_ln674_reg_409[0:0] == 1'b1) ? A_V_0_q0 : A_V_1_q0);

assign tmp_1_fu_241_p4 = {{i_1_reg_156[7:6]}};

assign tmp_fu_183_p4 = {{i_reg_145[7:6]}};

assign trunc_ln414_fu_179_p1 = i_reg_145[5:0];

assign trunc_ln674_1_fu_335_p1 = p_Val2_s_fu_257_p3[31:0];

assign trunc_ln674_fu_231_p1 = i_1_reg_156[5:0];

assign zext_ln414_fu_199_p1 = trunc_ln414_reg_352;

assign zext_ln674_fu_235_p1 = trunc_ln674_fu_231_p1;

endmodule //matmul_partition
