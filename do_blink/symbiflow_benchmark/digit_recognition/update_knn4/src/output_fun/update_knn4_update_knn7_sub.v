// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn4_update_knn7_sub (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_din,
        Output_1_full_n,
        Output_1_write
);

parameter    ap_ST_fsm_state1 = 59'd1;
parameter    ap_ST_fsm_state2 = 59'd2;
parameter    ap_ST_fsm_state3 = 59'd4;
parameter    ap_ST_fsm_state4 = 59'd8;
parameter    ap_ST_fsm_state5 = 59'd16;
parameter    ap_ST_fsm_state6 = 59'd32;
parameter    ap_ST_fsm_state7 = 59'd64;
parameter    ap_ST_fsm_state8 = 59'd128;
parameter    ap_ST_fsm_state9 = 59'd256;
parameter    ap_ST_fsm_state10 = 59'd512;
parameter    ap_ST_fsm_pp1_stage0 = 59'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 59'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 59'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 59'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 59'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 59'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 59'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 59'd131072;
parameter    ap_ST_fsm_state20 = 59'd262144;
parameter    ap_ST_fsm_state21 = 59'd524288;
parameter    ap_ST_fsm_state22 = 59'd1048576;
parameter    ap_ST_fsm_state23 = 59'd2097152;
parameter    ap_ST_fsm_state24 = 59'd4194304;
parameter    ap_ST_fsm_state25 = 59'd8388608;
parameter    ap_ST_fsm_state26 = 59'd16777216;
parameter    ap_ST_fsm_state27 = 59'd33554432;
parameter    ap_ST_fsm_state28 = 59'd67108864;
parameter    ap_ST_fsm_state29 = 59'd134217728;
parameter    ap_ST_fsm_state30 = 59'd268435456;
parameter    ap_ST_fsm_state31 = 59'd536870912;
parameter    ap_ST_fsm_state32 = 59'd1073741824;
parameter    ap_ST_fsm_state33 = 59'd2147483648;
parameter    ap_ST_fsm_state34 = 59'd4294967296;
parameter    ap_ST_fsm_state35 = 59'd8589934592;
parameter    ap_ST_fsm_state36 = 59'd17179869184;
parameter    ap_ST_fsm_state37 = 59'd34359738368;
parameter    ap_ST_fsm_state38 = 59'd68719476736;
parameter    ap_ST_fsm_state39 = 59'd137438953472;
parameter    ap_ST_fsm_state40 = 59'd274877906944;
parameter    ap_ST_fsm_state41 = 59'd549755813888;
parameter    ap_ST_fsm_state42 = 59'd1099511627776;
parameter    ap_ST_fsm_state43 = 59'd2199023255552;
parameter    ap_ST_fsm_state44 = 59'd4398046511104;
parameter    ap_ST_fsm_state45 = 59'd8796093022208;
parameter    ap_ST_fsm_state46 = 59'd17592186044416;
parameter    ap_ST_fsm_state47 = 59'd35184372088832;
parameter    ap_ST_fsm_state48 = 59'd70368744177664;
parameter    ap_ST_fsm_state49 = 59'd140737488355328;
parameter    ap_ST_fsm_state50 = 59'd281474976710656;
parameter    ap_ST_fsm_state51 = 59'd562949953421312;
parameter    ap_ST_fsm_state52 = 59'd1125899906842624;
parameter    ap_ST_fsm_state53 = 59'd2251799813685248;
parameter    ap_ST_fsm_state54 = 59'd4503599627370496;
parameter    ap_ST_fsm_state55 = 59'd9007199254740992;
parameter    ap_ST_fsm_state56 = 59'd18014398509481984;
parameter    ap_ST_fsm_state57 = 59'd36028797018963968;
parameter    ap_ST_fsm_state58 = 59'd72057594037927936;
parameter    ap_ST_fsm_state59 = 59'd144115188075855872;
parameter    ap_ST_fsm_state60 = 59'd288230376151711744;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_din;
input   Output_1_full_n;
output   Output_1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[31:0] Output_1_din;
reg Output_1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [58:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] index7;
reg   [8:0] knn_set7_0;
reg   [8:0] knn_set7_1;
reg   [8:0] knn_set7_2;
reg   [8:0] knn_set7_3;
reg   [8:0] knn_set7_4;
reg   [8:0] knn_set7_5;
reg   [8:0] training_set7_V_0_address0;
reg    training_set7_V_0_ce0;
reg    training_set7_V_0_we0;
wire   [255:0] training_set7_V_0_q0;
reg   [8:0] training_set7_V_1_address0;
reg    training_set7_V_1_ce0;
reg    training_set7_V_1_we0;
wire   [255:0] training_set7_V_1_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln141_fu_588_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln155_fu_645_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln155_reg_1284;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg    Output_1_blk_n;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
reg   [11:0] i_5_reg_216;
reg   [31:0] reg_534;
reg    ap_block_state2;
reg    ap_block_state11_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state12_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state13_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state14_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state15_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state16_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state17_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state18_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_state20;
reg   [31:0] reg_540;
reg   [31:0] reg_544;
reg   [31:0] reg_548;
reg   [31:0] reg_552;
reg   [31:0] reg_556;
reg   [31:0] reg_560;
wire   [8:0] grp_popcount_fu_529_ap_return;
reg   [8:0] reg_564;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire   [0:0] index7_load_load_fu_574_p1;
reg   [0:0] index7_load_reg_1256;
wire   [9:0] add_ln141_fu_578_p2;
reg   [9:0] add_ln141_reg_1260;
wire   [8:0] trunc_ln141_fu_584_p1;
reg   [8:0] trunc_ln141_reg_1265;
wire   [0:0] icmp_ln414_fu_594_p2;
reg   [0:0] icmp_ln414_reg_1274;
wire   [11:0] i_6_fu_639_p2;
reg   [11:0] i_6_reg_1279;
reg   [31:0] tmp_V_123_reg_1288;
reg   [31:0] tmp_V_124_reg_1293;
reg   [31:0] tmp_V_125_reg_1299;
reg   [31:0] tmp_V_126_reg_1305;
reg   [31:0] tmp_V_106_reg_1311;
reg   [31:0] tmp_V_107_reg_1316;
wire   [255:0] p_Result_36_fu_693_p9;
reg   [255:0] p_Result_36_reg_1321;
wire   [8:0] add_ln250_fu_712_p2;
reg   [8:0] add_ln250_reg_1327;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln250_fu_718_p2;
wire   [255:0] xor_ln1350_fu_730_p2;
reg   [255:0] xor_ln1350_reg_1345;
wire    ap_CS_fsm_state37;
wire   [255:0] xor_ln1350_2_fu_735_p2;
reg   [255:0] xor_ln1350_2_reg_1350;
reg   [8:0] knn_set7_0_load_reg_1355;
reg   [8:0] knn_set7_1_load_reg_1363;
wire   [0:0] icmp_ln36_fu_748_p2;
reg   [0:0] icmp_ln36_reg_1371;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln44_fu_777_p2;
wire   [1:0] select_ln45_fu_786_p3;
reg   [8:0] knn_set7_3_load_1_reg_1392;
reg   [8:0] knn_set7_4_load_reg_1400;
wire   [0:0] icmp_ln36_5_fu_820_p2;
reg   [0:0] icmp_ln36_5_reg_1408;
wire   [31:0] p_cast_fu_897_p1;
reg   [31:0] p_cast_reg_1420;
wire    ap_CS_fsm_state49;
wire   [31:0] p_cast2_fu_901_p1;
reg   [31:0] p_cast2_reg_1425;
wire   [31:0] p_cast3_fu_905_p1;
reg   [31:0] p_cast3_reg_1430;
wire   [31:0] p_cast4_fu_909_p1;
reg   [31:0] p_cast4_reg_1435;
wire   [31:0] p_cast5_fu_913_p1;
reg   [31:0] p_cast5_reg_1440;
wire   [31:0] p_cast6_fu_917_p1;
reg   [31:0] p_cast6_reg_1445;
wire   [2:0] add_ln70_fu_921_p2;
reg   [2:0] add_ln70_reg_1450;
wire    ap_CS_fsm_state50;
wire   [1:0] select_ln70_fu_961_p3;
reg   [1:0] select_ln70_reg_1458;
wire   [0:0] icmp_ln70_fu_949_p2;
wire   [1:0] select_ln70_2_fu_1005_p3;
reg   [1:0] select_ln70_2_reg_1463;
wire   [2:0] p_t_fu_1017_p2;
reg   [2:0] p_t_reg_1468;
wire   [31:0] min_distance_list_0_fu_1023_p8;
reg   [31:0] min_distance_list_0_reg_1473;
wire    ap_CS_fsm_state51;
wire   [5:0] select_ln81_fu_1068_p3;
reg   [5:0] select_ln81_reg_1484;
reg   [3:0] tmp_reg_1489;
wire   [31:0] select_ln90_fu_1147_p3;
wire    ap_CS_fsm_state52;
wire   [31:0] select_ln90_1_fu_1155_p3;
wire   [31:0] select_ln90_2_fu_1163_p3;
wire   [31:0] select_ln90_3_fu_1205_p3;
wire   [31:0] select_ln90_4_fu_1213_p3;
wire   [31:0] select_ln90_5_fu_1221_p3;
wire   [31:0] select_ln95_6_fu_1229_p3;
wire   [31:0] select_ln95_7_fu_1236_p3;
wire   [31:0] select_ln95_8_fu_1243_p3;
wire   [1:0] add_ln72_fu_1251_p2;
wire    ap_CS_fsm_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_block_pp1_stage7_subdone;
wire    grp_popcount_fu_529_ap_start;
wire    grp_popcount_fu_529_ap_done;
wire    grp_popcount_fu_529_ap_idle;
wire    grp_popcount_fu_529_ap_ready;
reg   [255:0] grp_popcount_fu_529_x;
reg   [9:0] i_reg_205;
reg    ap_block_state1;
reg   [11:0] ap_phi_mux_i_5_phi_fu_220_p4;
reg   [8:0] ap_phi_mux_knn_set7_5_load_123_phi_fu_359_p8;
reg   [8:0] knn_set7_5_load_1_reg_227;
wire    ap_CS_fsm_state48;
reg   [8:0] ap_phi_mux_knn_set7_4_load_120_phi_fu_374_p8;
reg   [8:0] knn_set7_4_load_1_reg_239;
reg   [8:0] ap_phi_mux_knn_set7_3_load17_phi_fu_389_p8;
reg   [8:0] knn_set7_3_load_reg_251;
reg   [8:0] knn_set7_2_load_114_reg_310;
reg   [8:0] knn_set7_2_load_1_reg_263;
reg   [8:0] knn_set7_1_load_111_reg_325;
reg   [8:0] knn_set7_1_load_1_reg_275;
reg   [8:0] knn_set7_0_load_18_reg_340;
reg   [8:0] knn_set7_0_load_1_reg_287;
reg   [8:0] i_7_reg_299;
wire   [0:0] icmp_ln44_1_fu_852_p2;
wire   [2:0] select_ln45_4_fu_871_p3;
reg   [2:0] indvar_flatten_reg_400;
reg   [1:0] i_8_reg_411;
reg   [31:0] min_distance_list_2_1_reg_422;
reg   [31:0] min_distance_list_1_1_reg_432;
reg   [31:0] min_distance_list_1_3_reg_442;
reg   [1:0] j_reg_452;
reg   [31:0] p_0122_reg_463;
reg   [31:0] p_0119_reg_474;
reg   [31:0] p_0121_reg_485;
reg   [31:0] p_0_reg_496;
reg   [31:0] p_0123_reg_507;
reg   [31:0] min_distance_list_2_3_reg_518;
reg    grp_popcount_fu_529_ap_start_reg;
reg   [58:0] ap_NS_fsm;
wire    ap_NS_fsm_state38;
wire    ap_NS_fsm_state43;
wire    ap_CS_fsm_state38;
wire   [63:0] zext_ln414_fu_611_p1;
wire   [63:0] zext_ln250_fu_724_p1;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [255:0] p_Result_s_fu_617_p9;
wire   [8:0] add_ln414_fu_600_p2;
wire   [8:0] select_ln414_fu_605_p3;
wire   [8:0] select_ln36_fu_754_p3;
wire   [0:0] icmp_ln36_4_fu_763_p2;
wire   [8:0] select_ln36_4_fu_769_p3;
wire   [1:0] zext_ln45_fu_783_p1;
wire   [8:0] select_ln36_5_fu_826_p3;
wire   [0:0] icmp_ln36_6_fu_838_p2;
wire   [8:0] select_ln36_6_fu_844_p3;
wire   [0:0] or_ln45_fu_866_p2;
wire   [2:0] select_ln45_3_fu_858_p3;
wire   [0:0] empty_24_fu_931_p1;
wire   [2:0] p_shl_fu_935_p3;
wire   [2:0] zext_ln70_fu_927_p1;
wire   [0:0] icmp_ln72_fu_955_p2;
wire   [1:0] add_ln70_1_fu_969_p2;
wire   [0:0] empty_27_fu_979_p1;
wire   [2:0] p_shl13_mid1_fu_983_p3;
wire   [2:0] zext_ln70_1_fu_975_p1;
wire   [2:0] p_mid1_fu_991_p2;
wire   [2:0] empty_25_fu_943_p2;
wire   [2:0] select_ln70_1_fu_997_p3;
wire   [2:0] j_cast_fu_1013_p1;
wire   [0:0] icmp_ln80_fu_1034_p2;
wire   [0:0] icmp_ln80_1_fu_1040_p2;
wire   [0:0] xor_ln82_fu_1046_p2;
wire   [0:0] and_ln81_fu_1052_p2;
wire   [0:0] or_ln81_fu_1062_p2;
wire   [5:0] zext_ln81_fu_1058_p1;
wire   [0:0] icmp_ln80_2_fu_1086_p2;
wire   [0:0] icmp_ln82_fu_1091_p2;
wire   [0:0] and_ln81_1_fu_1096_p2;
wire   [5:0] select_ln81_1_fu_1102_p3;
wire   [4:0] tmp_2_fu_1109_p4;
wire   [0:0] icmp_ln90_fu_1119_p2;
wire   [31:0] select_ln95_fu_1125_p3;
wire   [31:0] select_ln95_1_fu_1132_p3;
wire   [31:0] select_ln95_2_fu_1140_p3;
wire   [0:0] icmp_ln95_fu_1177_p2;
wire   [0:0] icmp_ln90_1_fu_1171_p2;
wire   [31:0] select_ln95_3_fu_1183_p3;
wire   [31:0] select_ln95_4_fu_1190_p3;
wire   [31:0] select_ln95_5_fu_1198_p3;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 59'd1;
#0 index7 = 1'd0;
#0 knn_set7_0 = 9'd0;
#0 knn_set7_1 = 9'd0;
#0 knn_set7_2 = 9'd0;
#0 knn_set7_3 = 9'd0;
#0 knn_set7_4 = 9'd0;
#0 knn_set7_5 = 9'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_popcount_fu_529_ap_start_reg = 1'b0;
end

update_knn4_update_knn7_sub_training_set7_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set7_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set7_V_0_address0),
    .ce0(training_set7_V_0_ce0),
    .we0(training_set7_V_0_we0),
    .d0(p_Result_s_fu_617_p9),
    .q0(training_set7_V_0_q0)
);

update_knn4_update_knn7_sub_training_set7_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set7_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set7_V_1_address0),
    .ce0(training_set7_V_1_ce0),
    .we0(training_set7_V_1_we0),
    .d0(p_Result_s_fu_617_p9),
    .q0(training_set7_V_1_q0)
);

update_knn4_popcount grp_popcount_fu_529(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_popcount_fu_529_ap_start),
    .ap_done(grp_popcount_fu_529_ap_done),
    .ap_idle(grp_popcount_fu_529_ap_idle),
    .ap_ready(grp_popcount_fu_529_ap_ready),
    .x(grp_popcount_fu_529_x),
    .ap_return(grp_popcount_fu_529_ap_return),
    .ap_ce(1'b1)
);

update_knn4_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U2(
    .din0(p_cast_reg_1420),
    .din1(p_cast2_reg_1425),
    .din2(p_cast3_reg_1430),
    .din3(p_cast4_reg_1435),
    .din4(p_cast5_reg_1440),
    .din5(p_cast6_reg_1445),
    .din6(p_t_reg_1468),
    .dout(min_distance_list_0_fu_1023_p8)
);

update_knn4_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_popcount_fu_529_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state43) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == ap_NS_fsm_state38) & (1'b1 == ap_CS_fsm_state37)))) begin
            grp_popcount_fu_529_ap_start_reg <= 1'b1;
        end else if ((grp_popcount_fu_529_ap_ready == 1'b1)) begin
            grp_popcount_fu_529_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_5_reg_216 <= 12'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_5_reg_216 <= i_6_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_7_reg_299 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        i_7_reg_299 <= add_ln250_reg_1327;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_8_reg_411 <= select_ln70_2_reg_1463;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        i_8_reg_411 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index7_load_load_fu_574_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_205 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_reg_205 <= add_ln141_reg_1260;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        indvar_flatten_reg_400 <= add_ln70_reg_1450;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        indvar_flatten_reg_400 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_reg_452 <= add_ln72_fu_1251_p2;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        j_reg_452 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_0 <= 9'd256;
    end else if (((select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_0 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_0_load_18_reg_340 <= reg_564;
    end else if ((((icmp_ln44_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | (~(select_ln45_fu_786_p3 == 2'd1) & ~(select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)) | ((select_ln45_fu_786_p3 == 2'd1) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        knn_set7_0_load_18_reg_340 <= knn_set7_0_load_reg_1355;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_0_load_1_reg_287 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_0_load_1_reg_287 <= knn_set7_0_load_18_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_1 <= 9'd256;
    end else if (((select_ln45_fu_786_p3 == 2'd1) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_1 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln45_fu_786_p3 == 2'd1) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_1_load_111_reg_325 <= reg_564;
    end else if ((((icmp_ln44_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | (~(select_ln45_fu_786_p3 == 2'd1) & ~(select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)) | ((select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        knn_set7_1_load_111_reg_325 <= knn_set7_1_load_reg_1363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_1_load_1_reg_275 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_1_load_1_reg_275 <= knn_set7_1_load_111_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_2 <= 9'd256;
    end else if ((~(select_ln45_fu_786_p3 == 2'd1) & ~(select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_2 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln44_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | ((select_ln45_fu_786_p3 == 2'd1) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)) | ((select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        knn_set7_2_load_114_reg_310 <= knn_set7_2;
    end else if ((~(select_ln45_fu_786_p3 == 2'd1) & ~(select_ln45_fu_786_p3 == 2'd0) & (icmp_ln44_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        knn_set7_2_load_114_reg_310 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_2_load_1_reg_263 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_2_load_1_reg_263 <= knn_set7_2_load_114_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_3 <= 9'd256;
    end else if (((select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        knn_set7_3 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_3_load_reg_251 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_3_load_reg_251 <= ap_phi_mux_knn_set7_3_load17_phi_fu_389_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_4 <= 9'd256;
    end else if (((select_ln45_4_fu_871_p3 == 3'd4) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        knn_set7_4 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_4_load_1_reg_239 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_4_load_1_reg_239 <= ap_phi_mux_knn_set7_4_load_120_phi_fu_374_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set7_5 <= 9'd256;
    end else if ((~(select_ln45_4_fu_871_p3 == 3'd4) & ~(select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        knn_set7_5 <= reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        knn_set7_5_load_1_reg_227 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        knn_set7_5_load_1_reg_227 <= ap_phi_mux_knn_set7_5_load_123_phi_fu_359_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        min_distance_list_1_1_reg_432 <= select_ln90_3_fu_1205_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_1_1_reg_432 <= tmp_V_125_reg_1299;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        min_distance_list_1_3_reg_442 <= select_ln95_6_fu_1229_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_1_3_reg_442 <= tmp_V_126_reg_1305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        min_distance_list_2_1_reg_422 <= select_ln90_fu_1147_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_2_1_reg_422 <= tmp_V_124_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        min_distance_list_2_3_reg_518 <= select_ln90_5_fu_1221_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_2_3_reg_518 <= tmp_V_125_reg_1299;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0119_reg_474 <= select_ln90_2_fu_1163_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        p_0119_reg_474 <= tmp_V_124_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0121_reg_485 <= select_ln95_7_fu_1236_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        p_0121_reg_485 <= tmp_V_126_reg_1305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0122_reg_463 <= select_ln90_1_fu_1155_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        p_0122_reg_463 <= tmp_V_106_reg_1311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0123_reg_507 <= select_ln90_4_fu_1213_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        p_0123_reg_507 <= tmp_V_107_reg_1316;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_0_reg_496 <= select_ln95_8_fu_1243_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        p_0_reg_496 <= reg_534;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln141_reg_1260 <= add_ln141_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln250_reg_1327 <= add_ln250_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        add_ln70_reg_1450 <= add_ln70_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_6_reg_1279 <= i_6_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln155_reg_1284 <= icmp_ln155_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        icmp_ln36_5_reg_1408 <= icmp_ln36_5_fu_820_p2;
        knn_set7_3_load_1_reg_1392 <= knn_set7_3;
        knn_set7_4_load_reg_1400 <= knn_set7_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        icmp_ln36_reg_1371 <= icmp_ln36_fu_748_p2;
        knn_set7_0_load_reg_1355 <= knn_set7_0;
        knn_set7_1_load_reg_1363 <= knn_set7_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd0))) begin
        icmp_ln414_reg_1274 <= icmp_ln414_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (index7_load_reg_1256 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        index7 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        index7_load_reg_1256 <= index7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        min_distance_list_0_reg_1473 <= min_distance_list_0_fu_1023_p8;
        select_ln81_reg_1484[0] <= select_ln81_fu_1068_p3[0];
select_ln81_reg_1484[3] <= select_ln81_fu_1068_p3[3];
select_ln81_reg_1484[5] <= select_ln81_fu_1068_p3[5];
        tmp_reg_1489 <= {{select_ln81_fu_1068_p3[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        p_Result_36_reg_1321 <= p_Result_36_fu_693_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p_cast2_reg_1425[8 : 0] <= p_cast2_fu_901_p1[8 : 0];
        p_cast3_reg_1430[8 : 0] <= p_cast3_fu_905_p1[8 : 0];
        p_cast4_reg_1435[8 : 0] <= p_cast4_fu_909_p1[8 : 0];
        p_cast5_reg_1440[8 : 0] <= p_cast5_fu_913_p1[8 : 0];
        p_cast6_reg_1445[8 : 0] <= p_cast6_fu_917_p1[8 : 0];
        p_cast_reg_1420[8 : 0] <= p_cast_fu_897_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        p_t_reg_1468 <= p_t_fu_1017_p2;
        select_ln70_2_reg_1463 <= select_ln70_2_fu_1005_p3;
        select_ln70_reg_1458 <= select_ln70_fu_961_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_534 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_540 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_544 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_548 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_552 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_556 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_560 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_564 <= grp_popcount_fu_529_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_V_106_reg_1311 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_V_107_reg_1316 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_V_123_reg_1288 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_V_124_reg_1293 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_V_125_reg_1299 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_V_126_reg_1305 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln141_reg_1265 <= trunc_ln141_fu_584_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        xor_ln1350_2_reg_1350 <= xor_ln1350_2_fu_735_p2;
        xor_ln1350_reg_1345 <= xor_ln1350_fu_730_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd0)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state33) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state32) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state31) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state30) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state29) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Output_1_blk_n = Output_1_full_n;
    end else begin
        Output_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0_reg_496;
    end else if (((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0123_reg_507;
    end else if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0122_reg_463;
    end else if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0121_reg_485;
    end else if (((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = min_distance_list_2_3_reg_518;
    end else if (((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_full_n))) begin
        Output_1_din = p_0119_reg_474;
    end else if ((((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_full_n)))) begin
        Output_1_din = 32'd0;
    end else if (((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_din = Input_1_V_TDATA_int_regslice;
    end else if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Output_1_din = reg_534;
    end else begin
        Output_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_full_n)) | ((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_full_n)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_write = 1'b1;
    end else begin
        Output_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_645_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln155_reg_1284 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_5_phi_fu_220_p4 = i_6_reg_1279;
    end else begin
        ap_phi_mux_i_5_phi_fu_220_p4 = i_5_reg_216;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_phi_mux_knn_set7_3_load17_phi_fu_389_p8 = reg_564;
    end else if ((((icmp_ln44_1_fu_852_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48)) | (~(select_ln45_4_fu_871_p3 == 3'd4) & ~(select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((select_ln45_4_fu_871_p3 == 3'd4) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        ap_phi_mux_knn_set7_3_load17_phi_fu_389_p8 = knn_set7_3_load_1_reg_1392;
    end else begin
        ap_phi_mux_knn_set7_3_load17_phi_fu_389_p8 = 'bx;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_871_p3 == 3'd4) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_phi_mux_knn_set7_4_load_120_phi_fu_374_p8 = reg_564;
    end else if ((((icmp_ln44_1_fu_852_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48)) | (~(select_ln45_4_fu_871_p3 == 3'd4) & ~(select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        ap_phi_mux_knn_set7_4_load_120_phi_fu_374_p8 = knn_set7_4_load_reg_1400;
    end else begin
        ap_phi_mux_knn_set7_4_load_120_phi_fu_374_p8 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln44_1_fu_852_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48)) | ((select_ln45_4_fu_871_p3 == 3'd4) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)) | ((select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        ap_phi_mux_knn_set7_5_load_123_phi_fu_359_p8 = knn_set7_5;
    end else if ((~(select_ln45_4_fu_871_p3 == 3'd4) & ~(select_ln45_4_fu_871_p3 == 3'd3) & (icmp_ln44_1_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_phi_mux_knn_set7_5_load_123_phi_fu_359_p8 = reg_564;
    end else begin
        ap_phi_mux_knn_set7_5_load_123_phi_fu_359_p8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_popcount_fu_529_x = xor_ln1350_2_reg_1350;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_popcount_fu_529_x = xor_ln1350_reg_1345;
    end else begin
        grp_popcount_fu_529_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        training_set7_V_0_address0 = zext_ln250_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set7_V_0_address0 = zext_ln414_fu_611_p1;
    end else begin
        training_set7_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set7_V_0_ce0 = 1'b1;
    end else begin
        training_set7_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1274 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set7_V_0_we0 = 1'b1;
    end else begin
        training_set7_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        training_set7_V_1_address0 = zext_ln250_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set7_V_1_address0 = zext_ln414_fu_611_p1;
    end else begin
        training_set7_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set7_V_1_ce0 = 1'b1;
    end else begin
        training_set7_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1274 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set7_V_1_we0 = 1'b1;
    end else begin
        training_set7_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index7_load_load_fu_574_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index7_load_load_fu_574_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_588_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln155_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln155_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln250_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln70_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign add_ln141_fu_578_p2 = (i_reg_205 + 10'd1);

assign add_ln250_fu_712_p2 = (i_7_reg_299 + 9'd1);

assign add_ln414_fu_600_p2 = (trunc_ln141_reg_1265 + 9'd62);

assign add_ln70_1_fu_969_p2 = (i_8_reg_411 + 2'd1);

assign add_ln70_fu_921_p2 = (indvar_flatten_reg_400 + 3'd1);

assign add_ln72_fu_1251_p2 = (select_ln70_reg_1458 + 2'd1);

assign and_ln81_1_fu_1096_p2 = (icmp_ln82_fu_1091_p2 & icmp_ln80_2_fu_1086_p2);

assign and_ln81_fu_1052_p2 = (xor_ln82_fu_1046_p2 & icmp_ln80_1_fu_1040_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state38 = ap_NS_fsm[32'd36];

assign ap_NS_fsm_state43 = ap_NS_fsm[32'd41];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_645_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_645_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_645_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_645_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp1_stage1_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state13_pp1_stage2_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_pp1_stage3_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_pp1_stage4_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_pp1_stage5_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_pp1_stage6_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_pp1_stage7_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1284 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1284 == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln141_fu_588_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Input_1_V_TVALID_int_regslice) | (1'b0 == Output_1_full_n));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign empty_24_fu_931_p1 = i_8_reg_411[0:0];

assign empty_25_fu_943_p2 = (p_shl_fu_935_p3 - zext_ln70_fu_927_p1);

assign empty_27_fu_979_p1 = add_ln70_1_fu_969_p2[0:0];

assign grp_popcount_fu_529_ap_start = grp_popcount_fu_529_ap_start_reg;

assign i_6_fu_639_p2 = (ap_phi_mux_i_5_phi_fu_220_p4 + 12'd1);

assign icmp_ln141_fu_588_p2 = ((i_reg_205 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_645_p2 = ((ap_phi_mux_i_5_phi_fu_220_p4 == 12'd2700) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_718_p2 = ((i_7_reg_299 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln36_4_fu_763_p2 = ((knn_set7_2 > select_ln36_fu_754_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_5_fu_820_p2 = ((knn_set7_4 > knn_set7_3) ? 1'b1 : 1'b0);

assign icmp_ln36_6_fu_838_p2 = ((knn_set7_5 > select_ln36_5_fu_826_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_748_p2 = ((knn_set7_1 > knn_set7_0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_594_p2 = ((i_reg_205 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_852_p2 = ((reg_564 < select_ln36_6_fu_844_p3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_777_p2 = ((reg_564 < select_ln36_4_fu_769_p3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_949_p2 = ((indvar_flatten_reg_400 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_955_p2 = ((j_reg_452 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_1040_p2 = (($signed(min_distance_list_0_fu_1023_p8) < $signed(min_distance_list_1_1_reg_432)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_1086_p2 = (($signed(min_distance_list_0_reg_1473) < $signed(min_distance_list_2_1_reg_422)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1034_p2 = (($signed(min_distance_list_0_fu_1023_p8) < $signed(min_distance_list_1_3_reg_442)) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_1091_p2 = ((tmp_reg_1489 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_1171_p2 = ((select_ln81_1_fu_1102_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1119_p2 = ((tmp_2_fu_1109_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1177_p2 = ((select_ln81_1_fu_1102_p3 == 6'd1) ? 1'b1 : 1'b0);

assign index7_load_load_fu_574_p1 = index7;

assign j_cast_fu_1013_p1 = select_ln70_fu_961_p3;

assign or_ln45_fu_866_p2 = (icmp_ln36_6_fu_838_p2 | icmp_ln36_5_reg_1408);

assign or_ln81_fu_1062_p2 = (icmp_ln80_fu_1034_p2 | and_ln81_fu_1052_p2);

assign p_Result_36_fu_693_p9 = {{{{{{{{reg_534}, {reg_540}}, {reg_544}}, {reg_548}}, {reg_552}}, {reg_556}}, {reg_560}}, {tmp_V_123_reg_1288}};

assign p_Result_s_fu_617_p9 = {{{{{{{{reg_534}, {reg_540}}, {reg_544}}, {reg_548}}, {reg_552}}, {reg_556}}, {reg_560}}, {Input_1_V_TDATA_int_regslice}};

assign p_cast2_fu_901_p1 = knn_set7_1_load_1_reg_275;

assign p_cast3_fu_905_p1 = knn_set7_2_load_1_reg_263;

assign p_cast4_fu_909_p1 = knn_set7_3_load_reg_251;

assign p_cast5_fu_913_p1 = knn_set7_4_load_1_reg_239;

assign p_cast6_fu_917_p1 = knn_set7_5_load_1_reg_227;

assign p_cast_fu_897_p1 = knn_set7_0_load_1_reg_287;

assign p_mid1_fu_991_p2 = (p_shl13_mid1_fu_983_p3 - zext_ln70_1_fu_975_p1);

assign p_shl13_mid1_fu_983_p3 = {{empty_27_fu_979_p1}, {2'd0}};

assign p_shl_fu_935_p3 = {{empty_24_fu_931_p1}, {2'd0}};

assign p_t_fu_1017_p2 = (select_ln70_1_fu_997_p3 + j_cast_fu_1013_p1);

assign select_ln36_4_fu_769_p3 = ((icmp_ln36_4_fu_763_p2[0:0] == 1'b1) ? knn_set7_2 : select_ln36_fu_754_p3);

assign select_ln36_5_fu_826_p3 = ((icmp_ln36_5_reg_1408[0:0] == 1'b1) ? knn_set7_4_load_reg_1400 : knn_set7_3_load_1_reg_1392);

assign select_ln36_6_fu_844_p3 = ((icmp_ln36_6_fu_838_p2[0:0] == 1'b1) ? knn_set7_5 : select_ln36_5_fu_826_p3);

assign select_ln36_fu_754_p3 = ((icmp_ln36_reg_1371[0:0] == 1'b1) ? knn_set7_1_load_reg_1363 : knn_set7_0_load_reg_1355);

assign select_ln414_fu_605_p3 = ((icmp_ln414_reg_1274[0:0] == 1'b1) ? trunc_ln141_reg_1265 : add_ln414_fu_600_p2);

assign select_ln45_3_fu_858_p3 = ((icmp_ln36_6_fu_838_p2[0:0] == 1'b1) ? 3'd5 : 3'd4);

assign select_ln45_4_fu_871_p3 = ((or_ln45_fu_866_p2[0:0] == 1'b1) ? select_ln45_3_fu_858_p3 : 3'd3);

assign select_ln45_fu_786_p3 = ((icmp_ln36_4_fu_763_p2[0:0] == 1'b1) ? 2'd2 : zext_ln45_fu_783_p1);

assign select_ln70_1_fu_997_p3 = ((icmp_ln72_fu_955_p2[0:0] == 1'b1) ? p_mid1_fu_991_p2 : empty_25_fu_943_p2);

assign select_ln70_2_fu_1005_p3 = ((icmp_ln72_fu_955_p2[0:0] == 1'b1) ? add_ln70_1_fu_969_p2 : i_8_reg_411);

assign select_ln70_fu_961_p3 = ((icmp_ln72_fu_955_p2[0:0] == 1'b1) ? 2'd0 : j_reg_452);

assign select_ln81_1_fu_1102_p3 = ((and_ln81_1_fu_1096_p2[0:0] == 1'b1) ? 6'd2 : select_ln81_reg_1484);

assign select_ln81_fu_1068_p3 = ((or_ln81_fu_1062_p2[0:0] == 1'b1) ? zext_ln81_fu_1058_p1 : 6'd40);

assign select_ln90_1_fu_1155_p3 = ((icmp_ln90_fu_1119_p2[0:0] == 1'b1) ? p_0123_reg_507 : select_ln95_1_fu_1132_p3);

assign select_ln90_2_fu_1163_p3 = ((icmp_ln90_fu_1119_p2[0:0] == 1'b1) ? min_distance_list_2_3_reg_518 : select_ln95_2_fu_1140_p3);

assign select_ln90_3_fu_1205_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? min_distance_list_1_3_reg_442 : select_ln95_3_fu_1183_p3);

assign select_ln90_4_fu_1213_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? p_0_reg_496 : select_ln95_4_fu_1190_p3);

assign select_ln90_5_fu_1221_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? min_distance_list_1_3_reg_442 : select_ln95_5_fu_1198_p3);

assign select_ln90_fu_1147_p3 = ((icmp_ln90_fu_1119_p2[0:0] == 1'b1) ? min_distance_list_2_3_reg_518 : select_ln95_fu_1125_p3);

assign select_ln95_1_fu_1132_p3 = ((and_ln81_1_fu_1096_p2[0:0] == 1'b1) ? 32'd6 : p_0122_reg_463);

assign select_ln95_2_fu_1140_p3 = ((and_ln81_1_fu_1096_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : p_0119_reg_474);

assign select_ln95_3_fu_1183_p3 = ((icmp_ln95_fu_1177_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : min_distance_list_1_1_reg_432);

assign select_ln95_4_fu_1190_p3 = ((icmp_ln95_fu_1177_p2[0:0] == 1'b1) ? 32'd6 : p_0123_reg_507);

assign select_ln95_5_fu_1198_p3 = ((icmp_ln95_fu_1177_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : min_distance_list_2_3_reg_518);

assign select_ln95_6_fu_1229_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : min_distance_list_1_3_reg_442);

assign select_ln95_7_fu_1236_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : p_0121_reg_485);

assign select_ln95_8_fu_1243_p3 = ((icmp_ln90_1_fu_1171_p2[0:0] == 1'b1) ? 32'd6 : p_0_reg_496);

assign select_ln95_fu_1125_p3 = ((and_ln81_1_fu_1096_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1473 : min_distance_list_2_1_reg_422);

assign start_out = real_start;

assign tmp_2_fu_1109_p4 = {{select_ln81_1_fu_1102_p3[5:1]}};

assign trunc_ln141_fu_584_p1 = i_reg_205[8:0];

assign xor_ln1350_2_fu_735_p2 = (training_set7_V_1_q0 ^ p_Result_36_reg_1321);

assign xor_ln1350_fu_730_p2 = (training_set7_V_0_q0 ^ p_Result_36_reg_1321);

assign xor_ln82_fu_1046_p2 = (icmp_ln80_fu_1034_p2 ^ 1'd1);

assign zext_ln250_fu_724_p1 = i_7_reg_299;

assign zext_ln414_fu_611_p1 = select_ln414_fu_605_p3;

assign zext_ln45_fu_783_p1 = icmp_ln36_reg_1371;

assign zext_ln70_1_fu_975_p1 = add_ln70_1_fu_969_p2;

assign zext_ln70_fu_927_p1 = i_8_reg_411;

assign zext_ln81_fu_1058_p1 = and_ln81_fu_1052_p2;

always @ (posedge ap_clk) begin
    p_cast_reg_1420[31:9] <= 23'b00000000000000000000000;
    p_cast2_reg_1425[31:9] <= 23'b00000000000000000000000;
    p_cast3_reg_1430[31:9] <= 23'b00000000000000000000000;
    p_cast4_reg_1435[31:9] <= 23'b00000000000000000000000;
    p_cast5_reg_1440[31:9] <= 23'b00000000000000000000000;
    p_cast6_reg_1445[31:9] <= 23'b00000000000000000000000;
    select_ln81_reg_1484[2:1] <= 2'b00;
    select_ln81_reg_1484[4] <= 1'b0;
end

endmodule //update_knn4_update_knn7_sub
