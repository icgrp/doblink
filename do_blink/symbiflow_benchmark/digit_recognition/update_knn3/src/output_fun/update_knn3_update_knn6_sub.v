// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn3_update_knn6_sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_dout,
        Input_1_empty_n,
        Input_1_read,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_pp0_stage0 = 60'd2;
parameter    ap_ST_fsm_pp0_stage1 = 60'd4;
parameter    ap_ST_fsm_pp0_stage2 = 60'd8;
parameter    ap_ST_fsm_pp0_stage3 = 60'd16;
parameter    ap_ST_fsm_pp0_stage4 = 60'd32;
parameter    ap_ST_fsm_pp0_stage5 = 60'd64;
parameter    ap_ST_fsm_pp0_stage6 = 60'd128;
parameter    ap_ST_fsm_pp0_stage7 = 60'd256;
parameter    ap_ST_fsm_state11 = 60'd512;
parameter    ap_ST_fsm_pp1_stage0 = 60'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 60'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 60'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 60'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 60'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 60'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 60'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 60'd131072;
parameter    ap_ST_fsm_state22 = 60'd262144;
parameter    ap_ST_fsm_state23 = 60'd524288;
parameter    ap_ST_fsm_state24 = 60'd1048576;
parameter    ap_ST_fsm_state25 = 60'd2097152;
parameter    ap_ST_fsm_state26 = 60'd4194304;
parameter    ap_ST_fsm_state27 = 60'd8388608;
parameter    ap_ST_fsm_state28 = 60'd16777216;
parameter    ap_ST_fsm_state29 = 60'd33554432;
parameter    ap_ST_fsm_state30 = 60'd67108864;
parameter    ap_ST_fsm_state31 = 60'd134217728;
parameter    ap_ST_fsm_state32 = 60'd268435456;
parameter    ap_ST_fsm_state33 = 60'd536870912;
parameter    ap_ST_fsm_state34 = 60'd1073741824;
parameter    ap_ST_fsm_state35 = 60'd2147483648;
parameter    ap_ST_fsm_state36 = 60'd4294967296;
parameter    ap_ST_fsm_state37 = 60'd8589934592;
parameter    ap_ST_fsm_state38 = 60'd17179869184;
parameter    ap_ST_fsm_state39 = 60'd34359738368;
parameter    ap_ST_fsm_state40 = 60'd68719476736;
parameter    ap_ST_fsm_state41 = 60'd137438953472;
parameter    ap_ST_fsm_state42 = 60'd274877906944;
parameter    ap_ST_fsm_state43 = 60'd549755813888;
parameter    ap_ST_fsm_state44 = 60'd1099511627776;
parameter    ap_ST_fsm_state45 = 60'd2199023255552;
parameter    ap_ST_fsm_state46 = 60'd4398046511104;
parameter    ap_ST_fsm_state47 = 60'd8796093022208;
parameter    ap_ST_fsm_state48 = 60'd17592186044416;
parameter    ap_ST_fsm_state49 = 60'd35184372088832;
parameter    ap_ST_fsm_state50 = 60'd70368744177664;
parameter    ap_ST_fsm_state51 = 60'd140737488355328;
parameter    ap_ST_fsm_state52 = 60'd281474976710656;
parameter    ap_ST_fsm_state53 = 60'd562949953421312;
parameter    ap_ST_fsm_state54 = 60'd1125899906842624;
parameter    ap_ST_fsm_state55 = 60'd2251799813685248;
parameter    ap_ST_fsm_state56 = 60'd4503599627370496;
parameter    ap_ST_fsm_state57 = 60'd9007199254740992;
parameter    ap_ST_fsm_state58 = 60'd18014398509481984;
parameter    ap_ST_fsm_state59 = 60'd36028797018963968;
parameter    ap_ST_fsm_state60 = 60'd72057594037927936;
parameter    ap_ST_fsm_state61 = 60'd144115188075855872;
parameter    ap_ST_fsm_state62 = 60'd288230376151711744;
parameter    ap_ST_fsm_state63 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_dout;
input   Input_1_empty_n;
output   Input_1_read;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] index6;
reg   [8:0] knn_set6_0;
reg   [8:0] knn_set6_1;
reg   [8:0] knn_set6_2;
reg   [8:0] knn_set6_3;
reg   [8:0] knn_set6_4;
reg   [8:0] knn_set6_5;
reg   [8:0] training_set6_V_0_address0;
reg    training_set6_V_0_ce0;
reg    training_set6_V_0_we0;
wire   [255:0] training_set6_V_0_q0;
reg   [8:0] training_set6_V_1_address0;
reg    training_set6_V_1_ce0;
reg    training_set6_V_1_we0;
wire   [255:0] training_set6_V_1_q0;
reg    Input_1_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln439_reg_1280;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln453_reg_1298;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg    Output_1_V_TDATA_blk_n;
reg   [0:0] icmp_ln453_reg_1298_pp1_iter1_reg;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
reg   [9:0] i_reg_203;
reg   [11:0] i_1_reg_214;
reg   [31:0] reg_532;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state13_pp1_stage1_iter0;
reg    ap_block_state13_io;
reg    ap_block_state21_pp1_stage1_iter1;
reg    ap_block_state21_io;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state14_pp1_stage2_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state15_pp1_stage3_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state16_pp1_stage4_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state17_pp1_stage5_iter0;
reg    ap_block_state17_io;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state18_pp1_stage6_iter0;
reg    ap_block_state18_io;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state19_pp1_stage7_iter0;
reg    ap_block_state19_io;
reg    ap_block_pp1_stage7_11001;
wire    ap_block_state12_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
reg    ap_block_state20_io;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state22;
reg    ap_block_state29;
reg   [31:0] reg_539;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] reg_546;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] reg_553;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] reg_559;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] reg_565;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [31:0] reg_571;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [8:0] grp_popcount_fu_527_ap_return;
reg   [8:0] reg_576;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire   [0:0] index6_load_load_fu_586_p1;
reg   [0:0] index6_load_reg_1271;
wire   [9:0] add_ln439_fu_590_p2;
reg   [9:0] add_ln439_reg_1275;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln439_fu_600_p2;
wire   [0:0] icmp_ln414_fu_606_p2;
reg   [0:0] icmp_ln414_reg_1284;
wire   [8:0] select_ln414_fu_618_p3;
reg   [8:0] select_ln414_reg_1288;
wire   [11:0] i_2_fu_653_p2;
reg   [11:0] i_2_reg_1293;
wire   [0:0] icmp_ln453_fu_659_p2;
wire   [255:0] p_Result_18_fu_707_p9;
reg   [255:0] p_Result_18_reg_1302;
wire   [8:0] add_ln548_fu_727_p2;
reg   [8:0] add_ln548_reg_1308;
wire    ap_CS_fsm_state38;
wire   [0:0] icmp_ln548_fu_733_p2;
wire   [255:0] xor_ln1350_fu_745_p2;
reg   [255:0] xor_ln1350_reg_1326;
wire    ap_CS_fsm_state39;
wire   [255:0] xor_ln1350_1_fu_750_p2;
reg   [255:0] xor_ln1350_1_reg_1331;
reg   [8:0] knn_set6_0_load_reg_1336;
reg   [8:0] knn_set6_1_load_reg_1344;
wire   [0:0] icmp_ln36_fu_763_p2;
reg   [0:0] icmp_ln36_reg_1352;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln44_fu_792_p2;
wire   [1:0] select_ln45_fu_801_p3;
reg   [8:0] knn_set6_3_load_1_reg_1373;
reg   [8:0] knn_set6_4_load_reg_1381;
wire   [0:0] icmp_ln36_2_fu_835_p2;
reg   [0:0] icmp_ln36_2_reg_1389;
wire   [31:0] p_cast_fu_912_p1;
reg   [31:0] p_cast_reg_1401;
wire    ap_CS_fsm_state51;
wire   [31:0] p_cast2_fu_916_p1;
reg   [31:0] p_cast2_reg_1406;
wire   [31:0] p_cast3_fu_920_p1;
reg   [31:0] p_cast3_reg_1411;
wire   [31:0] p_cast4_fu_924_p1;
reg   [31:0] p_cast4_reg_1416;
wire   [31:0] p_cast5_fu_928_p1;
reg   [31:0] p_cast5_reg_1421;
wire   [31:0] p_cast6_fu_932_p1;
reg   [31:0] p_cast6_reg_1426;
wire   [2:0] add_ln369_fu_936_p2;
reg   [2:0] add_ln369_reg_1431;
wire    ap_CS_fsm_state52;
wire   [1:0] select_ln369_fu_976_p3;
reg   [1:0] select_ln369_reg_1439;
wire   [0:0] icmp_ln369_fu_964_p2;
wire   [1:0] select_ln369_2_fu_1020_p3;
reg   [1:0] select_ln369_2_reg_1444;
wire   [2:0] p_t_fu_1032_p2;
reg   [2:0] p_t_reg_1449;
wire   [31:0] min_distance_list_0_fu_1038_p8;
reg   [31:0] min_distance_list_0_reg_1454;
wire    ap_CS_fsm_state53;
wire   [5:0] select_ln379_fu_1083_p3;
reg   [5:0] select_ln379_reg_1465;
reg   [3:0] tmp_reg_1470;
wire   [31:0] select_ln388_fu_1162_p3;
wire    ap_CS_fsm_state54;
wire   [31:0] select_ln388_1_fu_1170_p3;
wire   [31:0] select_ln388_2_fu_1178_p3;
wire   [31:0] select_ln388_3_fu_1220_p3;
wire   [31:0] select_ln388_4_fu_1228_p3;
wire   [31:0] select_ln388_5_fu_1236_p3;
wire   [31:0] select_ln393_6_fu_1244_p3;
wire   [31:0] select_ln393_7_fu_1251_p3;
wire   [31:0] select_ln393_8_fu_1258_p3;
wire   [1:0] add_ln371_fu_1266_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
wire    ap_CS_fsm_state11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage1_subdone;
wire    grp_popcount_fu_527_ap_start;
wire    grp_popcount_fu_527_ap_done;
wire    grp_popcount_fu_527_ap_idle;
wire    grp_popcount_fu_527_ap_ready;
reg   [255:0] grp_popcount_fu_527_x;
reg   [9:0] ap_phi_mux_i_phi_fu_207_p4;
reg   [11:0] ap_phi_mux_i_1_phi_fu_218_p4;
reg   [8:0] ap_phi_mux_knn_set6_5_load_123_phi_fu_357_p8;
reg   [8:0] knn_set6_5_load_1_reg_225;
wire    ap_CS_fsm_state50;
reg   [8:0] ap_phi_mux_knn_set6_4_load_120_phi_fu_372_p8;
reg   [8:0] knn_set6_4_load_1_reg_237;
reg   [8:0] ap_phi_mux_knn_set6_3_load17_phi_fu_387_p8;
reg   [8:0] knn_set6_3_load_reg_249;
reg   [8:0] knn_set6_2_load_114_reg_308;
reg   [8:0] knn_set6_2_load_1_reg_261;
reg   [8:0] knn_set6_1_load_111_reg_323;
reg   [8:0] knn_set6_1_load_1_reg_273;
reg   [8:0] knn_set6_0_load_18_reg_338;
reg   [8:0] knn_set6_0_load_1_reg_285;
reg   [8:0] i_3_reg_297;
wire   [0:0] icmp_ln44_1_fu_867_p2;
wire   [2:0] select_ln45_2_fu_886_p3;
reg   [2:0] indvar_flatten_reg_398;
reg   [1:0] i_4_reg_409;
reg   [31:0] min_distance_list_2_1_reg_420;
reg   [31:0] min_distance_list_1_1_reg_430;
reg   [31:0] min_distance_list_1_1_16_reg_440;
reg   [1:0] j_reg_450;
reg   [31:0] p_0122_reg_461;
reg   [31:0] p_0119_reg_472;
reg   [31:0] p_0121_reg_483;
reg   [31:0] p_0_reg_494;
reg   [31:0] p_0123_reg_505;
reg   [31:0] min_distance_list_2_1_17_reg_516;
reg    grp_popcount_fu_527_ap_start_reg;
reg   [59:0] ap_NS_fsm;
wire    ap_NS_fsm_state40;
wire    ap_NS_fsm_state45;
wire    ap_CS_fsm_state40;
wire   [63:0] zext_ln414_fu_626_p1;
wire   [63:0] zext_ln548_fu_739_p1;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_state28;
reg    ap_block_state30;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [255:0] p_Result_s_fu_631_p9;
wire   [8:0] trunc_ln439_fu_596_p1;
wire   [8:0] add_ln414_fu_612_p2;
wire   [8:0] select_ln36_fu_769_p3;
wire   [0:0] icmp_ln36_1_fu_778_p2;
wire   [8:0] select_ln36_1_fu_784_p3;
wire   [1:0] zext_ln45_fu_798_p1;
wire   [8:0] select_ln36_2_fu_841_p3;
wire   [0:0] icmp_ln36_3_fu_853_p2;
wire   [8:0] select_ln36_3_fu_859_p3;
wire   [0:0] or_ln45_fu_881_p2;
wire   [2:0] select_ln45_1_fu_873_p3;
wire   [0:0] empty_18_fu_946_p1;
wire   [2:0] p_shl_fu_950_p3;
wire   [2:0] zext_ln369_fu_942_p1;
wire   [0:0] icmp_ln371_fu_970_p2;
wire   [1:0] add_ln369_1_fu_984_p2;
wire   [0:0] empty_21_fu_994_p1;
wire   [2:0] p_shl13_mid1_fu_998_p3;
wire   [2:0] zext_ln369_1_fu_990_p1;
wire   [2:0] p_mid1_fu_1006_p2;
wire   [2:0] empty_19_fu_958_p2;
wire   [2:0] select_ln369_1_fu_1012_p3;
wire   [2:0] j_cast_fu_1028_p1;
wire   [0:0] icmp_ln378_fu_1049_p2;
wire   [0:0] icmp_ln378_1_fu_1055_p2;
wire   [0:0] xor_ln380_fu_1061_p2;
wire   [0:0] and_ln379_fu_1067_p2;
wire   [0:0] or_ln379_fu_1077_p2;
wire   [5:0] zext_ln379_fu_1073_p1;
wire   [0:0] icmp_ln378_2_fu_1101_p2;
wire   [0:0] icmp_ln380_fu_1106_p2;
wire   [0:0] and_ln379_1_fu_1111_p2;
wire   [5:0] select_ln379_1_fu_1117_p3;
wire   [4:0] tmp_1_fu_1124_p4;
wire   [0:0] icmp_ln388_fu_1134_p2;
wire   [31:0] select_ln393_fu_1140_p3;
wire   [31:0] select_ln393_1_fu_1147_p3;
wire   [31:0] select_ln393_2_fu_1155_p3;
wire   [0:0] icmp_ln393_fu_1192_p2;
wire   [0:0] icmp_ln388_1_fu_1186_p2;
wire   [31:0] select_ln393_3_fu_1198_p3;
wire   [31:0] select_ln393_4_fu_1205_p3;
wire   [31:0] select_ln393_5_fu_1213_p3;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg    ap_block_state63;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 60'd1;
#0 index6 = 1'd0;
#0 knn_set6_0 = 9'd0;
#0 knn_set6_1 = 9'd0;
#0 knn_set6_2 = 9'd0;
#0 knn_set6_3 = 9'd0;
#0 knn_set6_4 = 9'd0;
#0 knn_set6_5 = 9'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_popcount_fu_527_ap_start_reg = 1'b0;
end

update_knn3_update_knn5_sub_training_set5_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set6_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set6_V_0_address0),
    .ce0(training_set6_V_0_ce0),
    .we0(training_set6_V_0_we0),
    .d0(p_Result_s_fu_631_p9),
    .q0(training_set6_V_0_q0)
);

update_knn3_update_knn5_sub_training_set5_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set6_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set6_V_1_address0),
    .ce0(training_set6_V_1_ce0),
    .we0(training_set6_V_1_we0),
    .d0(p_Result_s_fu_631_p9),
    .q0(training_set6_V_1_q0)
);

update_knn3_popcount grp_popcount_fu_527(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_popcount_fu_527_ap_start),
    .ap_done(grp_popcount_fu_527_ap_done),
    .ap_idle(grp_popcount_fu_527_ap_idle),
    .ap_ready(grp_popcount_fu_527_ap_ready),
    .x(grp_popcount_fu_527_x),
    .ap_return(grp_popcount_fu_527_ap_return),
    .ap_ce(1'b1)
);

update_knn3_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U8(
    .din0(p_cast_reg_1401),
    .din1(p_cast2_reg_1406),
    .din2(p_cast3_reg_1411),
    .din3(p_cast4_reg_1416),
    .din4(p_cast5_reg_1421),
    .din5(p_cast6_reg_1426),
    .din6(p_t_reg_1449),
    .dout(min_distance_list_0_fu_1038_p8)
);

update_knn3_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index6_load_load_fu_586_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index6_load_load_fu_586_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_subdone)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_popcount_fu_527_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state39) & (1'b1 == ap_NS_fsm_state40)) | ((1'b1 == ap_CS_fsm_state44) & (1'b1 == ap_NS_fsm_state45)))) begin
            grp_popcount_fu_527_ap_start_reg <= 1'b1;
        end else if ((grp_popcount_fu_527_ap_ready == 1'b1)) begin
            grp_popcount_fu_527_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_214 <= 12'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_214 <= i_2_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        i_3_reg_297 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        i_3_reg_297 <= add_ln548_reg_1308;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_4_reg_409 <= select_ln369_2_reg_1444;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        i_4_reg_409 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index6_load_load_fu_586_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_203 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_203 <= add_ln439_reg_1275;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        indvar_flatten_reg_398 <= add_ln369_reg_1431;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        indvar_flatten_reg_398 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j_reg_450 <= add_ln371_fu_1266_p2;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        j_reg_450 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_0 <= 9'd256;
    end else if (((select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_0 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_0_load_18_reg_338 <= reg_576;
    end else if ((((icmp_ln44_fu_792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45)) | (~(select_ln45_fu_801_p3 == 2'd1) & ~(select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)) | ((select_ln45_fu_801_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)))) begin
        knn_set6_0_load_18_reg_338 <= knn_set6_0_load_reg_1336;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_0_load_1_reg_285 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_0_load_1_reg_285 <= knn_set6_0_load_18_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_1 <= 9'd256;
    end else if (((select_ln45_fu_801_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_1 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln45_fu_801_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_1_load_111_reg_323 <= reg_576;
    end else if ((((icmp_ln44_fu_792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45)) | (~(select_ln45_fu_801_p3 == 2'd1) & ~(select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)) | ((select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)))) begin
        knn_set6_1_load_111_reg_323 <= knn_set6_1_load_reg_1344;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_1_load_1_reg_273 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_1_load_1_reg_273 <= knn_set6_1_load_111_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_2 <= 9'd256;
    end else if ((~(select_ln45_fu_801_p3 == 2'd1) & ~(select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_2 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln44_fu_792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45)) | ((select_ln45_fu_801_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)) | ((select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45)))) begin
        knn_set6_2_load_114_reg_308 <= knn_set6_2;
    end else if ((~(select_ln45_fu_801_p3 == 2'd1) & ~(select_ln45_fu_801_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        knn_set6_2_load_114_reg_308 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_2_load_1_reg_261 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_2_load_1_reg_261 <= knn_set6_2_load_114_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_3 <= 9'd256;
    end else if (((select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        knn_set6_3 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_3_load_reg_249 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_3_load_reg_249 <= ap_phi_mux_knn_set6_3_load17_phi_fu_387_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_4 <= 9'd256;
    end else if (((select_ln45_2_fu_886_p3 == 3'd4) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        knn_set6_4 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_4_load_1_reg_237 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_4_load_1_reg_237 <= ap_phi_mux_knn_set6_4_load_120_phi_fu_372_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set6_5 <= 9'd256;
    end else if ((~(select_ln45_2_fu_886_p3 == 3'd4) & ~(select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        knn_set6_5 <= reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set6_5_load_1_reg_225 <= 9'd256;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        knn_set6_5_load_1_reg_225 <= ap_phi_mux_knn_set6_5_load_123_phi_fu_357_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        min_distance_list_1_1_16_reg_440 <= select_ln393_6_fu_1244_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        min_distance_list_1_1_16_reg_440 <= reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        min_distance_list_1_1_reg_430 <= select_ln388_3_fu_1220_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        min_distance_list_1_1_reg_430 <= reg_539;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        min_distance_list_2_1_17_reg_516 <= select_ln388_5_fu_1236_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        min_distance_list_2_1_17_reg_516 <= reg_539;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        min_distance_list_2_1_reg_420 <= select_ln388_fu_1162_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        min_distance_list_2_1_reg_420 <= reg_532;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_0119_reg_472 <= select_ln388_2_fu_1178_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_0119_reg_472 <= reg_532;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_0121_reg_483 <= select_ln393_7_fu_1251_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_0121_reg_483 <= reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_0122_reg_461 <= select_ln388_1_fu_1170_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_0122_reg_461 <= reg_553;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_0123_reg_505 <= select_ln388_4_fu_1228_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_0123_reg_505 <= reg_559;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_0_reg_494 <= select_ln393_8_fu_1258_p3;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_0_reg_494 <= reg_565;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        add_ln369_reg_1431 <= add_ln369_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln439_reg_1275 <= add_ln439_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        add_ln548_reg_1308 <= add_ln548_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_1293 <= i_2_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        icmp_ln36_2_reg_1389 <= icmp_ln36_2_fu_835_p2;
        knn_set6_3_load_1_reg_1373 <= knn_set6_3;
        knn_set6_4_load_reg_1381 <= knn_set6_4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        icmp_ln36_reg_1352 <= icmp_ln36_fu_763_p2;
        knn_set6_0_load_reg_1336 <= knn_set6_0;
        knn_set6_1_load_reg_1344 <= knn_set6_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln439_fu_600_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln414_reg_1284 <= icmp_ln414_fu_606_p2;
        select_ln414_reg_1288 <= select_ln414_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln439_reg_1280 <= icmp_ln439_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln453_reg_1298 <= icmp_ln453_fu_659_p2;
        icmp_ln453_reg_1298_pp1_iter1_reg <= icmp_ln453_reg_1298;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (index6_load_reg_1271 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        index6 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        index6_load_reg_1271 <= index6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        min_distance_list_0_reg_1454 <= min_distance_list_0_fu_1038_p8;
        select_ln379_reg_1465[0] <= select_ln379_fu_1083_p3[0];
select_ln379_reg_1465[3] <= select_ln379_fu_1083_p3[3];
select_ln379_reg_1465[5] <= select_ln379_fu_1083_p3[5];
        tmp_reg_1470 <= {{select_ln379_fu_1083_p3[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        p_Result_18_reg_1302 <= p_Result_18_fu_707_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        p_cast2_reg_1406[8 : 0] <= p_cast2_fu_916_p1[8 : 0];
        p_cast3_reg_1411[8 : 0] <= p_cast3_fu_920_p1[8 : 0];
        p_cast4_reg_1416[8 : 0] <= p_cast4_fu_924_p1[8 : 0];
        p_cast5_reg_1421[8 : 0] <= p_cast5_fu_928_p1[8 : 0];
        p_cast6_reg_1426[8 : 0] <= p_cast6_fu_932_p1[8 : 0];
        p_cast_reg_1401[8 : 0] <= p_cast_fu_912_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln369_fu_964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        p_t_reg_1449 <= p_t_fu_1032_p2;
        select_ln369_2_reg_1444 <= select_ln369_2_fu_1020_p3;
        select_ln369_reg_1439 <= select_ln369_fu_976_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state31)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_532 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_539 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_546 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_553 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_559 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_565 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_571 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44))) begin
        reg_576 <= grp_popcount_fu_527_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        xor_ln1350_1_reg_1331 <= xor_ln1350_1_fu_750_p2;
        xor_ln1350_reg_1326 <= xor_ln1350_fu_745_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_blk_n = Input_1_empty_n;
    end else begin
        Input_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state31)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state30)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_read = 1'b1;
    end else begin
        Input_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0_reg_494;
    end else if (((1'b1 == ap_CS_fsm_state61) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0123_reg_505;
    end else if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0122_reg_461;
    end else if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0121_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = min_distance_list_2_1_17_reg_516;
    end else if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0119_reg_472;
    end else if ((((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice)))) begin
        Output_1_V_TDATA_int_regslice = 32'd0;
    end else if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_01001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)))) begin
        Output_1_V_TDATA_int_regslice = Input_1_dout;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state62) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state61) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln453_reg_1298 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln439_fu_600_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln453_fu_659_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state63))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln453_reg_1298 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_218_p4 = i_2_reg_1293;
    end else begin
        ap_phi_mux_i_1_phi_fu_218_p4 = i_1_reg_214;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln439_reg_1280 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_207_p4 = add_ln439_reg_1275;
    end else begin
        ap_phi_mux_i_phi_fu_207_p4 = i_reg_203;
    end
end

always @ (*) begin
    if (((select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_knn_set6_3_load17_phi_fu_387_p8 = reg_576;
    end else if ((((icmp_ln44_1_fu_867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)) | (~(select_ln45_2_fu_886_p3 == 3'd4) & ~(select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((select_ln45_2_fu_886_p3 == 3'd4) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)))) begin
        ap_phi_mux_knn_set6_3_load17_phi_fu_387_p8 = knn_set6_3_load_1_reg_1373;
    end else begin
        ap_phi_mux_knn_set6_3_load17_phi_fu_387_p8 = 'bx;
    end
end

always @ (*) begin
    if (((select_ln45_2_fu_886_p3 == 3'd4) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_knn_set6_4_load_120_phi_fu_372_p8 = reg_576;
    end else if ((((icmp_ln44_1_fu_867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)) | (~(select_ln45_2_fu_886_p3 == 3'd4) & ~(select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)))) begin
        ap_phi_mux_knn_set6_4_load_120_phi_fu_372_p8 = knn_set6_4_load_reg_1381;
    end else begin
        ap_phi_mux_knn_set6_4_load_120_phi_fu_372_p8 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln44_1_fu_867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)) | ((select_ln45_2_fu_886_p3 == 3'd4) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)))) begin
        ap_phi_mux_knn_set6_5_load_123_phi_fu_357_p8 = knn_set6_5;
    end else if ((~(select_ln45_2_fu_886_p3 == 3'd4) & ~(select_ln45_2_fu_886_p3 == 3'd3) & (icmp_ln44_1_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_knn_set6_5_load_123_phi_fu_357_p8 = reg_576;
    end else begin
        ap_phi_mux_knn_set6_5_load_123_phi_fu_357_p8 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state63))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_popcount_fu_527_x = xor_ln1350_1_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_popcount_fu_527_x = xor_ln1350_reg_1326;
    end else begin
        grp_popcount_fu_527_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        training_set6_V_0_address0 = zext_ln548_fu_739_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        training_set6_V_0_address0 = zext_ln414_fu_626_p1;
    end else begin
        training_set6_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        training_set6_V_0_ce0 = 1'b1;
    end else begin
        training_set6_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1284 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        training_set6_V_0_we0 = 1'b1;
    end else begin
        training_set6_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        training_set6_V_1_address0 = zext_ln548_fu_739_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        training_set6_V_1_address0 = zext_ln414_fu_626_p1;
    end else begin
        training_set6_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        training_set6_V_1_ce0 = 1'b1;
    end else begin
        training_set6_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1284 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        training_set6_V_1_we0 = 1'b1;
    end else begin
        training_set6_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index6_load_load_fu_586_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index6_load_load_fu_586_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln439_fu_600_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln439_fu_600_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln453_fu_659_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln453_fu_659_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln548_fu_733_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((icmp_ln369_fu_964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln369_1_fu_984_p2 = (i_4_reg_409 + 2'd1);

assign add_ln369_fu_936_p2 = (indvar_flatten_reg_398 + 3'd1);

assign add_ln371_fu_1266_p2 = (select_ln369_reg_1439 + 2'd1);

assign add_ln414_fu_612_p2 = (trunc_ln439_fu_596_p1 + 9'd62);

assign add_ln439_fu_590_p2 = (ap_phi_mux_i_phi_fu_207_p4 + 10'd1);

assign add_ln548_fu_727_p2 = (i_3_reg_297 + 9'd1);

assign and_ln379_1_fu_1111_p2 = (icmp_ln380_fu_1106_p2 & icmp_ln378_2_fu_1101_p2);

assign and_ln379_fu_1067_p2 = (xor_ln380_fu_1061_p2 & icmp_ln378_1_fu_1055_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd59];

assign ap_NS_fsm_state40 = ap_NS_fsm[32'd36];

assign ap_NS_fsm_state45 = ap_NS_fsm[32'd41];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (1'b0 == Input_1_empty_n);
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp1_stage1_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp1_stage2_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp1_stage3_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp1_stage4_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp1_stage5_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp1_stage6_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp1_stage7_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state20_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (((1'b0 == Input_1_empty_n) & (icmp_ln453_reg_1298 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln453_reg_1298 == 1'd0)));
end

always @ (*) begin
    ap_block_state21_io = ((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state21_pp1_stage1_iter1 = ((icmp_ln453_reg_1298_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state28 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state29 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state63 = ((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln439_reg_1280 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_18_fu_946_p1 = i_4_reg_409[0:0];

assign empty_19_fu_958_p2 = (p_shl_fu_950_p3 - zext_ln369_fu_942_p1);

assign empty_21_fu_994_p1 = add_ln369_1_fu_984_p2[0:0];

assign grp_popcount_fu_527_ap_start = grp_popcount_fu_527_ap_start_reg;

assign i_2_fu_653_p2 = (ap_phi_mux_i_1_phi_fu_218_p4 + 12'd1);

assign icmp_ln369_fu_964_p2 = ((indvar_flatten_reg_398 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_778_p2 = ((knn_set6_2 > select_ln36_fu_769_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_835_p2 = ((knn_set6_4 > knn_set6_3) ? 1'b1 : 1'b0);

assign icmp_ln36_3_fu_853_p2 = ((knn_set6_5 > select_ln36_2_fu_841_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_763_p2 = ((knn_set6_1 > knn_set6_0) ? 1'b1 : 1'b0);

assign icmp_ln371_fu_970_p2 = ((j_reg_450 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln378_1_fu_1055_p2 = (($signed(min_distance_list_0_fu_1038_p8) < $signed(min_distance_list_1_1_reg_430)) ? 1'b1 : 1'b0);

assign icmp_ln378_2_fu_1101_p2 = (($signed(min_distance_list_0_reg_1454) < $signed(min_distance_list_2_1_reg_420)) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1049_p2 = (($signed(min_distance_list_0_fu_1038_p8) < $signed(min_distance_list_1_1_16_reg_440)) ? 1'b1 : 1'b0);

assign icmp_ln380_fu_1106_p2 = ((tmp_reg_1470 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln388_1_fu_1186_p2 = ((select_ln379_1_fu_1117_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_1134_p2 = ((tmp_1_fu_1124_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln393_fu_1192_p2 = ((select_ln379_1_fu_1117_p3 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_606_p2 = ((ap_phi_mux_i_phi_fu_207_p4 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln439_fu_600_p2 = ((ap_phi_mux_i_phi_fu_207_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_867_p2 = ((reg_576 < select_ln36_3_fu_859_p3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_792_p2 = ((reg_576 < select_ln36_1_fu_784_p3) ? 1'b1 : 1'b0);

assign icmp_ln453_fu_659_p2 = ((ap_phi_mux_i_1_phi_fu_218_p4 == 12'd3600) ? 1'b1 : 1'b0);

assign icmp_ln548_fu_733_p2 = ((i_3_reg_297 == 9'd450) ? 1'b1 : 1'b0);

assign index6_load_load_fu_586_p1 = index6;

assign j_cast_fu_1028_p1 = select_ln369_fu_976_p3;

assign or_ln379_fu_1077_p2 = (icmp_ln378_fu_1049_p2 | and_ln379_fu_1067_p2);

assign or_ln45_fu_881_p2 = (icmp_ln36_3_fu_853_p2 | icmp_ln36_2_reg_1389);

assign p_Result_18_fu_707_p9 = {{{{{{{{reg_532}, {reg_539}}, {reg_546}}, {reg_553}}, {reg_559}}, {reg_565}}, {reg_571}}, {Input_1_dout}};

assign p_Result_s_fu_631_p9 = {{{{{{{{reg_532}, {reg_539}}, {reg_546}}, {reg_553}}, {reg_559}}, {reg_565}}, {reg_571}}, {Input_1_dout}};

assign p_cast2_fu_916_p1 = knn_set6_1_load_1_reg_273;

assign p_cast3_fu_920_p1 = knn_set6_2_load_1_reg_261;

assign p_cast4_fu_924_p1 = knn_set6_3_load_reg_249;

assign p_cast5_fu_928_p1 = knn_set6_4_load_1_reg_237;

assign p_cast6_fu_932_p1 = knn_set6_5_load_1_reg_225;

assign p_cast_fu_912_p1 = knn_set6_0_load_1_reg_285;

assign p_mid1_fu_1006_p2 = (p_shl13_mid1_fu_998_p3 - zext_ln369_1_fu_990_p1);

assign p_shl13_mid1_fu_998_p3 = {{empty_21_fu_994_p1}, {2'd0}};

assign p_shl_fu_950_p3 = {{empty_18_fu_946_p1}, {2'd0}};

assign p_t_fu_1032_p2 = (select_ln369_1_fu_1012_p3 + j_cast_fu_1028_p1);

assign select_ln369_1_fu_1012_p3 = ((icmp_ln371_fu_970_p2[0:0] == 1'b1) ? p_mid1_fu_1006_p2 : empty_19_fu_958_p2);

assign select_ln369_2_fu_1020_p3 = ((icmp_ln371_fu_970_p2[0:0] == 1'b1) ? add_ln369_1_fu_984_p2 : i_4_reg_409);

assign select_ln369_fu_976_p3 = ((icmp_ln371_fu_970_p2[0:0] == 1'b1) ? 2'd0 : j_reg_450);

assign select_ln36_1_fu_784_p3 = ((icmp_ln36_1_fu_778_p2[0:0] == 1'b1) ? knn_set6_2 : select_ln36_fu_769_p3);

assign select_ln36_2_fu_841_p3 = ((icmp_ln36_2_reg_1389[0:0] == 1'b1) ? knn_set6_4_load_reg_1381 : knn_set6_3_load_1_reg_1373);

assign select_ln36_3_fu_859_p3 = ((icmp_ln36_3_fu_853_p2[0:0] == 1'b1) ? knn_set6_5 : select_ln36_2_fu_841_p3);

assign select_ln36_fu_769_p3 = ((icmp_ln36_reg_1352[0:0] == 1'b1) ? knn_set6_1_load_reg_1344 : knn_set6_0_load_reg_1336);

assign select_ln379_1_fu_1117_p3 = ((and_ln379_1_fu_1111_p2[0:0] == 1'b1) ? 6'd2 : select_ln379_reg_1465);

assign select_ln379_fu_1083_p3 = ((or_ln379_fu_1077_p2[0:0] == 1'b1) ? zext_ln379_fu_1073_p1 : 6'd40);

assign select_ln388_1_fu_1170_p3 = ((icmp_ln388_fu_1134_p2[0:0] == 1'b1) ? p_0123_reg_505 : select_ln393_1_fu_1147_p3);

assign select_ln388_2_fu_1178_p3 = ((icmp_ln388_fu_1134_p2[0:0] == 1'b1) ? min_distance_list_2_1_17_reg_516 : select_ln393_2_fu_1155_p3);

assign select_ln388_3_fu_1220_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? min_distance_list_1_1_16_reg_440 : select_ln393_3_fu_1198_p3);

assign select_ln388_4_fu_1228_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? p_0_reg_494 : select_ln393_4_fu_1205_p3);

assign select_ln388_5_fu_1236_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? min_distance_list_1_1_16_reg_440 : select_ln393_5_fu_1213_p3);

assign select_ln388_fu_1162_p3 = ((icmp_ln388_fu_1134_p2[0:0] == 1'b1) ? min_distance_list_2_1_17_reg_516 : select_ln393_fu_1140_p3);

assign select_ln393_1_fu_1147_p3 = ((and_ln379_1_fu_1111_p2[0:0] == 1'b1) ? 32'd5 : p_0122_reg_461);

assign select_ln393_2_fu_1155_p3 = ((and_ln379_1_fu_1111_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : p_0119_reg_472);

assign select_ln393_3_fu_1198_p3 = ((icmp_ln393_fu_1192_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : min_distance_list_1_1_reg_430);

assign select_ln393_4_fu_1205_p3 = ((icmp_ln393_fu_1192_p2[0:0] == 1'b1) ? 32'd5 : p_0123_reg_505);

assign select_ln393_5_fu_1213_p3 = ((icmp_ln393_fu_1192_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : min_distance_list_2_1_17_reg_516);

assign select_ln393_6_fu_1244_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : min_distance_list_1_1_16_reg_440);

assign select_ln393_7_fu_1251_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : p_0121_reg_483);

assign select_ln393_8_fu_1258_p3 = ((icmp_ln388_1_fu_1186_p2[0:0] == 1'b1) ? 32'd5 : p_0_reg_494);

assign select_ln393_fu_1140_p3 = ((and_ln379_1_fu_1111_p2[0:0] == 1'b1) ? min_distance_list_0_reg_1454 : min_distance_list_2_1_reg_420);

assign select_ln414_fu_618_p3 = ((icmp_ln414_fu_606_p2[0:0] == 1'b1) ? trunc_ln439_fu_596_p1 : add_ln414_fu_612_p2);

assign select_ln45_1_fu_873_p3 = ((icmp_ln36_3_fu_853_p2[0:0] == 1'b1) ? 3'd5 : 3'd4);

assign select_ln45_2_fu_886_p3 = ((or_ln45_fu_881_p2[0:0] == 1'b1) ? select_ln45_1_fu_873_p3 : 3'd3);

assign select_ln45_fu_801_p3 = ((icmp_ln36_1_fu_778_p2[0:0] == 1'b1) ? 2'd2 : zext_ln45_fu_798_p1);

assign tmp_1_fu_1124_p4 = {{select_ln379_1_fu_1117_p3[5:1]}};

assign trunc_ln439_fu_596_p1 = ap_phi_mux_i_phi_fu_207_p4[8:0];

assign xor_ln1350_1_fu_750_p2 = (training_set6_V_1_q0 ^ p_Result_18_reg_1302);

assign xor_ln1350_fu_745_p2 = (training_set6_V_0_q0 ^ p_Result_18_reg_1302);

assign xor_ln380_fu_1061_p2 = (icmp_ln378_fu_1049_p2 ^ 1'd1);

assign zext_ln369_1_fu_990_p1 = add_ln369_1_fu_984_p2;

assign zext_ln369_fu_942_p1 = i_4_reg_409;

assign zext_ln379_fu_1073_p1 = and_ln379_fu_1067_p2;

assign zext_ln414_fu_626_p1 = select_ln414_reg_1288;

assign zext_ln45_fu_798_p1 = icmp_ln36_reg_1352;

assign zext_ln548_fu_739_p1 = i_3_reg_297;

always @ (posedge ap_clk) begin
    p_cast_reg_1401[31:9] <= 23'b00000000000000000000000;
    p_cast2_reg_1406[31:9] <= 23'b00000000000000000000000;
    p_cast3_reg_1411[31:9] <= 23'b00000000000000000000000;
    p_cast4_reg_1416[31:9] <= 23'b00000000000000000000000;
    p_cast5_reg_1421[31:9] <= 23'b00000000000000000000000;
    p_cast6_reg_1426[31:9] <= 23'b00000000000000000000000;
    select_ln379_reg_1465[2:1] <= 2'b00;
    select_ln379_reg_1465[4] <= 1'b0;
end

endmodule //update_knn3_update_knn6_sub
