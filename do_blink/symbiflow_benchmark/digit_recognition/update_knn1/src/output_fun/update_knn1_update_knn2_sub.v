// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn1_update_knn2_sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_dout,
        Input_1_empty_n,
        Input_1_read,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_pp0_stage0 = 47'd2;
parameter    ap_ST_fsm_pp0_stage1 = 47'd4;
parameter    ap_ST_fsm_pp0_stage2 = 47'd8;
parameter    ap_ST_fsm_pp0_stage3 = 47'd16;
parameter    ap_ST_fsm_pp0_stage4 = 47'd32;
parameter    ap_ST_fsm_pp0_stage5 = 47'd64;
parameter    ap_ST_fsm_pp0_stage6 = 47'd128;
parameter    ap_ST_fsm_pp0_stage7 = 47'd256;
parameter    ap_ST_fsm_state11 = 47'd512;
parameter    ap_ST_fsm_pp1_stage0 = 47'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 47'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 47'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 47'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 47'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 47'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 47'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 47'd131072;
parameter    ap_ST_fsm_state22 = 47'd262144;
parameter    ap_ST_fsm_state23 = 47'd524288;
parameter    ap_ST_fsm_state24 = 47'd1048576;
parameter    ap_ST_fsm_state25 = 47'd2097152;
parameter    ap_ST_fsm_state26 = 47'd4194304;
parameter    ap_ST_fsm_state27 = 47'd8388608;
parameter    ap_ST_fsm_state28 = 47'd16777216;
parameter    ap_ST_fsm_state29 = 47'd33554432;
parameter    ap_ST_fsm_state30 = 47'd67108864;
parameter    ap_ST_fsm_state31 = 47'd134217728;
parameter    ap_ST_fsm_state32 = 47'd268435456;
parameter    ap_ST_fsm_state33 = 47'd536870912;
parameter    ap_ST_fsm_state34 = 47'd1073741824;
parameter    ap_ST_fsm_state35 = 47'd2147483648;
parameter    ap_ST_fsm_state36 = 47'd4294967296;
parameter    ap_ST_fsm_state37 = 47'd8589934592;
parameter    ap_ST_fsm_pp2_stage0 = 47'd17179869184;
parameter    ap_ST_fsm_state47 = 47'd34359738368;
parameter    ap_ST_fsm_pp3_stage0 = 47'd68719476736;
parameter    ap_ST_fsm_pp3_stage1 = 47'd137438953472;
parameter    ap_ST_fsm_state51 = 47'd274877906944;
parameter    ap_ST_fsm_state52 = 47'd549755813888;
parameter    ap_ST_fsm_state53 = 47'd1099511627776;
parameter    ap_ST_fsm_state54 = 47'd2199023255552;
parameter    ap_ST_fsm_state55 = 47'd4398046511104;
parameter    ap_ST_fsm_state56 = 47'd8796093022208;
parameter    ap_ST_fsm_state57 = 47'd17592186044416;
parameter    ap_ST_fsm_state58 = 47'd35184372088832;
parameter    ap_ST_fsm_state59 = 47'd70368744177664;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_dout;
input   Input_1_empty_n;
output   Input_1_read;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] index2;
reg   [8:0] knn_set2_0;
reg   [8:0] knn_set2_1;
reg   [8:0] knn_set2_2;
reg   [8:0] knn_set2_3;
reg   [8:0] knn_set2_4;
reg   [8:0] knn_set2_5;
reg   [8:0] training_set2_V_0_address0;
reg    training_set2_V_0_ce0;
reg    training_set2_V_0_we0;
wire   [255:0] training_set2_V_0_q0;
reg   [8:0] training_set2_V_1_address0;
reg    training_set2_V_1_ce0;
reg    training_set2_V_1_we0;
wire   [255:0] training_set2_V_1_q0;
reg    Input_1_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln437_reg_1191;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln452_reg_1209;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg    Output_1_V_TDATA_blk_n;
reg   [0:0] icmp_ln452_reg_1209_pp1_iter1_reg;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg   [9:0] i_reg_201;
reg   [12:0] i_1_reg_212;
reg   [8:0] knn_set2_5_load_1_reg_223;
reg   [8:0] knn_set2_4_load_1_reg_235;
reg   [8:0] knn_set2_3_load_reg_247;
reg   [8:0] knn_set2_2_load_1_reg_259;
reg   [8:0] knn_set2_1_load_1_reg_271;
reg   [8:0] knn_set2_0_load_1_reg_283;
reg   [8:0] i_3_reg_295;
reg   [2:0] indvar_flatten_reg_396;
reg   [1:0] i_4_reg_407;
reg   [1:0] j_reg_419;
reg   [31:0] p_0124_reg_430;
reg   [31:0] p_0_reg_441;
reg   [31:0] p_0125_reg_452;
reg   [31:0] p_0121_reg_463;
reg   [31:0] p_0122_reg_474;
reg   [31:0] p_0123_reg_485;
reg   [31:0] reg_506;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state13_pp1_stage1_iter0;
reg    ap_block_state13_io;
reg    ap_block_state21_pp1_stage1_iter1;
reg    ap_block_state21_io;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state14_pp1_stage2_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state15_pp1_stage3_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state16_pp1_stage4_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state17_pp1_stage5_iter0;
reg    ap_block_state17_io;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state18_pp1_stage6_iter0;
reg    ap_block_state18_io;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state19_pp1_stage7_iter0;
reg    ap_block_state19_io;
reg    ap_block_pp1_stage7_11001;
wire    ap_block_state12_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
reg    ap_block_state20_io;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state22;
reg   [31:0] reg_512;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] reg_517;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] reg_522;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] reg_527;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] reg_532;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [31:0] reg_537;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [0:0] index2_load_load_fu_542_p1;
reg   [0:0] index2_load_reg_1182;
wire   [9:0] add_ln437_fu_546_p2;
reg   [9:0] add_ln437_reg_1186;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln437_fu_556_p2;
wire   [0:0] icmp_ln414_fu_562_p2;
reg   [0:0] icmp_ln414_reg_1195;
wire   [8:0] select_ln414_fu_574_p3;
reg   [8:0] select_ln414_reg_1199;
wire   [12:0] i_2_fu_609_p2;
reg   [12:0] i_2_reg_1204;
wire   [0:0] icmp_ln452_fu_615_p2;
reg   [31:0] tmp_V_60_reg_1213;
reg   [31:0] tmp_V_40_reg_1219;
reg   [31:0] tmp_V_41_reg_1224;
reg   [31:0] tmp_V_42_reg_1229;
reg   [31:0] tmp_V_43_reg_1234;
reg   [31:0] tmp_V_44_reg_1239;
wire   [255:0] p_Result_18_fu_663_p9;
reg   [255:0] p_Result_18_reg_1244;
wire   [8:0] add_ln539_fu_682_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state38_pp2_stage0_iter0;
wire    ap_block_state39_pp2_stage0_iter1;
wire    ap_block_state40_pp2_stage0_iter2;
wire    ap_block_state41_pp2_stage0_iter3;
wire    ap_block_state42_pp2_stage0_iter4;
wire    ap_block_state43_pp2_stage0_iter5;
wire    ap_block_state44_pp2_stage0_iter6;
wire    ap_block_state45_pp2_stage0_iter7;
wire    ap_block_state46_pp2_stage0_iter8;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln539_fu_688_p2;
reg   [0:0] icmp_ln539_reg_1255;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter1_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter2_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter3_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter4_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter5_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter6_reg;
reg   [0:0] icmp_ln539_reg_1255_pp2_iter7_reg;
wire   [255:0] ret_fu_700_p2;
reg   [255:0] ret_reg_1269;
wire   [255:0] ret_1_fu_705_p2;
reg   [255:0] ret_1_reg_1274;
wire   [8:0] grp_popcount_fu_496_ap_return;
reg   [8:0] dist_reg_1279;
reg   [8:0] knn_set2_0_load_reg_1290;
reg   [8:0] knn_set2_1_load_reg_1298;
wire   [0:0] icmp_ln36_fu_718_p2;
reg   [0:0] icmp_ln36_reg_1306;
wire   [8:0] grp_popcount_fu_501_ap_return;
reg   [8:0] dist_1_reg_1312;
reg   [8:0] knn_set2_3_load_1_reg_1323;
reg   [8:0] knn_set2_4_load_reg_1331;
wire   [0:0] icmp_ln36_2_fu_732_p2;
reg   [0:0] icmp_ln36_2_reg_1339;
wire   [31:0] zext_ln376_fu_862_p1;
reg   [31:0] zext_ln376_reg_1357;
wire    ap_CS_fsm_state47;
wire   [31:0] zext_ln376_1_fu_866_p1;
reg   [31:0] zext_ln376_1_reg_1362;
wire   [31:0] zext_ln376_2_fu_870_p1;
reg   [31:0] zext_ln376_2_reg_1367;
wire   [31:0] zext_ln376_3_fu_874_p1;
reg   [31:0] zext_ln376_3_reg_1372;
wire   [31:0] zext_ln376_4_fu_878_p1;
reg   [31:0] zext_ln376_4_reg_1377;
wire   [31:0] zext_ln376_5_fu_882_p1;
reg   [31:0] zext_ln376_5_reg_1382;
wire   [2:0] add_ln366_fu_886_p2;
reg   [2:0] add_ln366_reg_1387;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state48_pp3_stage0_iter0;
wire    ap_block_state50_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln366_fu_914_p2;
reg   [0:0] icmp_ln366_reg_1392;
wire   [0:0] icmp_ln368_fu_920_p2;
reg   [0:0] icmp_ln368_reg_1396;
wire   [1:0] select_ln366_fu_926_p3;
reg   [1:0] select_ln366_reg_1401;
wire   [1:0] add_ln366_1_fu_934_p2;
reg   [1:0] add_ln366_1_reg_1406;
wire   [2:0] p_t_fu_974_p2;
reg   [2:0] p_t_reg_1411;
wire   [1:0] select_ln366_2_fu_980_p3;
reg   [1:0] select_ln366_2_reg_1416;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state49_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
wire   [31:0] tmp_fu_986_p8;
reg   [31:0] tmp_reg_1421;
wire   [5:0] pos_fu_1031_p3;
reg   [5:0] pos_reg_1428;
wire   [0:0] icmp_ln376_2_fu_1039_p2;
reg   [0:0] icmp_ln376_2_reg_1433;
reg   [3:0] tmp_17_reg_1438;
wire   [1:0] add_ln368_fu_1055_p2;
reg   [1:0] add_ln368_reg_1443;
wire   [31:0] select_ln386_fu_1108_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] select_ln386_1_fu_1116_p3;
wire   [31:0] select_ln386_2_fu_1151_p3;
wire   [31:0] select_ln386_3_fu_1159_p3;
wire   [31:0] select_ln391_4_fu_1167_p3;
wire   [31:0] select_ln391_5_fu_1175_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
wire    ap_CS_fsm_state11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state38;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state48;
wire    ap_block_pp3_stage1_subdone;
reg   [9:0] ap_phi_mux_i_phi_fu_205_p4;
reg   [12:0] ap_phi_mux_i_1_phi_fu_216_p4;
reg   [8:0] ap_phi_mux_knn_set2_5_load_124_phi_fu_355_p8;
reg   [8:0] ap_phi_mux_knn_set2_4_load_121_phi_fu_370_p8;
reg   [8:0] ap_phi_mux_knn_set2_3_load18_phi_fu_385_p8;
reg   [8:0] ap_phi_mux_knn_set2_2_load_115_phi_fu_310_p8;
reg   [8:0] ap_phi_mux_knn_set2_1_load_112_phi_fu_325_p8;
reg   [8:0] ap_phi_mux_knn_set2_0_load_19_phi_fu_340_p8;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_2_load_115_reg_306;
wire   [0:0] icmp_ln44_fu_764_p2;
wire   [1:0] select_ln45_fu_772_p3;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_1_load_112_reg_321;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_0_load_19_reg_336;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_5_load_124_reg_351;
wire   [0:0] icmp_ln44_1_fu_821_p2;
wire   [2:0] select_ln45_2_fu_839_p3;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_4_load_121_reg_366;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set2_3_load18_reg_381;
reg   [2:0] ap_phi_mux_indvar_flatten_phi_fu_400_p4;
wire    ap_block_pp3_stage0;
reg   [1:0] ap_phi_mux_i_4_phi_fu_411_p4;
reg   [1:0] ap_phi_mux_j_phi_fu_423_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln414_fu_582_p1;
wire   [63:0] zext_ln539_fu_694_p1;
reg   [8:0] ap_sig_allocacmp_knn_set2_0_load;
reg   [8:0] ap_sig_allocacmp_knn_set2_1_load;
reg   [8:0] ap_sig_allocacmp_knn_set2_3_load_1;
reg   [8:0] ap_sig_allocacmp_knn_set2_4_load;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_state28;
reg    ap_block_state29;
reg    ap_block_state30;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [255:0] p_Result_s_fu_587_p9;
wire   [8:0] trunc_ln437_fu_552_p1;
wire   [8:0] add_ln414_fu_568_p2;
wire   [8:0] select_ln36_fu_738_p3;
wire   [0:0] icmp_ln36_1_fu_750_p2;
wire   [8:0] select_ln36_1_fu_756_p3;
wire   [1:0] zext_ln45_fu_769_p1;
wire   [8:0] select_ln36_2_fu_795_p3;
wire   [0:0] icmp_ln36_3_fu_807_p2;
wire   [8:0] select_ln36_3_fu_813_p3;
wire   [0:0] or_ln45_fu_834_p2;
wire   [2:0] select_ln45_1_fu_826_p3;
wire   [0:0] empty_16_fu_896_p1;
wire   [2:0] p_shl_fu_900_p3;
wire   [2:0] zext_ln366_fu_892_p1;
wire   [0:0] empty_19_fu_944_p1;
wire   [2:0] p_shl_mid1_fu_948_p3;
wire   [2:0] zext_ln366_1_fu_940_p1;
wire   [2:0] p_mid1_fu_956_p2;
wire   [2:0] empty_17_fu_908_p2;
wire   [2:0] select_ln366_1_fu_962_p3;
wire   [2:0] j_cast_fu_970_p1;
wire    ap_block_pp3_stage1;
wire   [0:0] icmp_ln376_fu_997_p2;
wire   [0:0] icmp_ln376_1_fu_1003_p2;
wire   [0:0] xor_ln378_fu_1009_p2;
wire   [0:0] and_ln377_fu_1015_p2;
wire   [0:0] or_ln377_fu_1025_p2;
wire   [5:0] zext_ln377_fu_1021_p1;
wire   [0:0] icmp_ln378_fu_1060_p2;
wire   [0:0] and_ln377_1_fu_1065_p2;
wire   [5:0] pos_1_fu_1070_p3;
wire   [4:0] tmp_18_fu_1077_p4;
wire   [0:0] icmp_ln386_fu_1087_p2;
wire   [31:0] select_ln391_fu_1093_p3;
wire   [31:0] select_ln391_1_fu_1101_p3;
wire   [0:0] icmp_ln391_fu_1130_p2;
wire   [0:0] icmp_ln386_1_fu_1124_p2;
wire   [31:0] select_ln391_2_fu_1136_p3;
wire   [31:0] select_ln391_3_fu_1144_p3;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg    ap_block_state59;
reg   [46:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 47'd1;
#0 index2 = 1'd0;
#0 knn_set2_0 = 9'd0;
#0 knn_set2_1 = 9'd0;
#0 knn_set2_2 = 9'd0;
#0 knn_set2_3 = 9'd0;
#0 knn_set2_4 = 9'd0;
#0 knn_set2_5 = 9'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
end

update_knn1_update_knn1_sub_training_set1_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set2_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set2_V_0_address0),
    .ce0(training_set2_V_0_ce0),
    .we0(training_set2_V_0_we0),
    .d0(p_Result_s_fu_587_p9),
    .q0(training_set2_V_0_q0)
);

update_knn1_update_knn1_sub_training_set1_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set2_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set2_V_1_address0),
    .ce0(training_set2_V_1_ce0),
    .we0(training_set2_V_1_we0),
    .d0(p_Result_s_fu_587_p9),
    .q0(training_set2_V_1_q0)
);

update_knn1_popcount grp_popcount_fu_496(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(ret_reg_1269),
    .ap_return(grp_popcount_fu_496_ap_return)
);

update_knn1_popcount grp_popcount_fu_501(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(ret_1_reg_1274),
    .ap_return(grp_popcount_fu_501_ap_return)
);

update_knn1_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U8(
    .din0(zext_ln376_reg_1357),
    .din1(zext_ln376_1_reg_1362),
    .din2(zext_ln376_2_reg_1367),
    .din3(zext_ln376_3_reg_1372),
    .din4(zext_ln376_4_reg_1377),
    .din5(zext_ln376_5_reg_1382),
    .din6(p_t_reg_1411),
    .dout(tmp_fu_986_p8)
);

update_knn1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index2_load_load_fu_542_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index2_load_load_fu_542_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_subdone)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state38)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_212 <= 13'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_212 <= i_2_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln539_fu_688_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_3_reg_295 <= add_ln539_fu_682_p2;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        i_3_reg_295 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_4_reg_407 <= select_ln366_2_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i_4_reg_407 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index2_load_load_fu_542_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_201 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_201 <= add_ln437_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar_flatten_reg_396 <= add_ln366_reg_1387;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        indvar_flatten_reg_396 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j_reg_419 <= add_ln368_reg_1443;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        j_reg_419 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_0 <= 9'd256;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (select_ln45_fu_772_p3 == 2'd0) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        knn_set2_0 <= dist_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_0_load_1_reg_283 <= ap_phi_mux_knn_set2_0_load_19_phi_fu_340_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_0_load_1_reg_283 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_1 <= 9'd256;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (select_ln45_fu_772_p3 == 2'd1) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        knn_set2_1 <= dist_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_1_load_1_reg_271 <= ap_phi_mux_knn_set2_1_load_112_phi_fu_325_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_1_load_1_reg_271 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_2 <= 9'd256;
    end else if ((~(select_ln45_fu_772_p3 == 2'd1) & ~(select_ln45_fu_772_p3 == 2'd0) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        knn_set2_2 <= dist_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_2_load_1_reg_259 <= ap_phi_mux_knn_set2_2_load_115_phi_fu_310_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_2_load_1_reg_259 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_3 <= 9'd256;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        knn_set2_3 <= dist_1_reg_1312;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_3_load_reg_247 <= ap_phi_mux_knn_set2_3_load18_phi_fu_385_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_3_load_reg_247 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_4 <= 9'd256;
    end else if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (select_ln45_2_fu_839_p3 == 3'd4) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        knn_set2_4 <= dist_1_reg_1312;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_4_load_1_reg_235 <= ap_phi_mux_knn_set2_4_load_121_phi_fu_370_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_4_load_1_reg_235 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
        knn_set2_5 <= 9'd256;
    end else if ((~(select_ln45_2_fu_839_p3 == 3'd4) & ~(select_ln45_2_fu_839_p3 == 3'd3) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        knn_set2_5 <= dist_1_reg_1312;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set2_5_load_1_reg_223 <= ap_phi_mux_knn_set2_5_load_124_phi_fu_355_p8;
    end else if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
        knn_set2_5_load_1_reg_223 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0121_reg_463 <= select_ln386_1_fu_1116_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0121_reg_463 <= tmp_V_40_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0122_reg_474 <= select_ln386_3_fu_1159_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0122_reg_474 <= tmp_V_41_reg_1224;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0123_reg_485 <= select_ln391_5_fu_1175_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0123_reg_485 <= tmp_V_42_reg_1229;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0124_reg_430 <= select_ln386_fu_1108_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0124_reg_430 <= tmp_V_43_reg_1234;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0125_reg_452 <= select_ln386_2_fu_1151_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0125_reg_452 <= tmp_V_44_reg_1239;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0_reg_441 <= select_ln391_4_fu_1167_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_0_reg_441 <= reg_506;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln366_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln366_1_reg_1406 <= add_ln366_1_fu_934_p2;
        icmp_ln368_reg_1396 <= icmp_ln368_fu_920_p2;
        p_t_reg_1411 <= p_t_fu_974_p2;
        select_ln366_reg_1401 <= select_ln366_fu_926_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln366_reg_1387 <= add_ln366_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln366_reg_1392 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        add_ln368_reg_1443 <= add_ln368_fu_1055_p2;
        select_ln366_2_reg_1416 <= select_ln366_2_fu_980_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln437_reg_1186 <= add_ln437_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln539_reg_1255_pp2_iter6_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dist_1_reg_1312 <= grp_popcount_fu_501_ap_return;
        dist_reg_1279 <= grp_popcount_fu_496_ap_return;
        icmp_ln36_2_reg_1339 <= icmp_ln36_2_fu_732_p2;
        icmp_ln36_reg_1306 <= icmp_ln36_fu_718_p2;
        knn_set2_0_load_reg_1290 <= ap_sig_allocacmp_knn_set2_0_load;
        knn_set2_1_load_reg_1298 <= ap_sig_allocacmp_knn_set2_1_load;
        knn_set2_3_load_1_reg_1323 <= ap_sig_allocacmp_knn_set2_3_load_1;
        knn_set2_4_load_reg_1331 <= ap_sig_allocacmp_knn_set2_4_load;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_1204 <= i_2_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln366_reg_1392 <= icmp_ln366_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln376_2_reg_1433 <= icmp_ln376_2_fu_1039_p2;
        pos_reg_1428[0] <= pos_fu_1031_p3[0];
pos_reg_1428[3] <= pos_fu_1031_p3[3];
pos_reg_1428[5] <= pos_fu_1031_p3[5];
        tmp_17_reg_1438 <= {{pos_fu_1031_p3[5:2]}};
        tmp_reg_1421 <= tmp_fu_986_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_556_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln414_reg_1195 <= icmp_ln414_fu_562_p2;
        select_ln414_reg_1199 <= select_ln414_fu_574_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln437_reg_1191 <= icmp_ln437_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln452_reg_1209 <= icmp_ln452_fu_615_p2;
        icmp_ln452_reg_1209_pp1_iter1_reg <= icmp_ln452_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln539_reg_1255 <= icmp_ln539_fu_688_p2;
        icmp_ln539_reg_1255_pp2_iter1_reg <= icmp_ln539_reg_1255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln539_reg_1255_pp2_iter2_reg <= icmp_ln539_reg_1255_pp2_iter1_reg;
        icmp_ln539_reg_1255_pp2_iter3_reg <= icmp_ln539_reg_1255_pp2_iter2_reg;
        icmp_ln539_reg_1255_pp2_iter4_reg <= icmp_ln539_reg_1255_pp2_iter3_reg;
        icmp_ln539_reg_1255_pp2_iter5_reg <= icmp_ln539_reg_1255_pp2_iter4_reg;
        icmp_ln539_reg_1255_pp2_iter6_reg <= icmp_ln539_reg_1255_pp2_iter5_reg;
        icmp_ln539_reg_1255_pp2_iter7_reg <= icmp_ln539_reg_1255_pp2_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (index2_load_reg_1182 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        index2 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        index2_load_reg_1182 <= index2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        p_Result_18_reg_1244 <= p_Result_18_fu_663_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_506 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_512 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_517 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_522 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_527 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_532 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_537 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln539_reg_1255 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ret_1_reg_1274 <= ret_1_fu_705_p2;
        ret_reg_1269 <= ret_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_V_40_reg_1219 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_V_41_reg_1224 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_V_42_reg_1229 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_V_43_reg_1234 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp_V_44_reg_1239 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_V_60_reg_1213 <= Input_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        zext_ln376_1_reg_1362[8 : 0] <= zext_ln376_1_fu_866_p1[8 : 0];
        zext_ln376_2_reg_1367[8 : 0] <= zext_ln376_2_fu_870_p1[8 : 0];
        zext_ln376_3_reg_1372[8 : 0] <= zext_ln376_3_fu_874_p1[8 : 0];
        zext_ln376_4_reg_1377[8 : 0] <= zext_ln376_4_fu_878_p1[8 : 0];
        zext_ln376_5_reg_1382[8 : 0] <= zext_ln376_5_fu_882_p1[8 : 0];
        zext_ln376_reg_1357[8 : 0] <= zext_ln376_fu_862_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_blk_n = Input_1_empty_n;
    end else begin
        Input_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state31)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state30)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_1_read = 1'b1;
    end else begin
        Input_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0_reg_441;
    end else if (((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0125_reg_452;
    end else if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0124_reg_430;
    end else if (((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0123_reg_485;
    end else if (((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0122_reg_474;
    end else if (((1'b1 == ap_CS_fsm_state52) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
        Output_1_V_TDATA_int_regslice = p_0121_reg_463;
    end else if ((((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state51) & (1'b1 == Output_1_V_TREADY_int_regslice)))) begin
        Output_1_V_TDATA_int_regslice = 32'd0;
    end else if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_01001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)))) begin
        Output_1_V_TDATA_int_regslice = Input_1_dout;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state52) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((1'b1 == ap_CS_fsm_state51) & (1'b1 == Output_1_V_TREADY_int_regslice)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln452_reg_1209 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln437_fu_556_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln452_fu_615_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln539_fu_688_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln366_fu_914_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln452_reg_1209 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_216_p4 = i_2_reg_1204;
    end else begin
        ap_phi_mux_i_1_phi_fu_216_p4 = i_1_reg_212;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_4_phi_fu_411_p4 = select_ln366_2_reg_1416;
    end else begin
        ap_phi_mux_i_4_phi_fu_411_p4 = i_4_reg_407;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln437_reg_1191 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_205_p4 = add_ln437_reg_1186;
    end else begin
        ap_phi_mux_i_phi_fu_205_p4 = i_reg_201;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_400_p4 = add_ln366_reg_1387;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_400_p4 = indvar_flatten_reg_396;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln366_reg_1392 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_j_phi_fu_423_p4 = add_ln368_reg_1443;
    end else begin
        ap_phi_mux_j_phi_fu_423_p4 = j_reg_419;
    end
end

always @ (*) begin
    if (((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd0) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_0_load_19_phi_fu_340_p8 = dist_reg_1279;
    end else if (((~(select_ln45_fu_772_p3 == 2'd1) & ~(select_ln45_fu_772_p3 == 2'd0) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd1) & (icmp_ln44_fu_764_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_0_load_19_phi_fu_340_p8 = knn_set2_0_load_reg_1290;
    end else begin
        ap_phi_mux_knn_set2_0_load_19_phi_fu_340_p8 = ap_phi_reg_pp2_iter8_knn_set2_0_load_19_reg_336;
    end
end

always @ (*) begin
    if (((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd1) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_1_load_112_phi_fu_325_p8 = dist_reg_1279;
    end else if (((~(select_ln45_fu_772_p3 == 2'd1) & ~(select_ln45_fu_772_p3 == 2'd0) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd0) & (icmp_ln44_fu_764_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_1_load_112_phi_fu_325_p8 = knn_set2_1_load_reg_1298;
    end else begin
        ap_phi_mux_knn_set2_1_load_112_phi_fu_325_p8 = ap_phi_reg_pp2_iter8_knn_set2_1_load_112_reg_321;
    end
end

always @ (*) begin
    if ((((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd1) & (icmp_ln44_fu_764_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_fu_772_p3 == 2'd0) & (icmp_ln44_fu_764_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_2_load_115_phi_fu_310_p8 = knn_set2_2;
    end else if ((~(select_ln45_fu_772_p3 == 2'd1) & ~(select_ln45_fu_772_p3 == 2'd0) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_2_load_115_phi_fu_310_p8 = dist_reg_1279;
    end else begin
        ap_phi_mux_knn_set2_2_load_115_phi_fu_310_p8 = ap_phi_reg_pp2_iter8_knn_set2_2_load_115_reg_306;
    end
end

always @ (*) begin
    if (((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_3_load18_phi_fu_385_p8 = dist_1_reg_1312;
    end else if (((~(select_ln45_2_fu_839_p3 == 3'd4) & ~(select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd4) & (icmp_ln44_1_fu_821_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_3_load18_phi_fu_385_p8 = knn_set2_3_load_1_reg_1323;
    end else begin
        ap_phi_mux_knn_set2_3_load18_phi_fu_385_p8 = ap_phi_reg_pp2_iter8_knn_set2_3_load18_reg_381;
    end
end

always @ (*) begin
    if (((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd4) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_4_load_121_phi_fu_370_p8 = dist_1_reg_1312;
    end else if (((~(select_ln45_2_fu_839_p3 == 3'd4) & ~(select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln44_1_fu_821_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_4_load_121_phi_fu_370_p8 = knn_set2_4_load_reg_1331;
    end else begin
        ap_phi_mux_knn_set2_4_load_121_phi_fu_370_p8 = ap_phi_reg_pp2_iter8_knn_set2_4_load_121_reg_366;
    end
end

always @ (*) begin
    if ((((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd0)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd4) & (icmp_ln44_1_fu_821_p2 == 1'd1)) | ((icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln44_1_fu_821_p2 == 1'd1)))) begin
        ap_phi_mux_knn_set2_5_load_124_phi_fu_355_p8 = knn_set2_5;
    end else if ((~(select_ln45_2_fu_839_p3 == 3'd4) & ~(select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        ap_phi_mux_knn_set2_5_load_124_phi_fu_355_p8 = dist_1_reg_1312;
    end else begin
        ap_phi_mux_knn_set2_5_load_124_phi_fu_355_p8 = ap_phi_reg_pp2_iter8_knn_set2_5_load_124_reg_351;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln45_fu_772_p3 == 2'd0) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        ap_sig_allocacmp_knn_set2_0_load = dist_reg_1279;
    end else begin
        ap_sig_allocacmp_knn_set2_0_load = knn_set2_0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln45_fu_772_p3 == 2'd1) & (icmp_ln44_fu_764_p2 == 1'd1))) begin
        ap_sig_allocacmp_knn_set2_1_load = dist_reg_1279;
    end else begin
        ap_sig_allocacmp_knn_set2_1_load = knn_set2_1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln45_2_fu_839_p3 == 3'd3) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        ap_sig_allocacmp_knn_set2_3_load_1 = dist_1_reg_1312;
    end else begin
        ap_sig_allocacmp_knn_set2_3_load_1 = knn_set2_3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln539_reg_1255_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln45_2_fu_839_p3 == 3'd4) & (icmp_ln44_1_fu_821_p2 == 1'd1))) begin
        ap_sig_allocacmp_knn_set2_4_load = dist_1_reg_1312;
    end else begin
        ap_sig_allocacmp_knn_set2_4_load = knn_set2_4;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        training_set2_V_0_address0 = zext_ln539_fu_694_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        training_set2_V_0_address0 = zext_ln414_fu_582_p1;
    end else begin
        training_set2_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        training_set2_V_0_ce0 = 1'b1;
    end else begin
        training_set2_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1195 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        training_set2_V_0_we0 = 1'b1;
    end else begin
        training_set2_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        training_set2_V_1_address0 = zext_ln539_fu_694_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        training_set2_V_1_address0 = zext_ln414_fu_582_p1;
    end else begin
        training_set2_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        training_set2_V_1_ce0 = 1'b1;
    end else begin
        training_set2_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1195 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        training_set2_V_1_we0 = 1'b1;
    end else begin
        training_set2_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index2_load_load_fu_542_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index2_load_load_fu_542_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln437_fu_556_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln437_fu_556_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln452_fu_615_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln452_fu_615_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == Input_1_empty_n) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln539_fu_688_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln539_fu_688_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln366_fu_914_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((icmp_ln366_fu_914_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (1'b1 == Output_1_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if ((~((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln366_1_fu_934_p2 = (ap_phi_mux_i_4_phi_fu_411_p4 + 2'd1);

assign add_ln366_fu_886_p2 = (ap_phi_mux_indvar_flatten_phi_fu_400_p4 + 3'd1);

assign add_ln368_fu_1055_p2 = (select_ln366_reg_1401 + 2'd1);

assign add_ln414_fu_568_p2 = (trunc_ln437_fu_552_p1 + 9'd62);

assign add_ln437_fu_546_p2 = (ap_phi_mux_i_phi_fu_205_p4 + 10'd1);

assign add_ln539_fu_682_p2 = (i_3_reg_295 + 9'd1);

assign and_ln377_1_fu_1065_p2 = (icmp_ln378_fu_1060_p2 & icmp_ln376_2_reg_1433);

assign and_ln377_fu_1015_p2 = (xor_ln378_fu_1009_p2 & icmp_ln376_1_fu_1003_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd46];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == Input_1_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (1'b0 == Input_1_empty_n);
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp1_stage1_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp1_stage2_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp1_stage3_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp1_stage4_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp1_stage5_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp1_stage6_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp1_stage7_iter0 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state20_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (((1'b0 == Input_1_empty_n) & (icmp_ln452_reg_1209 == 1'd0)) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln452_reg_1209 == 1'd0)));
end

always @ (*) begin
    ap_block_state21_io = ((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state21_pp1_stage1_iter1 = ((icmp_ln452_reg_1209_pp1_iter1_reg == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state28 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state29 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30 = ((1'b0 == Input_1_empty_n) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

assign ap_block_state38_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

assign ap_block_state40_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

assign ap_block_state50_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59 = ((1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = ((1'b0 == Input_1_empty_n) & (icmp_ln437_reg_1191 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_phi_reg_pp2_iter8_knn_set2_0_load_19_reg_336 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set2_1_load_112_reg_321 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set2_2_load_115_reg_306 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set2_3_load18_reg_381 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set2_4_load_121_reg_366 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set2_5_load_124_reg_351 = 'bx;

assign empty_16_fu_896_p1 = ap_phi_mux_i_4_phi_fu_411_p4[0:0];

assign empty_17_fu_908_p2 = (p_shl_fu_900_p3 - zext_ln366_fu_892_p1);

assign empty_19_fu_944_p1 = add_ln366_1_fu_934_p2[0:0];

assign i_2_fu_609_p2 = (ap_phi_mux_i_1_phi_fu_216_p4 + 13'd1);

assign icmp_ln366_fu_914_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_400_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_920_p2 = ((ap_phi_mux_j_phi_fu_423_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_750_p2 = ((knn_set2_2 > select_ln36_fu_738_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_732_p2 = ((ap_sig_allocacmp_knn_set2_4_load > ap_sig_allocacmp_knn_set2_3_load_1) ? 1'b1 : 1'b0);

assign icmp_ln36_3_fu_807_p2 = ((knn_set2_5 > select_ln36_2_fu_795_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_718_p2 = ((ap_sig_allocacmp_knn_set2_1_load > ap_sig_allocacmp_knn_set2_0_load) ? 1'b1 : 1'b0);

assign icmp_ln376_1_fu_1003_p2 = (($signed(tmp_fu_986_p8) < $signed(p_0122_reg_474)) ? 1'b1 : 1'b0);

assign icmp_ln376_2_fu_1039_p2 = (($signed(tmp_fu_986_p8) < $signed(p_0121_reg_463)) ? 1'b1 : 1'b0);

assign icmp_ln376_fu_997_p2 = (($signed(tmp_fu_986_p8) < $signed(p_0123_reg_485)) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1060_p2 = ((tmp_17_reg_1438 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln386_1_fu_1124_p2 = ((pos_1_fu_1070_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln386_fu_1087_p2 = ((tmp_18_fu_1077_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln391_fu_1130_p2 = ((pos_1_fu_1070_p3 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_562_p2 = ((ap_phi_mux_i_phi_fu_205_p4 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln437_fu_556_p2 = ((ap_phi_mux_i_phi_fu_205_p4 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_821_p2 = ((dist_1_reg_1312 < select_ln36_3_fu_813_p3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_764_p2 = ((dist_reg_1279 < select_ln36_1_fu_756_p3) ? 1'b1 : 1'b0);

assign icmp_ln452_fu_615_p2 = ((ap_phi_mux_i_1_phi_fu_216_p4 == 13'd7200) ? 1'b1 : 1'b0);

assign icmp_ln539_fu_688_p2 = ((i_3_reg_295 == 9'd450) ? 1'b1 : 1'b0);

assign index2_load_load_fu_542_p1 = index2;

assign j_cast_fu_970_p1 = select_ln366_fu_926_p3;

assign or_ln377_fu_1025_p2 = (icmp_ln376_fu_997_p2 | and_ln377_fu_1015_p2);

assign or_ln45_fu_834_p2 = (icmp_ln36_3_fu_807_p2 | icmp_ln36_2_reg_1339);

assign p_Result_18_fu_663_p9 = {{{{{{{{reg_506}, {reg_512}}, {reg_517}}, {reg_522}}, {reg_527}}, {reg_532}}, {reg_537}}, {tmp_V_60_reg_1213}};

assign p_Result_s_fu_587_p9 = {{{{{{{{reg_506}, {reg_512}}, {reg_517}}, {reg_522}}, {reg_527}}, {reg_532}}, {reg_537}}, {Input_1_dout}};

assign p_mid1_fu_956_p2 = (p_shl_mid1_fu_948_p3 - zext_ln366_1_fu_940_p1);

assign p_shl_fu_900_p3 = {{empty_16_fu_896_p1}, {2'd0}};

assign p_shl_mid1_fu_948_p3 = {{empty_19_fu_944_p1}, {2'd0}};

assign p_t_fu_974_p2 = (select_ln366_1_fu_962_p3 + j_cast_fu_970_p1);

assign pos_1_fu_1070_p3 = ((and_ln377_1_fu_1065_p2[0:0] == 1'b1) ? 6'd2 : pos_reg_1428);

assign pos_fu_1031_p3 = ((or_ln377_fu_1025_p2[0:0] == 1'b1) ? zext_ln377_fu_1021_p1 : 6'd40);

assign ret_1_fu_705_p2 = (training_set2_V_1_q0 ^ p_Result_18_reg_1244);

assign ret_fu_700_p2 = (training_set2_V_0_q0 ^ p_Result_18_reg_1244);

assign select_ln366_1_fu_962_p3 = ((icmp_ln368_fu_920_p2[0:0] == 1'b1) ? p_mid1_fu_956_p2 : empty_17_fu_908_p2);

assign select_ln366_2_fu_980_p3 = ((icmp_ln368_reg_1396[0:0] == 1'b1) ? add_ln366_1_reg_1406 : i_4_reg_407);

assign select_ln366_fu_926_p3 = ((icmp_ln368_fu_920_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_j_phi_fu_423_p4);

assign select_ln36_1_fu_756_p3 = ((icmp_ln36_1_fu_750_p2[0:0] == 1'b1) ? knn_set2_2 : select_ln36_fu_738_p3);

assign select_ln36_2_fu_795_p3 = ((icmp_ln36_2_reg_1339[0:0] == 1'b1) ? knn_set2_4_load_reg_1331 : knn_set2_3_load_1_reg_1323);

assign select_ln36_3_fu_813_p3 = ((icmp_ln36_3_fu_807_p2[0:0] == 1'b1) ? knn_set2_5 : select_ln36_2_fu_795_p3);

assign select_ln36_fu_738_p3 = ((icmp_ln36_reg_1306[0:0] == 1'b1) ? knn_set2_1_load_reg_1298 : knn_set2_0_load_reg_1290);

assign select_ln386_1_fu_1116_p3 = ((icmp_ln386_fu_1087_p2[0:0] == 1'b1) ? p_0122_reg_474 : select_ln391_1_fu_1101_p3);

assign select_ln386_2_fu_1151_p3 = ((icmp_ln386_1_fu_1124_p2[0:0] == 1'b1) ? p_0_reg_441 : select_ln391_2_fu_1136_p3);

assign select_ln386_3_fu_1159_p3 = ((icmp_ln386_1_fu_1124_p2[0:0] == 1'b1) ? p_0123_reg_485 : select_ln391_3_fu_1144_p3);

assign select_ln386_fu_1108_p3 = ((icmp_ln386_fu_1087_p2[0:0] == 1'b1) ? p_0125_reg_452 : select_ln391_fu_1093_p3);

assign select_ln391_1_fu_1101_p3 = ((and_ln377_1_fu_1065_p2[0:0] == 1'b1) ? tmp_reg_1421 : p_0121_reg_463);

assign select_ln391_2_fu_1136_p3 = ((icmp_ln391_fu_1130_p2[0:0] == 1'b1) ? 32'd1 : p_0125_reg_452);

assign select_ln391_3_fu_1144_p3 = ((icmp_ln391_fu_1130_p2[0:0] == 1'b1) ? tmp_reg_1421 : p_0122_reg_474);

assign select_ln391_4_fu_1167_p3 = ((icmp_ln386_1_fu_1124_p2[0:0] == 1'b1) ? 32'd1 : p_0_reg_441);

assign select_ln391_5_fu_1175_p3 = ((icmp_ln386_1_fu_1124_p2[0:0] == 1'b1) ? tmp_reg_1421 : p_0123_reg_485);

assign select_ln391_fu_1093_p3 = ((and_ln377_1_fu_1065_p2[0:0] == 1'b1) ? 32'd1 : p_0124_reg_430);

assign select_ln414_fu_574_p3 = ((icmp_ln414_fu_562_p2[0:0] == 1'b1) ? trunc_ln437_fu_552_p1 : add_ln414_fu_568_p2);

assign select_ln45_1_fu_826_p3 = ((icmp_ln36_3_fu_807_p2[0:0] == 1'b1) ? 3'd5 : 3'd4);

assign select_ln45_2_fu_839_p3 = ((or_ln45_fu_834_p2[0:0] == 1'b1) ? select_ln45_1_fu_826_p3 : 3'd3);

assign select_ln45_fu_772_p3 = ((icmp_ln36_1_fu_750_p2[0:0] == 1'b1) ? 2'd2 : zext_ln45_fu_769_p1);

assign tmp_18_fu_1077_p4 = {{pos_1_fu_1070_p3[5:1]}};

assign trunc_ln437_fu_552_p1 = ap_phi_mux_i_phi_fu_205_p4[8:0];

assign xor_ln378_fu_1009_p2 = (icmp_ln376_fu_997_p2 ^ 1'd1);

assign zext_ln366_1_fu_940_p1 = add_ln366_1_fu_934_p2;

assign zext_ln366_fu_892_p1 = ap_phi_mux_i_4_phi_fu_411_p4;

assign zext_ln376_1_fu_866_p1 = knn_set2_1_load_1_reg_271;

assign zext_ln376_2_fu_870_p1 = knn_set2_2_load_1_reg_259;

assign zext_ln376_3_fu_874_p1 = knn_set2_3_load_reg_247;

assign zext_ln376_4_fu_878_p1 = knn_set2_4_load_1_reg_235;

assign zext_ln376_5_fu_882_p1 = knn_set2_5_load_1_reg_223;

assign zext_ln376_fu_862_p1 = knn_set2_0_load_1_reg_283;

assign zext_ln377_fu_1021_p1 = and_ln377_fu_1015_p2;

assign zext_ln414_fu_582_p1 = select_ln414_reg_1199;

assign zext_ln45_fu_769_p1 = icmp_ln36_reg_1306;

assign zext_ln539_fu_694_p1 = i_3_reg_295;

always @ (posedge ap_clk) begin
    zext_ln376_reg_1357[31:9] <= 23'b00000000000000000000000;
    zext_ln376_1_reg_1362[31:9] <= 23'b00000000000000000000000;
    zext_ln376_2_reg_1367[31:9] <= 23'b00000000000000000000000;
    zext_ln376_3_reg_1372[31:9] <= 23'b00000000000000000000000;
    zext_ln376_4_reg_1377[31:9] <= 23'b00000000000000000000000;
    zext_ln376_5_reg_1382[31:9] <= 23'b00000000000000000000000;
    pos_reg_1428[2:1] <= 2'b00;
    pos_reg_1428[4] <= 1'b0;
end

endmodule //update_knn1_update_knn2_sub
