// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn1_update_knn1_sub (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_din,
        Output_1_full_n,
        Output_1_write
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_pp1_stage0 = 38'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 38'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 38'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 38'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 38'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 38'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 38'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 38'd131072;
parameter    ap_ST_fsm_state20 = 38'd262144;
parameter    ap_ST_fsm_state21 = 38'd524288;
parameter    ap_ST_fsm_state22 = 38'd1048576;
parameter    ap_ST_fsm_state23 = 38'd2097152;
parameter    ap_ST_fsm_state24 = 38'd4194304;
parameter    ap_ST_fsm_state25 = 38'd8388608;
parameter    ap_ST_fsm_state26 = 38'd16777216;
parameter    ap_ST_fsm_state27 = 38'd33554432;
parameter    ap_ST_fsm_pp2_stage0 = 38'd67108864;
parameter    ap_ST_fsm_state37 = 38'd134217728;
parameter    ap_ST_fsm_pp3_stage0 = 38'd268435456;
parameter    ap_ST_fsm_pp3_stage1 = 38'd536870912;
parameter    ap_ST_fsm_state41 = 38'd1073741824;
parameter    ap_ST_fsm_state42 = 38'd2147483648;
parameter    ap_ST_fsm_state43 = 38'd4294967296;
parameter    ap_ST_fsm_state44 = 38'd8589934592;
parameter    ap_ST_fsm_state45 = 38'd17179869184;
parameter    ap_ST_fsm_state46 = 38'd34359738368;
parameter    ap_ST_fsm_state47 = 38'd68719476736;
parameter    ap_ST_fsm_state48 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_din;
input   Output_1_full_n;
output   Output_1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[31:0] Output_1_din;
reg Output_1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] index1;
reg   [8:0] knn_set1_0;
reg   [8:0] knn_set1_1;
reg   [8:0] knn_set1_2;
reg   [8:0] knn_set1_3;
reg   [8:0] knn_set1_4;
reg   [8:0] knn_set1_5;
reg   [8:0] training_set1_V_0_address0;
reg    training_set1_V_0_ce0;
reg    training_set1_V_0_we0;
wire   [255:0] training_set1_V_0_q0;
reg   [8:0] training_set1_V_1_address0;
reg    training_set1_V_1_ce0;
reg    training_set1_V_1_we0;
wire   [255:0] training_set1_V_1_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln140_fu_579_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln155_fu_636_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln155_reg_1243;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg    Output_1_blk_n;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
reg   [12:0] i_5_reg_214;
reg   [8:0] knn_set1_5_load_1_reg_236;
reg   [8:0] knn_set1_4_load_1_reg_248;
reg   [8:0] knn_set1_3_load_reg_260;
reg   [8:0] knn_set1_2_load_1_reg_272;
reg   [8:0] knn_set1_1_load_1_reg_284;
reg   [8:0] knn_set1_0_load_1_reg_296;
reg   [8:0] i_7_reg_308;
reg   [2:0] indvar_flatten_reg_409;
reg   [1:0] i_8_reg_420;
reg   [1:0] j_reg_431;
reg   [31:0] p_0116_reg_442;
reg   [31:0] p_0_reg_455;
reg   [31:0] p_0117_reg_468;
reg   [31:0] p_0113_reg_481;
reg   [31:0] p_0114_reg_494;
reg   [31:0] p_0115_reg_507;
reg   [31:0] reg_530;
reg    ap_block_state2;
reg    ap_block_state11_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state12_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state13_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state14_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state15_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state16_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state17_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state18_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_state20;
reg   [31:0] reg_535;
reg   [31:0] reg_539;
reg   [31:0] reg_543;
reg   [31:0] reg_547;
reg   [31:0] reg_551;
reg   [31:0] reg_555;
wire   [0:0] icmp_ln137_fu_563_p2;
reg   [0:0] icmp_ln137_reg_1215;
wire   [9:0] add_ln140_fu_569_p2;
reg   [9:0] add_ln140_reg_1219;
wire   [8:0] trunc_ln140_fu_575_p1;
reg   [8:0] trunc_ln140_reg_1224;
wire   [0:0] icmp_ln414_fu_585_p2;
reg   [0:0] icmp_ln414_reg_1233;
wire   [12:0] i_6_fu_630_p2;
reg   [12:0] i_6_reg_1238;
wire   [255:0] p_Result_36_fu_690_p9;
reg   [255:0] p_Result_36_reg_1247;
wire   [8:0] add_ln245_fu_710_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
wire    ap_block_state31_pp2_stage0_iter3;
wire    ap_block_state32_pp2_stage0_iter4;
wire    ap_block_state33_pp2_stage0_iter5;
wire    ap_block_state34_pp2_stage0_iter6;
wire    ap_block_state35_pp2_stage0_iter7;
wire    ap_block_state36_pp2_stage0_iter8;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln245_fu_716_p2;
reg   [0:0] icmp_ln245_reg_1258;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter1_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter2_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter3_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter4_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter5_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter6_reg;
reg   [0:0] icmp_ln245_reg_1258_pp2_iter7_reg;
wire   [255:0] ret_fu_728_p2;
reg   [255:0] ret_reg_1272;
wire   [255:0] ret_2_fu_733_p2;
reg   [255:0] ret_2_reg_1277;
wire   [8:0] grp_popcount_fu_520_ap_return;
reg   [8:0] dist_reg_1282;
reg   [8:0] knn_set1_0_load_reg_1293;
reg   [8:0] knn_set1_1_load_reg_1301;
wire   [0:0] icmp_ln36_1_fu_746_p2;
reg   [0:0] icmp_ln36_1_reg_1309;
wire   [8:0] grp_popcount_fu_525_ap_return;
reg   [8:0] dist_2_reg_1315;
reg   [8:0] knn_set1_3_load_1_reg_1326;
reg   [8:0] knn_set1_4_load_reg_1334;
wire   [0:0] icmp_ln36_4_fu_760_p2;
reg   [0:0] icmp_ln36_4_reg_1342;
wire   [31:0] zext_ln80_fu_890_p1;
reg   [31:0] zext_ln80_reg_1360;
wire    ap_CS_fsm_state37;
wire   [31:0] zext_ln80_1_fu_894_p1;
reg   [31:0] zext_ln80_1_reg_1365;
wire   [31:0] zext_ln80_2_fu_898_p1;
reg   [31:0] zext_ln80_2_reg_1370;
wire   [31:0] zext_ln80_3_fu_902_p1;
reg   [31:0] zext_ln80_3_reg_1375;
wire   [31:0] zext_ln80_4_fu_906_p1;
reg   [31:0] zext_ln80_4_reg_1380;
wire   [31:0] zext_ln80_5_fu_910_p1;
reg   [31:0] zext_ln80_5_reg_1385;
wire   [2:0] add_ln70_fu_914_p2;
reg   [2:0] add_ln70_reg_1390;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state38_pp3_stage0_iter0;
wire    ap_block_state40_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln70_fu_942_p2;
reg   [0:0] icmp_ln70_reg_1395;
wire   [1:0] select_ln70_fu_954_p3;
reg   [1:0] select_ln70_reg_1399;
wire   [1:0] select_ln70_2_fu_998_p3;
reg   [1:0] select_ln70_2_reg_1404;
wire   [2:0] p_t_fu_1010_p2;
reg   [2:0] p_t_reg_1409;
wire   [31:0] tmp_fu_1016_p8;
reg   [31:0] tmp_reg_1414;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state39_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
wire   [5:0] pos_fu_1061_p3;
reg   [5:0] pos_reg_1421;
wire   [0:0] icmp_ln80_2_fu_1069_p2;
reg   [0:0] icmp_ln80_2_reg_1426;
reg   [3:0] tmp_35_reg_1431;
wire   [1:0] add_ln72_fu_1085_p2;
reg   [1:0] add_ln72_reg_1436;
wire   [31:0] select_ln90_fu_1138_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] select_ln90_1_fu_1146_p3;
wire   [31:0] select_ln90_2_fu_1181_p3;
wire   [31:0] select_ln90_3_fu_1189_p3;
wire   [31:0] select_ln95_4_fu_1197_p3;
wire   [31:0] select_ln95_5_fu_1205_p3;
wire    ap_CS_fsm_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_state27;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state38;
wire    ap_block_pp3_stage1_subdone;
reg   [9:0] i_reg_203;
reg    ap_block_state1;
reg   [12:0] ap_phi_mux_i_5_phi_fu_218_p4;
reg   [31:0] empty_21_reg_225;
reg   [8:0] ap_phi_mux_knn_set1_5_load_124_phi_fu_368_p8;
reg   [8:0] ap_phi_mux_knn_set1_4_load_121_phi_fu_383_p8;
reg   [8:0] ap_phi_mux_knn_set1_3_load18_phi_fu_398_p8;
reg   [8:0] ap_phi_mux_knn_set1_2_load_115_phi_fu_323_p8;
reg   [8:0] ap_phi_mux_knn_set1_1_load_112_phi_fu_338_p8;
reg   [8:0] ap_phi_mux_knn_set1_0_load_19_phi_fu_353_p8;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_2_load_115_reg_319;
wire   [0:0] icmp_ln44_fu_792_p2;
wire   [1:0] select_ln45_fu_800_p3;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_1_load_112_reg_334;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_0_load_19_reg_349;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_5_load_124_reg_364;
wire   [0:0] icmp_ln44_2_fu_849_p2;
wire   [2:0] select_ln45_4_fu_867_p3;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_4_load_121_reg_379;
wire   [8:0] ap_phi_reg_pp2_iter8_knn_set1_3_load18_reg_394;
reg   [2:0] ap_phi_mux_indvar_flatten_phi_fu_413_p4;
wire    ap_block_pp3_stage0;
reg   [1:0] ap_phi_mux_i_8_phi_fu_424_p4;
reg   [1:0] ap_phi_mux_j_phi_fu_435_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln414_fu_602_p1;
wire   [63:0] zext_ln245_fu_722_p1;
wire   [31:0] add_ln189_fu_678_p2;
reg    ap_block_state21;
reg   [8:0] ap_sig_allocacmp_knn_set1_0_load;
reg   [8:0] ap_sig_allocacmp_knn_set1_1_load;
reg   [8:0] ap_sig_allocacmp_knn_set1_3_load_1;
reg   [8:0] ap_sig_allocacmp_knn_set1_4_load;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [255:0] p_Result_s_fu_608_p9;
wire   [8:0] add_ln414_fu_591_p2;
wire   [8:0] select_ln414_fu_596_p3;
wire   [8:0] select_ln36_fu_766_p3;
wire   [0:0] icmp_ln36_fu_778_p2;
wire   [8:0] select_ln36_4_fu_784_p3;
wire   [1:0] zext_ln45_fu_797_p1;
wire   [8:0] select_ln36_5_fu_823_p3;
wire   [0:0] icmp_ln36_5_fu_835_p2;
wire   [8:0] select_ln36_6_fu_841_p3;
wire   [0:0] or_ln45_fu_862_p2;
wire   [2:0] select_ln45_3_fu_854_p3;
wire   [0:0] empty_23_fu_924_p1;
wire   [2:0] p_shl_fu_928_p3;
wire   [2:0] zext_ln70_fu_920_p1;
wire   [0:0] icmp_ln72_fu_948_p2;
wire   [1:0] add_ln70_1_fu_962_p2;
wire   [0:0] empty_26_fu_972_p1;
wire   [2:0] p_shl_mid1_fu_976_p3;
wire   [2:0] zext_ln70_1_fu_968_p1;
wire   [2:0] p_mid1_fu_984_p2;
wire   [2:0] empty_24_fu_936_p2;
wire   [2:0] select_ln70_1_fu_990_p3;
wire   [2:0] j_cast_fu_1006_p1;
wire    ap_block_pp3_stage1;
wire   [0:0] icmp_ln80_fu_1027_p2;
wire   [0:0] icmp_ln80_1_fu_1033_p2;
wire   [0:0] xor_ln82_fu_1039_p2;
wire   [0:0] and_ln81_fu_1045_p2;
wire   [0:0] or_ln81_fu_1055_p2;
wire   [5:0] zext_ln81_fu_1051_p1;
wire   [0:0] icmp_ln82_fu_1090_p2;
wire   [0:0] and_ln81_1_fu_1095_p2;
wire   [5:0] pos_2_fu_1100_p3;
wire   [4:0] tmp_36_fu_1107_p4;
wire   [0:0] icmp_ln90_fu_1117_p2;
wire   [31:0] select_ln95_fu_1123_p3;
wire   [31:0] select_ln95_1_fu_1131_p3;
wire   [0:0] icmp_ln95_fu_1160_p2;
wire   [0:0] icmp_ln90_1_fu_1154_p2;
wire   [31:0] select_ln95_2_fu_1166_p3;
wire   [31:0] select_ln95_3_fu_1174_p3;
reg   [37:0] ap_NS_fsm;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 38'd1;
#0 index1 = 32'd0;
#0 knn_set1_0 = 9'd0;
#0 knn_set1_1 = 9'd0;
#0 knn_set1_2 = 9'd0;
#0 knn_set1_3 = 9'd0;
#0 knn_set1_4 = 9'd0;
#0 knn_set1_5 = 9'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
end

update_knn1_update_knn1_sub_training_set1_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set1_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set1_V_0_address0),
    .ce0(training_set1_V_0_ce0),
    .we0(training_set1_V_0_we0),
    .d0(p_Result_s_fu_608_p9),
    .q0(training_set1_V_0_q0)
);

update_knn1_update_knn1_sub_training_set1_V_0 #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set1_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set1_V_1_address0),
    .ce0(training_set1_V_1_ce0),
    .we0(training_set1_V_1_we0),
    .d0(p_Result_s_fu_608_p9),
    .q0(training_set1_V_1_q0)
);

update_knn1_popcount grp_popcount_fu_520(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(ret_reg_1272),
    .ap_return(grp_popcount_fu_520_ap_return)
);

update_knn1_popcount grp_popcount_fu_525(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(ret_2_reg_1277),
    .ap_return(grp_popcount_fu_525_ap_return)
);

update_knn1_mux_63_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_63_32_1_1_U2(
    .din0(zext_ln80_reg_1360),
    .din1(zext_ln80_1_reg_1365),
    .din2(zext_ln80_2_reg_1370),
    .din3(zext_ln80_3_reg_1375),
    .din4(zext_ln80_4_reg_1380),
    .din5(zext_ln80_5_reg_1385),
    .din6(p_t_reg_1409),
    .dout(tmp_fu_1016_p8)
);

update_knn1_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state38) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (icmp_ln137_reg_1215 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        empty_21_reg_225 <= 32'd1;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln137_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_21_reg_225 <= index1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_5_reg_214 <= 13'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_5_reg_214 <= i_6_reg_1238;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln245_fu_716_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_7_reg_308 <= add_ln245_fu_710_p2;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        i_7_reg_308 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_8_reg_420 <= select_ln70_2_reg_1404;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        i_8_reg_420 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln137_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_203 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        i_reg_203 <= add_ln140_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar_flatten_reg_409 <= add_ln70_reg_1390;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        indvar_flatten_reg_409 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j_reg_431 <= add_ln72_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        j_reg_431 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_0 <= 9'd256;
    end else if (((select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_0 <= dist_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_0_load_1_reg_296 <= ap_phi_mux_knn_set1_0_load_19_phi_fu_353_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_0_load_1_reg_296 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_1 <= 9'd256;
    end else if (((select_ln45_fu_800_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_1 <= dist_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_1_load_1_reg_284 <= ap_phi_mux_knn_set1_1_load_112_phi_fu_338_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_1_load_1_reg_284 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_2 <= 9'd256;
    end else if ((~(select_ln45_fu_800_p3 == 2'd1) & ~(select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_2 <= dist_reg_1282;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_2_load_1_reg_272 <= ap_phi_mux_knn_set1_2_load_115_phi_fu_323_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_2_load_1_reg_272 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_3 <= 9'd256;
    end else if (((select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_3 <= dist_2_reg_1315;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_3_load_reg_260 <= ap_phi_mux_knn_set1_3_load18_phi_fu_398_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_3_load_reg_260 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_4 <= 9'd256;
    end else if (((select_ln45_4_fu_867_p3 == 3'd4) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_4 <= dist_2_reg_1315;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_4_load_1_reg_248 <= ap_phi_mux_knn_set1_4_load_121_phi_fu_383_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_4_load_1_reg_248 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
        knn_set1_5 <= 9'd256;
    end else if ((~(select_ln45_4_fu_867_p3 == 3'd4) & ~(select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_5 <= dist_2_reg_1315;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        knn_set1_5_load_1_reg_236 <= ap_phi_mux_knn_set1_5_load_124_phi_fu_368_p8;
    end else if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
        knn_set1_5_load_1_reg_236 <= 9'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0113_reg_481 <= select_ln90_1_fu_1146_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0113_reg_481 <= 32'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0114_reg_494 <= select_ln90_3_fu_1189_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0114_reg_494 <= 32'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0115_reg_507 <= select_ln95_5_fu_1205_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0115_reg_507 <= 32'd256;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0116_reg_442 <= select_ln90_fu_1138_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0116_reg_442 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0117_reg_468 <= select_ln90_2_fu_1181_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0117_reg_468 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_0_reg_455 <= select_ln95_4_fu_1197_p3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        p_0_reg_455 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln140_reg_1219 <= add_ln140_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln70_reg_1390 <= add_ln70_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_1395 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        add_ln72_reg_1436 <= add_ln72_fu_1085_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln245_reg_1258_pp2_iter6_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dist_2_reg_1315 <= grp_popcount_fu_525_ap_return;
        dist_reg_1282 <= grp_popcount_fu_520_ap_return;
        icmp_ln36_1_reg_1309 <= icmp_ln36_1_fu_746_p2;
        icmp_ln36_4_reg_1342 <= icmp_ln36_4_fu_760_p2;
        knn_set1_0_load_reg_1293 <= ap_sig_allocacmp_knn_set1_0_load;
        knn_set1_1_load_reg_1301 <= ap_sig_allocacmp_knn_set1_1_load;
        knn_set1_3_load_1_reg_1326 <= ap_sig_allocacmp_knn_set1_3_load_1;
        knn_set1_4_load_reg_1334 <= ap_sig_allocacmp_knn_set1_4_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_6_reg_1238 <= i_6_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln137_reg_1215 <= icmp_ln137_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln155_reg_1243 <= icmp_ln155_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln245_reg_1258 <= icmp_ln245_fu_716_p2;
        icmp_ln245_reg_1258_pp2_iter1_reg <= icmp_ln245_reg_1258;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln245_reg_1258_pp2_iter2_reg <= icmp_ln245_reg_1258_pp2_iter1_reg;
        icmp_ln245_reg_1258_pp2_iter3_reg <= icmp_ln245_reg_1258_pp2_iter2_reg;
        icmp_ln245_reg_1258_pp2_iter4_reg <= icmp_ln245_reg_1258_pp2_iter3_reg;
        icmp_ln245_reg_1258_pp2_iter5_reg <= icmp_ln245_reg_1258_pp2_iter4_reg;
        icmp_ln245_reg_1258_pp2_iter6_reg <= icmp_ln245_reg_1258_pp2_iter5_reg;
        icmp_ln245_reg_1258_pp2_iter7_reg <= icmp_ln245_reg_1258_pp2_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd0))) begin
        icmp_ln414_reg_1233 <= icmp_ln414_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln70_reg_1395 <= icmp_ln70_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln80_2_reg_1426 <= icmp_ln80_2_fu_1069_p2;
        pos_reg_1421[0] <= pos_fu_1061_p3[0];
pos_reg_1421[3] <= pos_fu_1061_p3[3];
pos_reg_1421[5] <= pos_fu_1061_p3[5];
        tmp_35_reg_1431 <= {{pos_fu_1061_p3[5:2]}};
        tmp_reg_1414 <= tmp_fu_1016_p8;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state21))) begin
        index1 <= add_ln189_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_Result_36_reg_1247 <= p_Result_36_fu_690_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        p_t_reg_1409 <= p_t_fu_1010_p2;
        select_ln70_reg_1399 <= select_ln70_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_636_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd0)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_530 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_535 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_539 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_543 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_547 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_551 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_555 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln245_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ret_2_reg_1277 <= ret_2_fu_733_p2;
        ret_reg_1272 <= ret_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_942_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln70_2_reg_1404 <= select_ln70_2_fu_998_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln140_reg_1224 <= trunc_ln140_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        zext_ln80_1_reg_1365[8 : 0] <= zext_ln80_1_fu_894_p1[8 : 0];
        zext_ln80_2_reg_1370[8 : 0] <= zext_ln80_2_fu_898_p1[8 : 0];
        zext_ln80_3_reg_1375[8 : 0] <= zext_ln80_3_fu_902_p1[8 : 0];
        zext_ln80_4_reg_1380[8 : 0] <= zext_ln80_4_fu_906_p1[8 : 0];
        zext_ln80_5_reg_1385[8 : 0] <= zext_ln80_5_fu_910_p1[8 : 0];
        zext_ln80_reg_1360[8 : 0] <= zext_ln80_fu_890_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_636_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd0)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_fu_636_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd0)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Output_1_blk_n = Output_1_full_n;
    end else begin
        Output_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48))) begin
        Output_1_din = p_0_reg_455;
    end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state47))) begin
        Output_1_din = p_0117_reg_468;
    end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state46))) begin
        Output_1_din = p_0116_reg_442;
    end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state44))) begin
        Output_1_din = p_0115_reg_507;
    end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state43))) begin
        Output_1_din = p_0114_reg_494;
    end else if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state42))) begin
        Output_1_din = p_0113_reg_481;
    end else if ((((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state41)))) begin
        Output_1_din = 32'd0;
    end else if (((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_din = Input_1_V_TDATA_int_regslice;
    end else if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Output_1_din = reg_530;
    end else begin
        Output_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state47)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state46)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state44)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state43)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state41)))) begin
        Output_1_write = 1'b1;
    end else begin
        Output_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_636_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln245_fu_716_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_942_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln155_reg_1243 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_5_phi_fu_218_p4 = i_6_reg_1238;
    end else begin
        ap_phi_mux_i_5_phi_fu_218_p4 = i_5_reg_214;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_8_phi_fu_424_p4 = select_ln70_2_reg_1404;
    end else begin
        ap_phi_mux_i_8_phi_fu_424_p4 = i_8_reg_420;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_413_p4 = add_ln70_reg_1390;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_413_p4 = indvar_flatten_reg_409;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln70_reg_1395 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_j_phi_fu_435_p4 = add_ln72_reg_1436;
    end else begin
        ap_phi_mux_j_phi_fu_435_p4 = j_reg_431;
    end
end

always @ (*) begin
    if (((select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_0_load_19_phi_fu_353_p8 = dist_reg_1282;
    end else if ((((icmp_ln44_fu_792_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | (~(select_ln45_fu_800_p3 == 2'd1) & ~(select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_fu_800_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_0_load_19_phi_fu_353_p8 = knn_set1_0_load_reg_1293;
    end else begin
        ap_phi_mux_knn_set1_0_load_19_phi_fu_353_p8 = ap_phi_reg_pp2_iter8_knn_set1_0_load_19_reg_349;
    end
end

always @ (*) begin
    if (((select_ln45_fu_800_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_1_load_112_phi_fu_338_p8 = dist_reg_1282;
    end else if ((((icmp_ln44_fu_792_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | (~(select_ln45_fu_800_p3 == 2'd1) & ~(select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_1_load_112_phi_fu_338_p8 = knn_set1_1_load_reg_1301;
    end else begin
        ap_phi_mux_knn_set1_1_load_112_phi_fu_338_p8 = ap_phi_reg_pp2_iter8_knn_set1_1_load_112_reg_334;
    end
end

always @ (*) begin
    if ((((icmp_ln44_fu_792_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_fu_800_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_2_load_115_phi_fu_323_p8 = knn_set1_2;
    end else if ((~(select_ln45_fu_800_p3 == 2'd1) & ~(select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_2_load_115_phi_fu_323_p8 = dist_reg_1282;
    end else begin
        ap_phi_mux_knn_set1_2_load_115_phi_fu_323_p8 = ap_phi_reg_pp2_iter8_knn_set1_2_load_115_reg_319;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_3_load18_phi_fu_398_p8 = dist_2_reg_1315;
    end else if ((((icmp_ln44_2_fu_849_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | (~(select_ln45_4_fu_867_p3 == 3'd4) & ~(select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_4_fu_867_p3 == 3'd4) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_3_load18_phi_fu_398_p8 = knn_set1_3_load_1_reg_1326;
    end else begin
        ap_phi_mux_knn_set1_3_load18_phi_fu_398_p8 = ap_phi_reg_pp2_iter8_knn_set1_3_load18_reg_394;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_867_p3 == 3'd4) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_4_load_121_phi_fu_383_p8 = dist_2_reg_1315;
    end else if ((((icmp_ln44_2_fu_849_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | (~(select_ln45_4_fu_867_p3 == 3'd4) & ~(select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_4_load_121_phi_fu_383_p8 = knn_set1_4_load_reg_1334;
    end else begin
        ap_phi_mux_knn_set1_4_load_121_phi_fu_383_p8 = ap_phi_reg_pp2_iter8_knn_set1_4_load_121_reg_379;
    end
end

always @ (*) begin
    if ((((icmp_ln44_2_fu_849_p2 == 1'd0) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_4_fu_867_p3 == 3'd4) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)) | ((select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0)))) begin
        ap_phi_mux_knn_set1_5_load_124_phi_fu_368_p8 = knn_set1_5;
    end else if ((~(select_ln45_4_fu_867_p3 == 3'd4) & ~(select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0))) begin
        ap_phi_mux_knn_set1_5_load_124_phi_fu_368_p8 = dist_2_reg_1315;
    end else begin
        ap_phi_mux_knn_set1_5_load_124_phi_fu_368_p8 = ap_phi_reg_pp2_iter8_knn_set1_5_load_124_reg_364;
    end
end

always @ (*) begin
    if (((select_ln45_fu_800_p3 == 2'd0) & (icmp_ln44_fu_792_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_sig_allocacmp_knn_set1_0_load = dist_reg_1282;
    end else begin
        ap_sig_allocacmp_knn_set1_0_load = knn_set1_0;
    end
end

always @ (*) begin
    if (((select_ln45_fu_800_p3 == 2'd1) & (icmp_ln44_fu_792_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_sig_allocacmp_knn_set1_1_load = dist_reg_1282;
    end else begin
        ap_sig_allocacmp_knn_set1_1_load = knn_set1_1;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_867_p3 == 3'd3) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_sig_allocacmp_knn_set1_3_load_1 = dist_2_reg_1315;
    end else begin
        ap_sig_allocacmp_knn_set1_3_load_1 = knn_set1_3;
    end
end

always @ (*) begin
    if (((select_ln45_4_fu_867_p3 == 3'd4) & (icmp_ln44_2_fu_849_p2 == 1'd1) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln245_reg_1258_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_sig_allocacmp_knn_set1_4_load = dist_2_reg_1315;
    end else begin
        ap_sig_allocacmp_knn_set1_4_load = knn_set1_4;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        training_set1_V_0_address0 = zext_ln245_fu_722_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set1_V_0_address0 = zext_ln414_fu_602_p1;
    end else begin
        training_set1_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set1_V_0_ce0 = 1'b1;
    end else begin
        training_set1_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1233 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set1_V_0_we0 = 1'b1;
    end else begin
        training_set1_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        training_set1_V_1_address0 = zext_ln245_fu_722_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set1_V_1_address0 = zext_ln414_fu_602_p1;
    end else begin
        training_set1_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice)))) begin
        training_set1_V_1_ce0 = 1'b1;
    end else begin
        training_set1_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln414_reg_1233 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
        training_set1_V_1_we0 = 1'b1;
    end else begin
        training_set1_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln137_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln137_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln140_fu_579_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b1 == Input_1_V_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln155_fu_636_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln155_fu_636_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln245_fu_716_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter8 == 1'b1) & (ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln245_fu_716_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln70_fu_942_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((icmp_ln70_fu_942_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == Output_1_full_n) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign add_ln140_fu_569_p2 = (i_reg_203 + 10'd1);

assign add_ln189_fu_678_p2 = (empty_21_reg_225 + 32'd1);

assign add_ln245_fu_710_p2 = (i_7_reg_308 + 9'd1);

assign add_ln414_fu_591_p2 = (trunc_ln140_reg_1224 + 9'd62);

assign add_ln70_1_fu_962_p2 = (ap_phi_mux_i_8_phi_fu_424_p4 + 2'd1);

assign add_ln70_fu_914_p2 = (ap_phi_mux_indvar_flatten_phi_fu_413_p4 + 3'd1);

assign add_ln72_fu_1085_p2 = (select_ln70_reg_1399 + 2'd1);

assign and_ln81_1_fu_1095_p2 = (icmp_ln82_fu_1090_p2 & icmp_ln80_2_reg_1426);

assign and_ln81_fu_1045_p2 = (xor_ln82_fu_1039_p2 & icmp_ln80_1_fu_1033_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_636_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_636_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_636_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_fu_636_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp1_stage1_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state13_pp1_stage2_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_pp1_stage3_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_pp1_stage4_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_pp1_stage5_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_pp1_stage6_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_pp1_stage7_iter0 = (((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln155_reg_1243 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((1'b0 == Output_1_full_n) & (icmp_ln155_reg_1243 == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln140_fu_579_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Output_1_full_n) | (1'b0 == Input_1_V_TVALID_int_regslice));
end

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_phi_reg_pp2_iter8_knn_set1_0_load_19_reg_349 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set1_1_load_112_reg_334 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set1_2_load_115_reg_319 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set1_3_load18_reg_394 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set1_4_load_121_reg_379 = 'bx;

assign ap_phi_reg_pp2_iter8_knn_set1_5_load_124_reg_364 = 'bx;

assign ap_ready = internal_ap_ready;

assign empty_23_fu_924_p1 = ap_phi_mux_i_8_phi_fu_424_p4[0:0];

assign empty_24_fu_936_p2 = (p_shl_fu_928_p3 - zext_ln70_fu_920_p1);

assign empty_26_fu_972_p1 = add_ln70_1_fu_962_p2[0:0];

assign i_6_fu_630_p2 = (ap_phi_mux_i_5_phi_fu_218_p4 + 13'd1);

assign icmp_ln137_fu_563_p2 = ((index1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_579_p2 = ((i_reg_203 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_636_p2 = ((ap_phi_mux_i_5_phi_fu_218_p4 == 13'd8100) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_716_p2 = ((i_7_reg_308 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_746_p2 = ((ap_sig_allocacmp_knn_set1_1_load > ap_sig_allocacmp_knn_set1_0_load) ? 1'b1 : 1'b0);

assign icmp_ln36_4_fu_760_p2 = ((ap_sig_allocacmp_knn_set1_4_load > ap_sig_allocacmp_knn_set1_3_load_1) ? 1'b1 : 1'b0);

assign icmp_ln36_5_fu_835_p2 = ((knn_set1_5 > select_ln36_5_fu_823_p3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_778_p2 = ((knn_set1_2 > select_ln36_fu_766_p3) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_585_p2 = ((i_reg_203 < 10'd450) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_849_p2 = ((dist_2_reg_1315 < select_ln36_6_fu_841_p3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_792_p2 = ((dist_reg_1282 < select_ln36_4_fu_784_p3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_942_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_413_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_948_p2 = ((ap_phi_mux_j_phi_fu_435_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_1033_p2 = (($signed(tmp_fu_1016_p8) < $signed(p_0114_reg_494)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_1069_p2 = (($signed(tmp_fu_1016_p8) < $signed(p_0113_reg_481)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1027_p2 = (($signed(tmp_fu_1016_p8) < $signed(p_0115_reg_507)) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_1090_p2 = ((tmp_35_reg_1431 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_1154_p2 = ((pos_2_fu_1100_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1117_p2 = ((tmp_36_fu_1107_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1160_p2 = ((pos_2_fu_1100_p3 == 6'd1) ? 1'b1 : 1'b0);

assign j_cast_fu_1006_p1 = select_ln70_fu_954_p3;

assign or_ln45_fu_862_p2 = (icmp_ln36_5_fu_835_p2 | icmp_ln36_4_reg_1342);

assign or_ln81_fu_1055_p2 = (icmp_ln80_fu_1027_p2 | and_ln81_fu_1045_p2);

assign p_Result_36_fu_690_p9 = {{{{{{{{reg_530}, {reg_535}}, {reg_539}}, {reg_543}}, {reg_547}}, {reg_551}}, {reg_555}}, {Input_1_V_TDATA_int_regslice}};

assign p_Result_s_fu_608_p9 = {{{{{{{{reg_530}, {reg_535}}, {reg_539}}, {reg_543}}, {reg_547}}, {reg_551}}, {reg_555}}, {Input_1_V_TDATA_int_regslice}};

assign p_mid1_fu_984_p2 = (p_shl_mid1_fu_976_p3 - zext_ln70_1_fu_968_p1);

assign p_shl_fu_928_p3 = {{empty_23_fu_924_p1}, {2'd0}};

assign p_shl_mid1_fu_976_p3 = {{empty_26_fu_972_p1}, {2'd0}};

assign p_t_fu_1010_p2 = (select_ln70_1_fu_990_p3 + j_cast_fu_1006_p1);

assign pos_2_fu_1100_p3 = ((and_ln81_1_fu_1095_p2[0:0] == 1'b1) ? 6'd2 : pos_reg_1421);

assign pos_fu_1061_p3 = ((or_ln81_fu_1055_p2[0:0] == 1'b1) ? zext_ln81_fu_1051_p1 : 6'd40);

assign ret_2_fu_733_p2 = (training_set1_V_1_q0 ^ p_Result_36_reg_1247);

assign ret_fu_728_p2 = (training_set1_V_0_q0 ^ p_Result_36_reg_1247);

assign select_ln36_4_fu_784_p3 = ((icmp_ln36_fu_778_p2[0:0] == 1'b1) ? knn_set1_2 : select_ln36_fu_766_p3);

assign select_ln36_5_fu_823_p3 = ((icmp_ln36_4_reg_1342[0:0] == 1'b1) ? knn_set1_4_load_reg_1334 : knn_set1_3_load_1_reg_1326);

assign select_ln36_6_fu_841_p3 = ((icmp_ln36_5_fu_835_p2[0:0] == 1'b1) ? knn_set1_5 : select_ln36_5_fu_823_p3);

assign select_ln36_fu_766_p3 = ((icmp_ln36_1_reg_1309[0:0] == 1'b1) ? knn_set1_1_load_reg_1301 : knn_set1_0_load_reg_1293);

assign select_ln414_fu_596_p3 = ((icmp_ln414_reg_1233[0:0] == 1'b1) ? trunc_ln140_reg_1224 : add_ln414_fu_591_p2);

assign select_ln45_3_fu_854_p3 = ((icmp_ln36_5_fu_835_p2[0:0] == 1'b1) ? 3'd5 : 3'd4);

assign select_ln45_4_fu_867_p3 = ((or_ln45_fu_862_p2[0:0] == 1'b1) ? select_ln45_3_fu_854_p3 : 3'd3);

assign select_ln45_fu_800_p3 = ((icmp_ln36_fu_778_p2[0:0] == 1'b1) ? 2'd2 : zext_ln45_fu_797_p1);

assign select_ln70_1_fu_990_p3 = ((icmp_ln72_fu_948_p2[0:0] == 1'b1) ? p_mid1_fu_984_p2 : empty_24_fu_936_p2);

assign select_ln70_2_fu_998_p3 = ((icmp_ln72_fu_948_p2[0:0] == 1'b1) ? add_ln70_1_fu_962_p2 : ap_phi_mux_i_8_phi_fu_424_p4);

assign select_ln70_fu_954_p3 = ((icmp_ln72_fu_948_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_j_phi_fu_435_p4);

assign select_ln90_1_fu_1146_p3 = ((icmp_ln90_fu_1117_p2[0:0] == 1'b1) ? p_0114_reg_494 : select_ln95_1_fu_1131_p3);

assign select_ln90_2_fu_1181_p3 = ((icmp_ln90_1_fu_1154_p2[0:0] == 1'b1) ? p_0_reg_455 : select_ln95_2_fu_1166_p3);

assign select_ln90_3_fu_1189_p3 = ((icmp_ln90_1_fu_1154_p2[0:0] == 1'b1) ? p_0115_reg_507 : select_ln95_3_fu_1174_p3);

assign select_ln90_fu_1138_p3 = ((icmp_ln90_fu_1117_p2[0:0] == 1'b1) ? p_0117_reg_468 : select_ln95_fu_1123_p3);

assign select_ln95_1_fu_1131_p3 = ((and_ln81_1_fu_1095_p2[0:0] == 1'b1) ? tmp_reg_1414 : p_0113_reg_481);

assign select_ln95_2_fu_1166_p3 = ((icmp_ln95_fu_1160_p2[0:0] == 1'b1) ? 32'd0 : p_0117_reg_468);

assign select_ln95_3_fu_1174_p3 = ((icmp_ln95_fu_1160_p2[0:0] == 1'b1) ? tmp_reg_1414 : p_0114_reg_494);

assign select_ln95_4_fu_1197_p3 = ((icmp_ln90_1_fu_1154_p2[0:0] == 1'b1) ? 32'd0 : p_0_reg_455);

assign select_ln95_5_fu_1205_p3 = ((icmp_ln90_1_fu_1154_p2[0:0] == 1'b1) ? tmp_reg_1414 : p_0115_reg_507);

assign select_ln95_fu_1123_p3 = ((and_ln81_1_fu_1095_p2[0:0] == 1'b1) ? 32'd0 : p_0116_reg_442);

assign start_out = real_start;

assign tmp_36_fu_1107_p4 = {{pos_2_fu_1100_p3[5:1]}};

assign trunc_ln140_fu_575_p1 = i_reg_203[8:0];

assign xor_ln82_fu_1039_p2 = (icmp_ln80_fu_1027_p2 ^ 1'd1);

assign zext_ln245_fu_722_p1 = i_7_reg_308;

assign zext_ln414_fu_602_p1 = select_ln414_fu_596_p3;

assign zext_ln45_fu_797_p1 = icmp_ln36_1_reg_1309;

assign zext_ln70_1_fu_968_p1 = add_ln70_1_fu_962_p2;

assign zext_ln70_fu_920_p1 = ap_phi_mux_i_8_phi_fu_424_p4;

assign zext_ln80_1_fu_894_p1 = knn_set1_1_load_1_reg_284;

assign zext_ln80_2_fu_898_p1 = knn_set1_2_load_1_reg_272;

assign zext_ln80_3_fu_902_p1 = knn_set1_3_load_reg_260;

assign zext_ln80_4_fu_906_p1 = knn_set1_4_load_1_reg_248;

assign zext_ln80_5_fu_910_p1 = knn_set1_5_load_1_reg_236;

assign zext_ln80_fu_890_p1 = knn_set1_0_load_1_reg_296;

assign zext_ln81_fu_1051_p1 = and_ln81_fu_1045_p2;

always @ (posedge ap_clk) begin
    zext_ln80_reg_1360[31:9] <= 23'b00000000000000000000000;
    zext_ln80_1_reg_1365[31:9] <= 23'b00000000000000000000000;
    zext_ln80_2_reg_1370[31:9] <= 23'b00000000000000000000000;
    zext_ln80_3_reg_1375[31:9] <= 23'b00000000000000000000000;
    zext_ln80_4_reg_1380[31:9] <= 23'b00000000000000000000000;
    zext_ln80_5_reg_1385[31:9] <= 23'b00000000000000000000000;
    pos_reg_1421[2:1] <= 2'b00;
    pos_reg_1421[4] <= 1'b0;
end

endmodule //update_knn1_update_knn1_sub
