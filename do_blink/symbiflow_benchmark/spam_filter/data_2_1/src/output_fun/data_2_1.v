// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_2_1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.257000,HLS_SYN_LAT=2054,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=169,HLS_SYN_LUT=390,HLS_VERSION=2018_2}" *)

module data_2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_pp1_stage0 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_pp2_stage0 = 10'd32;
parameter    ap_ST_fsm_pp2_stage1 = 10'd64;
parameter    ap_ST_fsm_pp2_stage2 = 10'd128;
parameter    ap_ST_fsm_pp2_stage3 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;
reg[31:0] Output_1_V_V;
reg Output_1_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] theta_address0;
reg    theta_ce0;
reg    theta_we0;
reg   [31:0] theta_d0;
wire   [31:0] theta_q0;
reg   [9:0] theta_address1;
reg    theta_ce1;
wire   [31:0] theta_q1;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_189_p2;
reg    Input_2_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond2_fu_206_p2;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] exitcond_reg_315;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [9:0] i1_reg_162;
reg   [8:0] i2_reg_173;
reg   [31:0] reg_184;
wire    ap_block_state8_pp2_stage1_iter0;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state8_io;
reg    ap_block_pp2_stage1_11001;
wire    ap_block_state9_pp2_stage2_iter0;
reg    ap_block_state9_io;
reg    ap_block_pp2_stage2_11001;
wire   [9:0] i_1_fu_195_p2;
reg    ap_block_state2;
reg   [0:0] exitcond2_reg_296;
reg    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [9:0] i_2_fu_212_p2;
reg   [31:0] tmp_V_1_reg_305;
wire   [9:0] tmp_4_fu_218_p2;
reg   [9:0] tmp_4_reg_310;
wire   [0:0] exitcond_fu_228_p2;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp2_stage0_11001;
wire   [8:0] i_3_fu_234_p2;
reg   [8:0] i_3_reg_319;
wire   [9:0] tmp_7_fu_244_p3;
reg   [9:0] tmp_7_reg_324;
reg   [31:0] loc_V_3_reg_350;
wire    ap_CS_fsm_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
wire    ap_block_state10_pp2_stage3_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp2_stage3_subdone;
reg   [9:0] i_reg_151;
reg   [8:0] ap_phi_mux_i2_phi_fu_177_p4;
wire   [63:0] tmp_fu_201_p1;
wire   [63:0] tmp_5_fu_224_p1;
wire   [63:0] tmp_8_fu_252_p1;
wire   [63:0] tmp_1_fu_263_p1;
wire   [63:0] tmp_3_fu_273_p1;
wire   [63:0] tmp_9_fu_283_p1;
wire    ap_block_pp2_stage1_01001;
wire    ap_block_pp2_stage2_01001;
wire    ap_block_pp2_stage3_01001;
wire    ap_block_pp2_stage0_01001;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_pp2_stage3_11001;
wire   [7:0] tmp_13_fu_240_p1;
wire   [9:0] tmp_s_fu_257_p2;
wire   [9:0] tmp_2_fu_268_p2;
wire   [9:0] tmp_6_fu_278_p2;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp2_stage2_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

data_2_1_theta #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
theta_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(theta_address0),
    .ce0(theta_ce0),
    .we0(theta_we0),
    .d0(theta_d0),
    .q0(theta_q0),
    .address1(theta_address1),
    .ce1(theta_ce1),
    .q1(theta_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state7) & (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3))))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
        end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
        end else if ((((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == Output_1_V_V_ap_ack) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage3_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage2_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == Output_1_V_V_ap_ack) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == Output_1_V_V_ap_ack)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == Output_1_V_V_ap_ack)))) begin
            ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_reg_162 <= 10'd0;
    end else if (((exitcond2_fu_206_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_reg_162 <= i_2_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i2_reg_173 <= i_3_reg_319;
    end else if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
        i2_reg_173 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_151 <= i_1_fu_195_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_151 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond2_reg_296 <= exitcond2_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        exitcond_reg_315 <= exitcond_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_3_reg_319 <= i_3_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001))) begin
        loc_V_3_reg_350 <= theta_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        reg_184 <= theta_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_4_reg_310 <= tmp_4_fu_218_p2;
        tmp_V_1_reg_305 <= Input_2_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_7_reg_324[9 : 2] <= tmp_7_fu_244_p3[9 : 2];
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_fu_206_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        Input_2_V_V_ap_ack = 1'b1;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond2_fu_206_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Input_2_V_V_blk_n = Input_2_V_V_ap_vld;
    end else begin
        Input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Output_1_V_V = loc_V_3_reg_350;
    end else if ((((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage3_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage2_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        Output_1_V_V = reg_184;
    end else if (((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        Output_1_V_V = theta_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Output_1_V_V = 32'd1025;
    end else begin
        Output_1_V_V = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_reg_315 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond_reg_315 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp2_stage3_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((exitcond_reg_315 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp2_stage2_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((exitcond_reg_315 == 1'd0) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state6)))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage3) & (1'b0 == ap_block_pp2_stage3)) | ((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage1) & (exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond2_fu_206_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_228_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_315 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i2_phi_fu_177_p4 = i_3_reg_319;
    end else begin
        ap_phi_mux_i2_phi_fu_177_p4 = i2_reg_173;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        theta_address0 = tmp_9_fu_283_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        theta_address0 = tmp_8_fu_252_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        theta_address0 = tmp_5_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        theta_address0 = tmp_fu_201_p1;
    end else begin
        theta_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp2_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            theta_address1 = tmp_3_fu_273_p1;
        end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
            theta_address1 = tmp_1_fu_263_p1;
        end else begin
            theta_address1 = 'bx;
        end
    end else begin
        theta_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | (~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2)))) begin
        theta_ce0 = 1'b1;
    end else begin
        theta_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        theta_ce1 = 1'b1;
    end else begin
        theta_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        theta_d0 = tmp_V_1_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        theta_d0 = Input_1_V_V;
    end else begin
        theta_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_296 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | (~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        theta_we0 = 1'b1;
    end else begin
        theta_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond2_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond2_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_fu_228_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond2_fu_206_p2 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond2_fu_206_p2 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((exitcond_reg_315 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state10_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((exitcond_reg_315 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((exitcond1_fu_189_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state4_pp1_stage0_iter0 = ((exitcond2_fu_206_p2 == 1'd0) & (1'b0 == Input_2_V_V_ap_vld));
end

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((exitcond_reg_315 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state8_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((exitcond_reg_315 == 1'd0) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign ap_block_state9_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign exitcond1_fu_189_p2 = ((i_reg_151 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond2_fu_206_p2 = ((i1_reg_162 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_228_p2 = ((ap_phi_mux_i2_phi_fu_177_p4 == 9'd256) ? 1'b1 : 1'b0);

assign i_1_fu_195_p2 = (i_reg_151 + 10'd1);

assign i_2_fu_212_p2 = (i1_reg_162 + 10'd1);

assign i_3_fu_234_p2 = (ap_phi_mux_i2_phi_fu_177_p4 + 9'd1);

assign tmp_13_fu_240_p1 = ap_phi_mux_i2_phi_fu_177_p4[7:0];

assign tmp_1_fu_263_p1 = tmp_s_fu_257_p2;

assign tmp_2_fu_268_p2 = (tmp_7_reg_324 | 10'd2);

assign tmp_3_fu_273_p1 = tmp_2_fu_268_p2;

assign tmp_4_fu_218_p2 = (i1_reg_162 ^ 10'd512);

assign tmp_5_fu_224_p1 = tmp_4_reg_310;

assign tmp_6_fu_278_p2 = (tmp_7_reg_324 | 10'd3);

assign tmp_7_fu_244_p3 = {{tmp_13_fu_240_p1}, {2'd0}};

assign tmp_8_fu_252_p1 = tmp_7_fu_244_p3;

assign tmp_9_fu_283_p1 = tmp_6_fu_278_p2;

assign tmp_fu_201_p1 = i_reg_151;

assign tmp_s_fu_257_p2 = (tmp_7_fu_244_p3 | 10'd1);

always @ (posedge ap_clk) begin
    tmp_7_reg_324[1:0] <= 2'b00;
end

endmodule //data_2_1
