// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_in_redir_data_in_redir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=2359540,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=4912,HLS_SYN_LUT=2422,HLS_VERSION=2020_2}" *)

module data_in_redir (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_pp2_stage0 = 24'd8192;
parameter    ap_ST_fsm_pp2_stage1 = 24'd16384;
parameter    ap_ST_fsm_pp2_stage2 = 24'd32768;
parameter    ap_ST_fsm_pp2_stage3 = 24'd65536;
parameter    ap_ST_fsm_state20 = 24'd131072;
parameter    ap_ST_fsm_state21 = 24'd262144;
parameter    ap_ST_fsm_pp3_stage0 = 24'd524288;
parameter    ap_ST_fsm_pp3_stage1 = 24'd1048576;
parameter    ap_ST_fsm_pp3_stage2 = 24'd2097152;
parameter    ap_ST_fsm_pp3_stage3 = 24'd4194304;
parameter    ap_ST_fsm_state28 = 24'd8388608;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] epoch;
reg   [9:0] label_local_V_0_address0;
reg    label_local_V_0_ce0;
reg    label_local_V_0_we0;
reg   [7:0] label_local_V_0_d0;
wire   [7:0] label_local_V_0_q0;
reg   [9:0] label_local_V_1_address0;
reg    label_local_V_1_ce0;
reg    label_local_V_1_we0;
reg   [7:0] label_local_V_1_d0;
wire   [7:0] label_local_V_1_q0;
reg   [9:0] label_local_V_2_address0;
reg    label_local_V_2_ce0;
reg    label_local_V_2_we0;
reg   [7:0] label_local_V_2_d0;
wire   [7:0] label_local_V_2_q0;
reg   [9:0] label_local_V_3_address0;
reg    label_local_V_3_ce0;
reg    label_local_V_3_we0;
reg   [7:0] label_local_V_3_d0;
wire   [7:0] label_local_V_3_q0;
reg   [9:0] label_local_V_4_address0;
reg    label_local_V_4_ce0;
reg    label_local_V_4_we0;
reg   [7:0] label_local_V_4_d0;
wire   [7:0] label_local_V_4_q0;
reg   [9:0] label_local_V_5_address0;
reg    label_local_V_5_ce0;
reg    label_local_V_5_we0;
wire   [7:0] label_local_V_5_d0;
wire   [7:0] label_local_V_5_q0;
reg   [9:0] label_local_V_6_address0;
reg    label_local_V_6_ce0;
reg    label_local_V_6_we0;
wire   [7:0] label_local_V_6_d0;
wire   [7:0] label_local_V_6_q0;
reg   [9:0] label_local_V_7_address0;
reg    label_local_V_7_ce0;
reg    label_local_V_7_we0;
wire   [7:0] label_local_V_7_d0;
wire   [7:0] label_local_V_7_q0;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln29_fu_499_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln36_fu_511_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln70_fu_645_p2;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln70_reg_824;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] icmp_ln85_fu_657_p2;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_pp3_stage1;
reg   [0:0] icmp_ln85_reg_833;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_pp3_stage2;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_block_pp3_stage3;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln70_reg_824_pp2_iter1_reg;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln85_reg_833_pp3_iter1_reg;
reg   [6:0] i_3_reg_413;
reg   [6:0] i_5_reg_424;
reg   [31:0] reg_471;
reg    ap_block_state14_pp2_stage0_iter0;
reg    ap_block_state18_pp2_stage0_iter1;
reg    ap_block_state18_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state16_pp2_stage2_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp2_stage2_11001;
reg    ap_block_state22_pp3_stage0_iter0;
reg    ap_block_state26_pp3_stage0_iter1;
reg    ap_block_state26_io;
reg    ap_block_pp3_stage0_11001;
reg    ap_block_state24_pp3_stage2_iter0;
reg    ap_block_state24_io;
reg    ap_block_pp3_stage2_11001;
reg   [31:0] reg_477;
reg    ap_block_state15_pp2_stage1_iter0;
reg    ap_block_state15_io;
reg    ap_block_state19_pp2_stage1_iter1;
reg    ap_block_state19_io;
reg    ap_block_pp2_stage1_11001;
reg    ap_block_state17_pp2_stage3_iter0;
reg    ap_block_state17_io;
reg    ap_block_pp2_stage3_11001;
reg    ap_block_state23_pp3_stage1_iter0;
reg    ap_block_state23_io;
reg    ap_block_state27_pp3_stage1_iter1;
reg    ap_block_state27_io;
reg    ap_block_pp3_stage1_11001;
reg    ap_block_state25_pp3_stage3_iter0;
reg    ap_block_state25_io;
reg    ap_block_pp3_stage3_11001;
wire   [0:0] icmp_ln27_fu_487_p2;
wire   [10:0] i_1_fu_493_p2;
reg    ap_block_state2;
wire   [8:0] add_ln36_fu_505_p2;
reg   [8:0] add_ln36_reg_678;
reg    ap_block_state4;
wire   [7:0] trunc_ln674_fu_517_p1;
reg   [7:0] trunc_ln674_reg_686;
wire   [9:0] shl_ln_fu_521_p3;
reg   [9:0] shl_ln_reg_691;
reg   [7:0] p_Result_1_reg_697;
reg   [7:0] p_Result_2_reg_702;
reg   [7:0] p_Result_3_reg_707;
wire   [63:0] zext_ln414_1_fu_555_p1;
reg   [63:0] zext_ln414_1_reg_712;
wire   [12:0] add_ln57_fu_568_p2;
reg   [12:0] add_ln57_reg_720;
wire    ap_CS_fsm_state9;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state9;
wire   [2:0] trunc_ln674_4_fu_580_p1;
reg   [2:0] trunc_ln674_4_reg_728;
wire   [0:0] icmp_ln57_fu_574_p2;
reg   [7:0] label_local_V_0_load_reg_773;
wire    ap_CS_fsm_state11;
reg   [7:0] label_local_V_1_load_reg_778;
reg   [7:0] label_local_V_2_load_reg_783;
reg   [7:0] label_local_V_3_load_reg_788;
reg   [7:0] label_local_V_4_load_reg_793;
reg   [7:0] label_local_V_5_load_reg_798;
reg   [7:0] label_local_V_6_load_reg_803;
reg   [7:0] label_local_V_7_load_reg_808;
wire   [31:0] zext_ln358_fu_634_p1;
reg   [31:0] zext_ln358_reg_813;
wire   [6:0] i_4_fu_639_p2;
reg   [6:0] i_4_reg_819;
wire   [6:0] i_6_fu_651_p2;
reg   [6:0] i_6_reg_828;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state14;
reg    ap_block_pp2_stage3_subdone;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state22;
reg    ap_block_pp3_stage3_subdone;
reg    ap_block_pp3_stage1_subdone;
reg   [10:0] i_reg_380;
reg   [8:0] i_2_reg_391;
wire    ap_CS_fsm_state3;
reg   [12:0] training_id_reg_402;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state8;
reg   [6:0] ap_phi_mux_i_3_phi_fu_417_p4;
reg   [6:0] ap_phi_mux_i_5_phi_fu_428_p4;
wire   [63:0] zext_ln414_fu_529_p1;
wire   [63:0] zext_ln674_1_fu_594_p1;
wire   [31:0] add_ln104_fu_606_p2;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_pp2_stage2_01001;
reg    ap_block_pp2_stage3_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage1_01001;
reg    ap_block_pp3_stage2_01001;
reg    ap_block_pp3_stage3_01001;
reg    ap_block_pp3_stage0_01001;
wire   [7:0] trunc_ln674_2_fu_545_p1;
wire    ap_CS_fsm_state10;
wire   [7:0] trunc_ln674_1_fu_540_p1;
wire   [7:0] trunc_ln674_3_fu_563_p1;
wire   [9:0] or_ln414_fu_550_p2;
wire   [9:0] lshr_ln_fu_584_p4;
wire   [63:0] p_Val2_s_fu_620_p9;
wire   [7:0] p_Val2_s_fu_620_p10;
reg   [23:0] ap_NS_fsm;
reg    ap_block_pp2_stage2_subdone;
reg    ap_block_pp3_stage2_subdone;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg   [31:0] Output_2_V_TDATA_int_regslice;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 icmp_ln70_reg_824 = 1'd0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 icmp_ln85_reg_833 = 1'd0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 icmp_ln70_reg_824_pp2_iter1_reg = 1'd0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 icmp_ln85_reg_833_pp3_iter1_reg = 1'd0;
#0 i_3_reg_413 = 7'd0;
#0 i_5_reg_424 = 7'd0;
#0 reg_471 = 32'd0;
#0 reg_477 = 32'd0;
#0 add_ln36_reg_678 = 9'd0;
#0 trunc_ln674_reg_686 = 8'd0;
#0 shl_ln_reg_691 = 10'd0;
#0 p_Result_1_reg_697 = 8'd0;
#0 p_Result_2_reg_702 = 8'd0;
#0 p_Result_3_reg_707 = 8'd0;
#0 zext_ln414_1_reg_712 = 64'd0;
#0 add_ln57_reg_720 = 13'd0;
#0 trunc_ln674_4_reg_728 = 3'd0;
#0 label_local_V_0_load_reg_773 = 8'd0;
#0 label_local_V_1_load_reg_778 = 8'd0;
#0 label_local_V_2_load_reg_783 = 8'd0;
#0 label_local_V_3_load_reg_788 = 8'd0;
#0 label_local_V_4_load_reg_793 = 8'd0;
#0 label_local_V_5_load_reg_798 = 8'd0;
#0 label_local_V_6_load_reg_803 = 8'd0;
#0 label_local_V_7_load_reg_808 = 8'd0;
#0 zext_ln358_reg_813 = 32'd0;
#0 i_4_reg_819 = 7'd0;
#0 i_6_reg_828 = 7'd0;
#0 i_reg_380 = 11'd0;
#0 i_2_reg_391 = 9'd0;
#0 training_id_reg_402 = 13'd0;
end

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_0_address0),
    .ce0(label_local_V_0_ce0),
    .we0(label_local_V_0_we0),
    .d0(label_local_V_0_d0),
    .q0(label_local_V_0_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_1_address0),
    .ce0(label_local_V_1_ce0),
    .we0(label_local_V_1_we0),
    .d0(label_local_V_1_d0),
    .q0(label_local_V_1_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_2_address0),
    .ce0(label_local_V_2_ce0),
    .we0(label_local_V_2_we0),
    .d0(label_local_V_2_d0),
    .q0(label_local_V_2_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_3_address0),
    .ce0(label_local_V_3_ce0),
    .we0(label_local_V_3_we0),
    .d0(label_local_V_3_d0),
    .q0(label_local_V_3_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_4_address0),
    .ce0(label_local_V_4_ce0),
    .we0(label_local_V_4_we0),
    .d0(label_local_V_4_d0),
    .q0(label_local_V_4_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_5_address0),
    .ce0(label_local_V_5_ce0),
    .we0(label_local_V_5_we0),
    .d0(label_local_V_5_d0),
    .q0(label_local_V_5_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_6_address0),
    .ce0(label_local_V_6_ce0),
    .we0(label_local_V_6_we0),
    .d0(label_local_V_6_d0),
    .q0(label_local_V_6_q0)
);

data_in_redir_label_local_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
label_local_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(label_local_V_7_address0),
    .ce0(label_local_V_7_ce0),
    .we0(label_local_V_7_we0),
    .d0(label_local_V_7_d0),
    .q0(label_local_V_7_q0)
);

data_in_redir_mux_864_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 8 ))
mux_864_8_1_1_U1(
    .din0(label_local_V_0_load_reg_773),
    .din1(label_local_V_1_load_reg_778),
    .din2(label_local_V_2_load_reg_783),
    .din3(label_local_V_3_load_reg_788),
    .din4(label_local_V_4_load_reg_793),
    .din5(label_local_V_5_load_reg_798),
    .din6(label_local_V_6_load_reg_803),
    .din7(label_local_V_7_load_reg_808),
    .din8(p_Val2_s_fu_620_p9),
    .dout(p_Val2_s_fu_620_p10)
);

data_in_redir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_in_redir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

data_in_redir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_2_V_TDATA_int_regslice),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln36_reg_678 <= 9'd0;
    end else begin
        if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln36_fu_511_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
            add_ln36_reg_678 <= add_ln36_fu_505_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln57_reg_720 <= 13'd0;
    end else begin
        if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9))) begin
            add_ln57_reg_720 <= add_ln57_fu_568_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp2_stage3) & (1'b0 == ap_block_pp2_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state22) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        epoch <= 32'd0;
    end else begin
        if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (icmp_ln57_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            epoch <= add_ln104_fu_606_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_2_reg_391 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            i_2_reg_391 <= 9'd0;
        end else if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7))) begin
            i_2_reg_391 <= add_ln36_reg_678;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_3_reg_413 <= 7'd0;
    end else begin
        if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
            i_3_reg_413 <= i_4_reg_819;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
            i_3_reg_413 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_4_reg_819 <= 7'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
            i_4_reg_819 <= i_4_fu_639_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_5_reg_424 <= 7'd0;
    end else begin
        if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln85_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
            i_5_reg_424 <= i_6_reg_828;
        end else if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
            i_5_reg_424 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_6_reg_828 <= 7'd0;
    end else begin
        if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
            i_6_reg_828 <= i_6_fu_651_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_reg_380 <= 11'd0;
    end else begin
        if (((icmp_ln27_fu_487_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            i_reg_380 <= 11'd0;
        end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln29_fu_499_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln29_fu_499_p2 == 1'd0))) begin
            i_reg_380 <= i_1_fu_493_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln70_reg_824 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
            icmp_ln70_reg_824 <= icmp_ln70_fu_645_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln70_reg_824_pp2_iter1_reg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
            icmp_ln70_reg_824_pp2_iter1_reg <= icmp_ln70_reg_824;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln85_reg_833 <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
            icmp_ln85_reg_833 <= icmp_ln85_fu_657_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln85_reg_833_pp3_iter1_reg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
            icmp_ln85_reg_833_pp3_iter1_reg <= icmp_ln85_reg_833;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_0_load_reg_773 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_0_load_reg_773 <= label_local_V_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_1_load_reg_778 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_1_load_reg_778 <= label_local_V_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_2_load_reg_783 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_2_load_reg_783 <= label_local_V_2_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_3_load_reg_788 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_3_load_reg_788 <= label_local_V_3_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_4_load_reg_793 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_4_load_reg_793 <= label_local_V_4_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_5_load_reg_798 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_5_load_reg_798 <= label_local_V_5_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_6_load_reg_803 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_6_load_reg_803 <= label_local_V_6_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        label_local_V_7_load_reg_808 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            label_local_V_7_load_reg_808 <= label_local_V_7_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_Result_1_reg_697 <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
            p_Result_1_reg_697 <= {{Input_1_V_TDATA_int_regslice[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_Result_2_reg_702 <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
            p_Result_2_reg_702 <= {{Input_1_V_TDATA_int_regslice[23:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_Result_3_reg_707 <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
            p_Result_3_reg_707 <= {{Input_1_V_TDATA_int_regslice[31:24]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_471 <= 32'd0;
    end else begin
        if ((((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
            reg_471 <= Input_1_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_477 <= 32'd0;
    end else begin
        if ((((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
            reg_477 <= Input_1_V_TDATA_int_regslice;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                shl_ln_reg_691[1] <= 1'b0;
        shl_ln_reg_691[2] <= 1'b0;
        shl_ln_reg_691[3] <= 1'b0;
        shl_ln_reg_691[4] <= 1'b0;
        shl_ln_reg_691[5] <= 1'b0;
        shl_ln_reg_691[6] <= 1'b0;
        shl_ln_reg_691[7] <= 1'b0;
        shl_ln_reg_691[8] <= 1'b0;
        shl_ln_reg_691[9] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
                        shl_ln_reg_691[9 : 1] <= shl_ln_fu_521_p3[9 : 1];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        training_id_reg_402 <= 13'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            training_id_reg_402 <= 13'd0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            training_id_reg_402 <= add_ln57_reg_720;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln674_4_reg_728 <= 3'd0;
    end else begin
        if (((icmp_ln57_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
            trunc_ln674_4_reg_728 <= trunc_ln674_4_fu_580_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln674_reg_686 <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
            trunc_ln674_reg_686 <= trunc_ln674_fu_517_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln358_reg_813[0] <= 1'b0;
        zext_ln358_reg_813[1] <= 1'b0;
        zext_ln358_reg_813[2] <= 1'b0;
        zext_ln358_reg_813[3] <= 1'b0;
        zext_ln358_reg_813[4] <= 1'b0;
        zext_ln358_reg_813[5] <= 1'b0;
        zext_ln358_reg_813[6] <= 1'b0;
        zext_ln358_reg_813[7] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
                        zext_ln358_reg_813[7 : 0] <= zext_ln358_fu_634_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln414_1_reg_712[1] <= 1'b0;
        zext_ln414_1_reg_712[2] <= 1'b0;
        zext_ln414_1_reg_712[3] <= 1'b0;
        zext_ln414_1_reg_712[4] <= 1'b0;
        zext_ln414_1_reg_712[5] <= 1'b0;
        zext_ln414_1_reg_712[6] <= 1'b0;
        zext_ln414_1_reg_712[7] <= 1'b0;
        zext_ln414_1_reg_712[8] <= 1'b0;
        zext_ln414_1_reg_712[9] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
                        zext_ln414_1_reg_712[9 : 1] <= zext_ln414_1_fu_555_p1[9 : 1];
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1)) | ((icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln29_fu_499_p2 == 1'd0)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln29_fu_499_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln29_fu_499_p2 == 1'd0)) | (~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln36_fu_511_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln70_reg_824_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2_01001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        Output_1_V_TDATA_int_regslice = reg_477;
    end else if ((((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3_01001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        Output_1_V_TDATA_int_regslice = reg_471;
    end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state12))) begin
        Output_1_V_TDATA_int_regslice = zext_ln358_fu_634_p1;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state12)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage3) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage3_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage2) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln85_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln85_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_01001)))) begin
        Output_2_V_TDATA_int_regslice = reg_477;
    end else if ((((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_01001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_01001)))) begin
        Output_2_V_TDATA_int_regslice = reg_471;
    end else if (((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
        Output_2_V_TDATA_int_regslice = zext_ln358_reg_813;
    end else begin
        Output_2_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln85_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_2_V_TREADY_int_regslice)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((icmp_ln85_reg_833 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_645_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln85_fu_657_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (icmp_ln57_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_reg_824 == 1'd0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_3_phi_fu_417_p4 = i_4_reg_819;
    end else begin
        ap_phi_mux_i_3_phi_fu_417_p4 = i_3_reg_413;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln85_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_5_phi_fu_428_p4 = i_6_reg_828;
    end else begin
        ap_phi_mux_i_5_phi_fu_428_p4 = i_5_reg_424;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (icmp_ln57_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_0_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_0_address0 = zext_ln414_1_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_0_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_0_ce0 = 1'b1;
    end else begin
        label_local_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_0_d0 = trunc_ln674_2_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_0_d0 = trunc_ln674_reg_686;
    end else begin
        label_local_V_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_0_we0 = 1'b1;
    end else begin
        label_local_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_1_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_1_address0 = zext_ln414_1_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_1_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_1_ce0 = 1'b1;
    end else begin
        label_local_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_1_d0 = {{Input_1_V_TDATA_int_regslice[15:8]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_1_d0 = p_Result_1_reg_697;
    end else begin
        label_local_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_1_we0 = 1'b1;
    end else begin
        label_local_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_2_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_2_address0 = zext_ln414_1_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_2_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_2_ce0 = 1'b1;
    end else begin
        label_local_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_2_d0 = {{Input_1_V_TDATA_int_regslice[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_2_d0 = p_Result_2_reg_702;
    end else begin
        label_local_V_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_2_we0 = 1'b1;
    end else begin
        label_local_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_3_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_3_address0 = zext_ln414_1_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_3_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_3_ce0 = 1'b1;
    end else begin
        label_local_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        label_local_V_3_d0 = {{Input_1_V_TDATA_int_regslice[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_3_d0 = p_Result_3_reg_707;
    end else begin
        label_local_V_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_3_we0 = 1'b1;
    end else begin
        label_local_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_4_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        label_local_V_4_address0 = zext_ln414_1_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_4_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_4_ce0 = 1'b1;
    end else begin
        label_local_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        label_local_V_4_d0 = trunc_ln674_3_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_4_d0 = trunc_ln674_1_fu_540_p1;
    end else begin
        label_local_V_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_4_we0 = 1'b1;
    end else begin
        label_local_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_5_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        label_local_V_5_address0 = zext_ln414_1_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_5_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_5_ce0 = 1'b1;
    end else begin
        label_local_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_5_we0 = 1'b1;
    end else begin
        label_local_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_6_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        label_local_V_6_address0 = zext_ln414_1_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_6_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_6_ce0 = 1'b1;
    end else begin
        label_local_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_6_we0 = 1'b1;
    end else begin
        label_local_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        label_local_V_7_address0 = zext_ln674_1_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        label_local_V_7_address0 = zext_ln414_1_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        label_local_V_7_address0 = zext_ln414_fu_529_p1;
    end else begin
        label_local_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)) | (~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9)))) begin
        label_local_V_7_ce0 = 1'b1;
    end else begin
        label_local_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5)))) begin
        label_local_V_7_we0 = 1'b1;
    end else begin
        label_local_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln27_fu_487_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln27_fu_487_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln29_fu_499_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln29_fu_499_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln29_fu_499_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln29_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln36_fu_511_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln36_fu_511_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln36_fu_511_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_1_V_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (icmp_ln57_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (icmp_ln57_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln70_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln70_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_2_V_TREADY_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln85_fu_657_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln85_fu_657_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln104_fu_606_p2 = (epoch + 32'd1);

assign add_ln36_fu_505_p2 = (i_2_reg_391 + 9'd1);

assign add_ln57_fu_568_p2 = (training_id_reg_402 + 13'd1);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_fu_645_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_fu_645_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_fu_645_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)))));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_01001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_01001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0))));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state26_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_fu_657_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state26_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)))));
end

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_01001 = (((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == Output_2_V_TREADY_int_regslice)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage1_11001 = (((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state27_io) | ((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (1'b0 == Output_2_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state23_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = (((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state27_io) | ((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (1'b0 == Output_2_V_TREADY_int_regslice)))) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state23_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)))));
end

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage2_01001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage2_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state24_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage2_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state24_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage3_01001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage3_11001 = ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state25_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage3_subdone = ((ap_enable_reg_pp3_iter0 == 1'b1) & ((1'b1 == ap_block_state25_io) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0))));
end

always @ (*) begin
    ap_block_state14_pp2_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_fu_645_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state15_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp2_stage1_iter0 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp2_stage2_iter0 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp2_stage3_iter0 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0)) | ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln70_reg_824 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp2_stage0_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824 == 1'd0));
end

always @ (*) begin
    ap_block_state19_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp2_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln70_reg_824_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln29_fu_499_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp3_stage0_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_fu_657_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state23_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp3_stage1_iter0 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)));
end

always @ (*) begin
    ap_block_state24_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp3_stage2_iter0 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)));
end

always @ (*) begin
    ap_block_state25_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0));
end

always @ (*) begin
    ap_block_state25_pp3_stage3_iter0 = (((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln85_reg_833 == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0)));
end

always @ (*) begin
    ap_block_state26_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0));
end

always @ (*) begin
    ap_block_state26_pp3_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln85_reg_833 == 1'd0));
end

always @ (*) begin
    ap_block_state27_io = ((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (1'b0 == Output_2_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state27_pp3_stage1_iter1 = ((icmp_ln85_reg_833_pp3_iter1_reg == 1'd0) & (1'b0 == Output_2_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln36_fu_511_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state9 = ((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_493_p2 = (i_reg_380 + 11'd1);

assign i_4_fu_639_p2 = (ap_phi_mux_i_3_phi_fu_417_p4 + 7'd1);

assign i_6_fu_651_p2 = (ap_phi_mux_i_5_phi_fu_428_p4 + 7'd1);

assign icmp_ln27_fu_487_p2 = ((epoch == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_499_p2 = ((i_reg_380 == 11'd1944) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_511_p2 = ((i_2_reg_391 == 9'd282) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_574_p2 = ((training_id_reg_402 == 13'd4500) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_645_p2 = ((ap_phi_mux_i_3_phi_fu_417_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_657_p2 = ((ap_phi_mux_i_5_phi_fu_428_p4 == 7'd64) ? 1'b1 : 1'b0);

assign label_local_V_5_d0 = {{Input_1_V_TDATA_int_regslice[15:8]}};

assign label_local_V_6_d0 = {{Input_1_V_TDATA_int_regslice[23:16]}};

assign label_local_V_7_d0 = {{Input_1_V_TDATA_int_regslice[31:24]}};

assign lshr_ln_fu_584_p4 = {{training_id_reg_402[12:3]}};

assign or_ln414_fu_550_p2 = (shl_ln_reg_691 | 10'd1);

assign p_Val2_s_fu_620_p9 = trunc_ln674_4_reg_728;

assign shl_ln_fu_521_p3 = {{i_2_reg_391}, {1'd0}};

assign trunc_ln674_1_fu_540_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign trunc_ln674_2_fu_545_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign trunc_ln674_3_fu_563_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign trunc_ln674_4_fu_580_p1 = training_id_reg_402[2:0];

assign trunc_ln674_fu_517_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign zext_ln358_fu_634_p1 = p_Val2_s_fu_620_p10;

assign zext_ln414_1_fu_555_p1 = or_ln414_fu_550_p2;

assign zext_ln414_fu_529_p1 = shl_ln_reg_691;

assign zext_ln674_1_fu_594_p1 = lshr_ln_fu_584_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_691[0] <= 1'b0;
    zext_ln414_1_reg_712[0] <= 1'b1;
    zext_ln414_1_reg_712[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln358_reg_813[31:8] <= 24'b000000000000000000000000;
end

endmodule //data_in_redir
