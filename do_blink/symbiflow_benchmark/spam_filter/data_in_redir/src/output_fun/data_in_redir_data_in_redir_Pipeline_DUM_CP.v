// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_in_redir_data_in_redir_Pipeline_DUM_CP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TVALID,
        Input_1_V_TDATA,
        Input_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   Input_1_V_TVALID;
input  [31:0] Input_1_V_TDATA;
output   Input_1_V_TREADY;

reg ap_idle;
reg Input_1_V_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln29_fu_50_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Input_1_V_TDATA_blk_n;
reg   [10:0] i_fu_32;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_5;
wire   [10:0] i_6_fu_56_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_88;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_32 = 11'd0;
#0 ap_done_reg = 1'b0;
end

data_in_redir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_fu_32 <= 11'd0;
    end else begin
        if ((1'b1 == ap_condition_88)) begin
            if ((icmp_ln29_fu_50_p2 == 1'd0)) begin
                i_fu_32 <= i_6_fu_56_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                i_fu_32 <= 11'd0;
            end
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln29_fu_50_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (icmp_ln29_fu_50_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_TREADY = 1'b1;
    end else begin
        Input_1_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (icmp_ln29_fu_50_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_5 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_32;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_88 = (~((ap_start_int == 1'b0) | ((1'b0 == Input_1_V_TVALID) & (icmp_ln29_fu_50_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_6_fu_56_p2 = (ap_sig_allocacmp_i_5 + 11'd1);

assign icmp_ln29_fu_50_p2 = ((ap_sig_allocacmp_i_5 == 11'd1944) ? 1'b1 : 1'b0);

endmodule //data_in_redir_data_in_redir_Pipeline_DUM_CP
