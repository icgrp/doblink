// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sigmoid_axi,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.439000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=392,HLS_VERSION=2018_2}" *)

module Sigmoid_axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;
reg Output_1_V_V_ap_vld;
reg Output_2_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] lut_address0;
reg    lut_ce0;
wire   [9:0] lut_q0;
reg    Input_1_V_V_blk_n;
reg    Input_2_V_V_blk_n;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state7;
reg    Output_2_V_V_blk_n;
wire   [31:0] exponent_V_fu_121_p2;
reg   [31:0] exponent_V_reg_293;
reg    ap_block_state1;
reg   [15:0] index_V_2_reg_299;
reg   [0:0] tmp_6_reg_305;
wire   [0:0] tmp_4_fu_151_p2;
reg   [0:0] tmp_4_reg_310;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_5_fu_156_p2;
reg   [0:0] tmp_5_reg_316;
wire   [27:0] p_Val2_5_fu_172_p2;
reg   [27:0] p_Val2_5_reg_321;
wire   [10:0] tmp_13_fu_178_p1;
reg   [10:0] tmp_13_reg_326;
reg   [15:0] tmp_9_reg_331;
wire   [0:0] tmp_1_fu_199_p2;
reg   [0:0] tmp_1_reg_338;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_8_fu_205_p2;
reg   [15:0] tmp_8_reg_343;
wire   [15:0] p_04156_0_i_fu_235_p3;
reg   [15:0] p_04156_0_i_reg_348;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [9:0] p_Val2_7_reg_358;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_2_fu_241_p1;
wire   [31:0] tmp_V_1_fu_287_p1;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_block_state7_io;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
wire   [26:0] tmp_3_fu_117_p1;
wire   [26:0] tmp_fu_113_p1;
wire   [26:0] exponent_V_cast_fu_127_p2;
wire   [26:0] p_Val2_4_fu_161_p3;
wire  signed [27:0] p_Val2_4_cast_fu_168_p1;
wire   [11:0] p_Result_5_fu_192_p3;
wire   [0:0] tmp_7_fu_210_p3;
wire   [15:0] tmp_s_fu_217_p3;
wire   [15:0] tmp_10_fu_222_p3;
wire   [15:0] index_V_fu_229_p2;
wire   [18:0] result_V_fu_245_p3;
wire   [0:0] sel_tmp1_fu_256_p2;
wire   [0:0] sel_tmp2_fu_261_p2;
wire   [0:0] tmp_11_fu_274_p2;
wire   [19:0] sel_tmp_fu_266_p3;
wire   [19:0] result_V_cast_fu_252_p1;
wire   [19:0] p_Val2_s_fu_279_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
end

Sigmoid_axi_lut #(
    .DataWidth( 10 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
lut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_address0),
    .ce0(lut_ce0),
    .q0(lut_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((1'b0 == ap_block_state7_io)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == Output_1_V_V_ap_ack)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((1'b0 == ap_block_state7_io)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == Output_2_V_V_ap_ack)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Input_2_V_V_ap_vld) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        exponent_V_reg_293 <= exponent_V_fu_121_p2;
        index_V_2_reg_299 <= {{exponent_V_cast_fu_127_p2[26:11]}};
        tmp_6_reg_305 <= exponent_V_cast_fu_127_p2[32'd26];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_04156_0_i_reg_348 <= p_04156_0_i_fu_235_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_305 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_5_reg_321[27 : 11] <= p_Val2_5_fu_172_p2[27 : 11];
        tmp_9_reg_331 <= {{p_Val2_5_fu_172_p2[26:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_7_reg_358 <= lut_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_305 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_338 <= tmp_1_fu_199_p2;
        tmp_8_reg_343 <= tmp_8_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_4_reg_310 <= tmp_4_fu_151_p2;
        tmp_5_reg_316 <= tmp_5_fu_156_p2;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_V_ap_vld) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_V_ap_vld) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_V_ap_ack = 1'b1;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_2_V_V_blk_n = Input_2_V_V_ap_vld;
    end else begin
        Input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lut_ce0 = 1'b1;
    end else begin
        lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_2_V_V_ap_vld) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_io))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = tmp_V_1_fu_287_p1;

assign Output_2_V_V = tmp_V_1_fu_287_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_2_V_V_ap_vld) | (1'b0 == Input_1_V_V_ap_vld) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0) | (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0));
end

assign exponent_V_cast_fu_127_p2 = (tmp_3_fu_117_p1 + tmp_fu_113_p1);

assign exponent_V_fu_121_p2 = (Input_1_V_V + Input_2_V_V);

assign index_V_fu_229_p2 = (16'd2048 - tmp_10_fu_222_p3);

assign lut_address0 = tmp_2_fu_241_p1;

assign p_04156_0_i_fu_235_p3 = ((tmp_6_reg_305[0:0] === 1'b1) ? index_V_fu_229_p2 : index_V_2_reg_299);

assign p_Result_5_fu_192_p3 = {{tmp_13_reg_326}, {1'd0}};

assign p_Val2_4_cast_fu_168_p1 = $signed(p_Val2_4_fu_161_p3);

assign p_Val2_4_fu_161_p3 = {{index_V_2_reg_299}, {11'd0}};

assign p_Val2_5_fu_172_p2 = ($signed(28'd0) - $signed(p_Val2_4_cast_fu_168_p1));

assign p_Val2_s_fu_279_p3 = ((tmp_11_fu_274_p2[0:0] === 1'b1) ? sel_tmp_fu_266_p3 : result_V_cast_fu_252_p1);

assign result_V_cast_fu_252_p1 = result_V_fu_245_p3;

assign result_V_fu_245_p3 = {{p_Val2_7_reg_358}, {9'd0}};

assign sel_tmp1_fu_256_p2 = (tmp_4_reg_310 ^ 1'd1);

assign sel_tmp2_fu_261_p2 = (tmp_5_reg_316 & sel_tmp1_fu_256_p2);

assign sel_tmp_fu_266_p3 = ((sel_tmp2_fu_261_p2[0:0] === 1'b1) ? 20'd0 : 20'd524288);

assign tmp_10_fu_222_p3 = ((tmp_7_fu_210_p3[0:0] === 1'b1) ? tmp_s_fu_217_p3 : tmp_9_reg_331);

assign tmp_11_fu_274_p2 = (tmp_4_reg_310 | sel_tmp2_fu_261_p2);

assign tmp_13_fu_178_p1 = p_Val2_5_fu_172_p2[10:0];

assign tmp_1_fu_199_p2 = ((p_Result_5_fu_192_p3 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_241_p1 = p_04156_0_i_reg_348;

assign tmp_3_fu_117_p1 = Input_2_V_V[26:0];

assign tmp_4_fu_151_p2 = (($signed(exponent_V_reg_293) > $signed(32'd2097152)) ? 1'b1 : 1'b0);

assign tmp_5_fu_156_p2 = (($signed(exponent_V_reg_293) < $signed(32'd4292870144)) ? 1'b1 : 1'b0);

assign tmp_7_fu_210_p3 = p_Val2_5_reg_321[32'd27];

assign tmp_8_fu_205_p2 = (16'd1 + tmp_9_reg_331);

assign tmp_V_1_fu_287_p1 = p_Val2_s_fu_279_p3;

assign tmp_fu_113_p1 = Input_1_V_V[26:0];

assign tmp_s_fu_217_p3 = ((tmp_1_reg_338[0:0] === 1'b1) ? tmp_9_reg_331 : tmp_8_reg_343);

always @ (posedge ap_clk) begin
    p_Val2_5_reg_321[10:0] <= 11'b00000000000;
    tmp_13_reg_326[10:0] <= 11'b00000000000;
end

endmodule //Sigmoid_axi
