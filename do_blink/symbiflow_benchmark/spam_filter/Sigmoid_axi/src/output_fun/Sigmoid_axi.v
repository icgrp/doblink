// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sigmoid_axi_Sigmoid_axi,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=293,HLS_VERSION=2021_1}" *)

module Sigmoid_axi (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] lut_i_address0;
reg    lut_i_ce0;
wire   [9:0] lut_i_q0;
reg    Input_1_V_TDATA_blk_n;
reg    Input_2_V_TDATA_blk_n;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    Output_2_V_TDATA_blk_n;
wire   [31:0] exponent_V_fu_113_p2;
reg   [31:0] exponent_V_reg_239;
reg   [10:0] trunc_ln1_reg_245;
reg   [0:0] tmp_reg_251;
wire   [0:0] icmp_ln1547_fu_143_p2;
reg   [0:0] icmp_ln1547_reg_256;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1548_fu_148_p2;
reg   [0:0] icmp_ln1548_reg_262;
reg   [10:0] trunc_ln_cast_reg_267;
wire   [10:0] index_V_fu_176_p2;
reg   [10:0] index_V_reg_272;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [9:0] lut_i_load_reg_282;
wire    ap_CS_fsm_state6;
wire   [31:0] zext_ln2130_1_fu_233_p1;
wire   [63:0] zext_ln573_fu_186_p1;
reg    ap_block_state1;
reg    ap_block_state7;
reg    ap_block_state7_io;
wire    ap_CS_fsm_state5;
wire   [26:0] trunc_ln712_1_fu_109_p1;
wire   [26:0] trunc_ln712_fu_105_p1;
wire   [26:0] add_ln2122_fu_119_p2;
wire   [21:0] in_V_cast_fu_153_p3;
wire   [21:0] in_V_fu_160_p2;
wire   [10:0] index_V_1_fu_181_p3;
wire   [18:0] result_V_fu_191_p3;
wire   [0:0] xor_ln1547_fu_202_p2;
wire   [0:0] and_ln1548_fu_207_p2;
wire   [0:0] or_ln1548_fu_220_p2;
wire   [19:0] select_ln1548_fu_212_p3;
wire   [19:0] zext_ln2130_fu_198_p1;
wire   [19:0] result_V_2_fu_225_p3;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state8;
reg    ap_block_state8_io;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 exponent_V_reg_239 = 32'd0;
#0 trunc_ln1_reg_245 = 11'd0;
#0 tmp_reg_251 = 1'd0;
#0 icmp_ln1547_reg_256 = 1'd0;
#0 icmp_ln1548_reg_262 = 1'd0;
#0 trunc_ln_cast_reg_267 = 11'd0;
#0 index_V_reg_272 = 11'd0;
#0 lut_i_load_reg_282 = 10'd0;
end

Sigmoid_axi_lut_i #(
    .DataWidth( 10 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
lut_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_i_address0),
    .ce0(lut_i_ce0),
    .q0(lut_i_q0)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2130_1_fu_233_p1),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

Sigmoid_axi_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(zext_ln2130_1_fu_233_p1),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        exponent_V_reg_239 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            exponent_V_reg_239 <= exponent_V_fu_113_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln1547_reg_256 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln1547_reg_256 <= icmp_ln1547_fu_143_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln1548_reg_262 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln1548_reg_262 <= icmp_ln1548_fu_148_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        index_V_reg_272 <= 11'd0;
    end else begin
        if (((tmp_reg_251 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            index_V_reg_272 <= index_V_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        lut_i_load_reg_282 <= 10'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            lut_i_load_reg_282 <= lut_i_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_reg_251 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            tmp_reg_251 <= add_ln2122_fu_119_p2[32'd26];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln1_reg_245 <= 11'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            trunc_ln1_reg_245 <= {{add_ln2122_fu_119_p2[21:11]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln_cast_reg_267 <= 11'd0;
    end else begin
        if (((tmp_reg_251 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            trunc_ln_cast_reg_267 <= {{in_V_fu_160_p2[21:11]}};
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state7_io)) & (1'b1 == ap_CS_fsm_state7))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state7_io)) & (1'b1 == ap_CS_fsm_state7))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state7_io))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state8_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state8_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state8_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        lut_i_ce0 = 1'b1;
    end else begin
        lut_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state7_io)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (1'b1 == ap_block_state8_io) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln2122_fu_119_p2 = (trunc_ln712_1_fu_109_p1 + trunc_ln712_fu_105_p1);

assign and_ln1548_fu_207_p2 = (xor_ln1547_fu_202_p2 & icmp_ln1548_reg_262);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Input_2_V_TVALID_int_regslice) | (1'b0 == Input_1_V_TVALID_int_regslice) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state7_io = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state8 = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice) | (regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state8_io = ((1'b0 == Output_2_V_TREADY_int_regslice) | (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exponent_V_fu_113_p2 = (Input_2_V_TDATA_int_regslice + Input_1_V_TDATA_int_regslice);

assign icmp_ln1547_fu_143_p2 = (($signed(exponent_V_reg_239) > $signed(32'd2097152)) ? 1'b1 : 1'b0);

assign icmp_ln1548_fu_148_p2 = (($signed(exponent_V_reg_239) < $signed(32'd4292870144)) ? 1'b1 : 1'b0);

assign in_V_cast_fu_153_p3 = {{trunc_ln1_reg_245}, {11'd0}};

assign in_V_fu_160_p2 = (22'd0 - in_V_cast_fu_153_p3);

assign index_V_1_fu_181_p3 = ((tmp_reg_251[0:0] == 1'b1) ? index_V_reg_272 : trunc_ln1_reg_245);

assign index_V_fu_176_p2 = (11'd0 - trunc_ln_cast_reg_267);

assign lut_i_address0 = zext_ln573_fu_186_p1;

assign or_ln1548_fu_220_p2 = (icmp_ln1547_reg_256 | and_ln1548_fu_207_p2);

assign result_V_2_fu_225_p3 = ((or_ln1548_fu_220_p2[0:0] == 1'b1) ? select_ln1548_fu_212_p3 : zext_ln2130_fu_198_p1);

assign result_V_fu_191_p3 = {{lut_i_load_reg_282}, {9'd0}};

assign select_ln1548_fu_212_p3 = ((and_ln1548_fu_207_p2[0:0] == 1'b1) ? 20'd0 : 20'd524288);

assign trunc_ln712_1_fu_109_p1 = Input_2_V_TDATA_int_regslice[26:0];

assign trunc_ln712_fu_105_p1 = Input_1_V_TDATA_int_regslice[26:0];

assign xor_ln1547_fu_202_p2 = (icmp_ln1547_reg_256 ^ 1'd1);

assign zext_ln2130_1_fu_233_p1 = result_V_2_fu_225_p3;

assign zext_ln2130_fu_198_p1 = result_V_fu_191_p3;

assign zext_ln573_fu_186_p1 = index_V_1_fu_181_p3;

endmodule //Sigmoid_axi
