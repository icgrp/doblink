// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dotProduct_2_dotProduct_2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=1946,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=3013,HLS_SYN_LUT=1758,HLS_VERSION=2020_2}" *)

module dotProduct_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_pp0_stage0 = 24'd2;
parameter    ap_ST_fsm_pp0_stage1 = 24'd4;
parameter    ap_ST_fsm_pp0_stage2 = 24'd8;
parameter    ap_ST_fsm_pp0_stage3 = 24'd16;
parameter    ap_ST_fsm_state7 = 24'd32;
parameter    ap_ST_fsm_pp1_stage0 = 24'd64;
parameter    ap_ST_fsm_pp1_stage1 = 24'd128;
parameter    ap_ST_fsm_state22 = 24'd256;
parameter    ap_ST_fsm_state23 = 24'd512;
parameter    ap_ST_fsm_pp2_stage0 = 24'd1024;
parameter    ap_ST_fsm_pp2_stage1 = 24'd2048;
parameter    ap_ST_fsm_state38 = 24'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 24'd8192;
parameter    ap_ST_fsm_pp3_stage1 = 24'd16384;
parameter    ap_ST_fsm_state54 = 24'd32768;
parameter    ap_ST_fsm_state55 = 24'd65536;
parameter    ap_ST_fsm_state56 = 24'd131072;
parameter    ap_ST_fsm_state57 = 24'd262144;
parameter    ap_ST_fsm_state58 = 24'd524288;
parameter    ap_ST_fsm_pp4_stage0 = 24'd1048576;
parameter    ap_ST_fsm_pp4_stage1 = 24'd2097152;
parameter    ap_ST_fsm_state64 = 24'd4194304;
parameter    ap_ST_fsm_state65 = 24'd8388608;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] odd_even;
reg   [7:0] training_label_V;
reg   [8:0] feature_V_address0;
reg    feature_V_ce0;
reg    feature_V_we0;
reg   [15:0] feature_V_d0;
wire   [15:0] feature_V_q0;
reg   [8:0] param_V_address0;
reg    param_V_ce0;
reg    param_V_we0;
wire   [31:0] param_V_q0;
reg   [31:0] num_train;
reg   [31:0] epoch;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln33_reg_981;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    Input_2_V_TDATA_blk_n;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln93_reg_1226;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_pp4_stage1;
reg   [0:0] icmp_ln93_reg_1226_pp4_iter1_reg;
reg    ap_enable_reg_pp4_iter2;
reg   [7:0] i_1_reg_287;
reg   [9:0] indvar_flatten_reg_298;
reg   [7:0] i_3_reg_310;
reg   [2:0] j_2_reg_322;
reg   [31:0] result_V_1_reg_333;
reg   [9:0] indvar_flatten9_reg_346;
reg   [7:0] i_reg_357;
reg   [2:0] j_reg_369;
reg   [9:0] indvar_flatten19_reg_381;
reg   [7:0] i_2_reg_392;
reg   [2:0] j_1_reg_404;
reg   [8:0] i_4_reg_435;
reg   [15:0] reg_469;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [15:0] reg_474;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state9_pp1_stage1_iter0;
wire    ap_block_state11_pp1_stage1_iter1;
wire    ap_block_state13_pp1_stage1_iter2;
wire    ap_block_state15_pp1_stage1_iter3;
wire    ap_block_state17_pp1_stage1_iter4;
wire    ap_block_state19_pp1_stage1_iter5;
wire    ap_block_state21_pp1_stage1_iter6;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln51_reg_997;
reg   [0:0] icmp_ln51_reg_997_pp1_iter2_reg;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state25_pp2_stage1_iter0;
wire    ap_block_state27_pp2_stage1_iter1;
wire    ap_block_state29_pp2_stage1_iter2;
wire    ap_block_state31_pp2_stage1_iter3;
wire    ap_block_state33_pp2_stage1_iter4;
wire    ap_block_state35_pp2_stage1_iter5;
wire    ap_block_state37_pp2_stage1_iter6;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln69_reg_1072;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter2_reg;
reg  signed [31:0] reg_478;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter5;
wire    ap_block_state40_pp3_stage1_iter0;
wire    ap_block_state42_pp3_stage1_iter1;
wire    ap_block_state44_pp3_stage1_iter2;
wire    ap_block_state46_pp3_stage1_iter3;
wire    ap_block_state48_pp3_stage1_iter4;
wire    ap_block_state50_pp3_stage1_iter5;
wire    ap_block_state52_pp3_stage1_iter6;
wire    ap_block_pp3_stage1_11001;
reg   [0:0] icmp_ln77_reg_1132;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter5_reg;
wire    ap_block_state59_pp4_stage0_iter0;
reg    ap_block_state61_pp4_stage0_iter1;
reg    ap_block_state61_io;
reg    ap_block_state63_pp4_stage0_iter2;
reg    ap_block_state63_io;
reg    ap_block_pp4_stage0_11001;
wire    ap_block_state60_pp4_stage1_iter0;
reg    ap_block_state62_pp4_stage1_iter1;
reg    ap_block_state62_io;
reg    ap_block_pp4_stage1_11001;
wire  signed [50:0] sext_ln69_fu_519_p1;
reg  signed [50:0] sext_ln69_reg_971;
wire   [7:0] add_ln33_fu_523_p2;
reg   [7:0] add_ln33_reg_976;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln33_fu_529_p2;
wire   [6:0] trunc_ln41_fu_535_p1;
reg   [6:0] trunc_ln41_reg_985;
wire   [8:0] shl_ln1_fu_539_p3;
reg   [8:0] shl_ln1_reg_990;
wire   [0:0] icmp_ln51_fu_591_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_state14_pp1_stage0_iter3;
wire    ap_block_state16_pp1_stage0_iter4;
wire    ap_block_state18_pp1_stage0_iter5;
wire    ap_block_state20_pp1_stage0_iter6;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln51_reg_997_pp1_iter1_reg;
reg   [0:0] icmp_ln51_reg_997_pp1_iter3_reg;
reg   [0:0] icmp_ln51_reg_997_pp1_iter4_reg;
reg   [0:0] icmp_ln51_reg_997_pp1_iter5_reg;
reg   [0:0] icmp_ln51_reg_997_pp1_iter6_reg;
wire   [7:0] add_ln51_1_fu_597_p2;
reg   [7:0] add_ln51_1_reg_1001;
wire   [9:0] add_ln51_fu_603_p2;
reg   [9:0] add_ln51_reg_1006;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] select_ln51_fu_615_p3;
reg   [2:0] select_ln51_reg_1011;
wire   [7:0] select_ln51_1_fu_623_p3;
reg   [7:0] select_ln51_1_reg_1017;
wire   [6:0] trunc_ln51_fu_630_p1;
reg   [6:0] trunc_ln51_reg_1022;
wire   [8:0] add_ln56_fu_644_p2;
reg   [8:0] add_ln56_reg_1027;
wire   [2:0] add_ln54_fu_650_p2;
reg   [2:0] add_ln54_reg_1032;
reg    ap_enable_reg_pp1_iter1;
reg   [31:0] term_reg_1057;
wire   [31:0] result_V_fu_692_p2;
reg    ap_enable_reg_pp1_iter6;
wire   [9:0] add_ln69_fu_697_p2;
reg   [9:0] add_ln69_reg_1067;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_state28_pp2_stage0_iter2;
wire    ap_block_state30_pp2_stage0_iter3;
wire    ap_block_state32_pp2_stage0_iter4;
wire    ap_block_state34_pp2_stage0_iter5;
wire    ap_block_state36_pp2_stage0_iter6;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln69_fu_703_p2;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter1_reg;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter3_reg;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter4_reg;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter5_reg;
reg   [0:0] icmp_ln69_reg_1072_pp2_iter6_reg;
wire   [7:0] add_ln69_1_fu_709_p2;
reg   [7:0] add_ln69_1_reg_1076;
wire   [2:0] select_ln69_fu_721_p3;
reg   [2:0] select_ln69_reg_1081;
wire   [7:0] select_ln69_1_fu_729_p3;
reg   [7:0] select_ln69_1_reg_1087;
wire   [6:0] trunc_ln69_fu_736_p1;
reg   [6:0] trunc_ln69_reg_1092;
wire   [8:0] add_ln73_fu_750_p2;
reg   [8:0] add_ln73_reg_1097;
wire   [2:0] add_ln72_fu_756_p2;
reg   [2:0] add_ln72_reg_1102;
reg    ap_enable_reg_pp2_iter1;
wire   [63:0] zext_ln727_fu_761_p1;
reg   [63:0] zext_ln727_reg_1107;
reg   [63:0] zext_ln727_reg_1107_pp2_iter2_reg;
reg   [63:0] zext_ln727_reg_1107_pp2_iter3_reg;
reg   [63:0] zext_ln727_reg_1107_pp2_iter4_reg;
reg   [63:0] zext_ln727_reg_1107_pp2_iter5_reg;
reg   [31:0] trunc_ln_reg_1122;
wire   [9:0] add_ln77_fu_792_p2;
reg   [9:0] add_ln77_reg_1127;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state39_pp3_stage0_iter0;
wire    ap_block_state41_pp3_stage0_iter1;
wire    ap_block_state43_pp3_stage0_iter2;
wire    ap_block_state45_pp3_stage0_iter3;
wire    ap_block_state47_pp3_stage0_iter4;
wire    ap_block_state49_pp3_stage0_iter5;
wire    ap_block_state51_pp3_stage0_iter6;
wire    ap_block_state53_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln77_fu_798_p2;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter1_reg;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter2_reg;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter3_reg;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter4_reg;
reg   [0:0] icmp_ln77_reg_1132_pp3_iter6_reg;
wire   [7:0] add_ln77_1_fu_804_p2;
reg   [7:0] add_ln77_1_reg_1136;
wire   [2:0] select_ln77_fu_816_p3;
reg   [2:0] select_ln77_reg_1141;
wire   [7:0] select_ln77_1_fu_824_p3;
reg   [7:0] select_ln77_1_reg_1147;
wire   [6:0] trunc_ln77_fu_831_p1;
reg   [6:0] trunc_ln77_reg_1152;
wire   [8:0] add_ln82_fu_845_p2;
reg   [8:0] add_ln82_reg_1157;
wire   [2:0] add_ln80_fu_851_p2;
reg   [2:0] add_ln80_reg_1162;
reg    ap_enable_reg_pp3_iter1;
reg   [8:0] param_V_addr_reg_1172;
reg   [8:0] param_V_addr_reg_1172_pp3_iter2_reg;
reg   [8:0] param_V_addr_reg_1172_pp3_iter3_reg;
reg   [8:0] param_V_addr_reg_1172_pp3_iter4_reg;
reg   [8:0] param_V_addr_reg_1172_pp3_iter5_reg;
reg   [8:0] param_V_addr_reg_1172_pp3_iter6_reg;
wire   [31:0] grad_V_q0;
reg  signed [31:0] grad_V_load_reg_1177;
reg    ap_enable_reg_pp3_iter2;
reg   [31:0] tmp_V_1_reg_1187;
wire   [31:0] add_ln703_fu_880_p2;
reg   [31:0] add_ln703_reg_1192;
wire   [31:0] add_ln87_fu_889_p2;
reg   [31:0] add_ln87_reg_1197;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln88_fu_895_p2;
reg   [0:0] icmp_ln88_reg_1203;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire   [31:0] add_ln90_fu_904_p2;
reg   [31:0] add_ln90_reg_1212;
wire   [0:0] icmp_ln92_fu_916_p2;
wire    ap_CS_fsm_state58;
wire   [8:0] add_ln93_fu_928_p2;
reg   [8:0] add_ln93_reg_1221;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln93_fu_934_p2;
wire   [8:0] shl_ln98_fu_940_p2;
reg   [8:0] shl_ln98_reg_1230;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage1_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_condition_pp1_exit_iter5_state19;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
wire    ap_CS_fsm_state38;
wire    ap_block_pp3_stage1_subdone;
reg    ap_condition_pp3_exit_iter0_state40;
wire    ap_block_pp3_stage0_subdone;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state59;
reg    ap_block_pp4_stage1_subdone;
reg   [8:0] grad_V_address0;
reg    grad_V_ce0;
reg    grad_V_we0;
reg   [7:0] ap_phi_mux_i_1_phi_fu_291_p4;
wire    ap_block_pp0_stage0;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_302_p4;
wire    ap_block_pp1_stage0;
reg   [7:0] ap_phi_mux_i_3_phi_fu_314_p4;
reg   [2:0] ap_phi_mux_j_2_phi_fu_326_p4;
wire    ap_block_pp1_stage1;
reg   [9:0] ap_phi_mux_indvar_flatten9_phi_fu_350_p4;
wire    ap_block_pp2_stage0;
reg   [7:0] ap_phi_mux_i_phi_fu_361_p4;
reg   [2:0] ap_phi_mux_j_phi_fu_373_p4;
wire    ap_block_pp2_stage1;
reg   [9:0] ap_phi_mux_indvar_flatten19_phi_fu_385_p4;
wire    ap_block_pp3_stage0;
reg   [7:0] ap_phi_mux_i_2_phi_fu_396_p4;
reg   [2:0] ap_phi_mux_j_1_phi_fu_408_p4;
wire    ap_block_pp3_stage1;
reg   [31:0] num_train_new_0_reg_415;
wire    ap_CS_fsm_state57;
reg   [31:0] empty_18_reg_426;
reg   [8:0] ap_phi_mux_i_4_phi_fu_439_p4;
reg   [0:0] storemerge_reg_446;
wire    ap_CS_fsm_state64;
wire   [63:0] zext_ln674_fu_546_p1;
wire   [63:0] zext_ln340_fu_561_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln674_1_fu_571_p1;
wire   [63:0] zext_ln340_1_fu_586_p1;
wire   [63:0] zext_ln727_1_fu_655_p1;
wire   [63:0] zext_ln1118_fu_856_p1;
wire   [63:0] zext_ln640_fu_946_p1;
wire   [63:0] zext_ln640_1_fu_956_p1;
wire    ap_CS_fsm_state65;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state65;
wire   [7:0] tmp_4_fu_487_p1;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp4_stage1_01001;
wire   [15:0] p_Result_1_fu_551_p1;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] p_Result_3_fu_576_p1;
wire   [26:0] shl_ln_fu_501_p3;
wire   [31:0] zext_ln703_fu_509_p1;
wire   [31:0] scale_V_fu_513_p2;
wire   [8:0] or_ln42_fu_556_p2;
wire   [8:0] or_ln45_fu_566_p2;
wire   [8:0] or_ln46_fu_581_p2;
wire   [0:0] icmp_ln54_fu_609_p2;
wire   [8:0] j_2_cast_fu_641_p1;
wire   [8:0] p_mid2_fu_634_p3;
wire  signed [22:0] shl_ln728_2_fu_660_p3;
wire   [50:0] grp_fu_676_p2;
wire   [0:0] icmp_ln72_fu_715_p2;
wire   [8:0] j_cast_fu_747_p1;
wire   [8:0] p_mid_fu_740_p3;
wire  signed [22:0] shl_ln728_1_fu_765_p3;
wire  signed [31:0] grp_fu_777_p1;
wire   [50:0] grp_fu_777_p2;
wire   [0:0] icmp_ln80_fu_810_p2;
wire   [8:0] j_1_cast_fu_842_p1;
wire   [8:0] p_mid1_fu_835_p3;
wire  signed [31:0] grp_fu_864_p1;
wire   [50:0] grp_fu_864_p2;
wire   [8:0] or_ln99_fu_951_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 odd_even = 1'd0;
#0 training_label_V = 8'd0;
#0 num_train = 32'd0;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 icmp_ln33_reg_981 = 1'd0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 icmp_ln93_reg_1226 = 1'd0;
#0 icmp_ln93_reg_1226_pp4_iter1_reg = 1'd0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 i_1_reg_287 = 8'd0;
#0 indvar_flatten_reg_298 = 10'd0;
#0 i_3_reg_310 = 8'd0;
#0 j_2_reg_322 = 3'd0;
#0 result_V_1_reg_333 = 32'd0;
#0 indvar_flatten9_reg_346 = 10'd0;
#0 i_reg_357 = 8'd0;
#0 j_reg_369 = 3'd0;
#0 indvar_flatten19_reg_381 = 10'd0;
#0 i_2_reg_392 = 8'd0;
#0 j_1_reg_404 = 3'd0;
#0 i_4_reg_435 = 9'd0;
#0 reg_469 = 16'd0;
#0 reg_474 = 16'd0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 icmp_ln51_reg_997 = 1'd0;
#0 icmp_ln51_reg_997_pp1_iter2_reg = 1'd0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 icmp_ln69_reg_1072 = 1'd0;
#0 icmp_ln69_reg_1072_pp2_iter2_reg = 1'd0;
#0 reg_478 = 32'd0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 icmp_ln77_reg_1132 = 1'd0;
#0 icmp_ln77_reg_1132_pp3_iter5_reg = 1'd0;
#0 sext_ln69_reg_971 = 51'd0;
#0 add_ln33_reg_976 = 8'd0;
#0 trunc_ln41_reg_985 = 7'd0;
#0 shl_ln1_reg_990 = 9'd0;
#0 icmp_ln51_reg_997_pp1_iter1_reg = 1'd0;
#0 icmp_ln51_reg_997_pp1_iter3_reg = 1'd0;
#0 icmp_ln51_reg_997_pp1_iter4_reg = 1'd0;
#0 icmp_ln51_reg_997_pp1_iter5_reg = 1'd0;
#0 icmp_ln51_reg_997_pp1_iter6_reg = 1'd0;
#0 add_ln51_1_reg_1001 = 8'd0;
#0 add_ln51_reg_1006 = 10'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 select_ln51_reg_1011 = 3'd0;
#0 select_ln51_1_reg_1017 = 8'd0;
#0 trunc_ln51_reg_1022 = 7'd0;
#0 add_ln56_reg_1027 = 9'd0;
#0 add_ln54_reg_1032 = 3'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 term_reg_1057 = 32'd0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 add_ln69_reg_1067 = 10'd0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 icmp_ln69_reg_1072_pp2_iter1_reg = 1'd0;
#0 icmp_ln69_reg_1072_pp2_iter3_reg = 1'd0;
#0 icmp_ln69_reg_1072_pp2_iter4_reg = 1'd0;
#0 icmp_ln69_reg_1072_pp2_iter5_reg = 1'd0;
#0 icmp_ln69_reg_1072_pp2_iter6_reg = 1'd0;
#0 add_ln69_1_reg_1076 = 8'd0;
#0 select_ln69_reg_1081 = 3'd0;
#0 select_ln69_1_reg_1087 = 8'd0;
#0 trunc_ln69_reg_1092 = 7'd0;
#0 add_ln73_reg_1097 = 9'd0;
#0 add_ln72_reg_1102 = 3'd0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 zext_ln727_reg_1107 = 64'd0;
#0 zext_ln727_reg_1107_pp2_iter2_reg = 64'd0;
#0 zext_ln727_reg_1107_pp2_iter3_reg = 64'd0;
#0 zext_ln727_reg_1107_pp2_iter4_reg = 64'd0;
#0 zext_ln727_reg_1107_pp2_iter5_reg = 64'd0;
#0 trunc_ln_reg_1122 = 32'd0;
#0 add_ln77_reg_1127 = 10'd0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 icmp_ln77_reg_1132_pp3_iter1_reg = 1'd0;
#0 icmp_ln77_reg_1132_pp3_iter2_reg = 1'd0;
#0 icmp_ln77_reg_1132_pp3_iter3_reg = 1'd0;
#0 icmp_ln77_reg_1132_pp3_iter4_reg = 1'd0;
#0 icmp_ln77_reg_1132_pp3_iter6_reg = 1'd0;
#0 add_ln77_1_reg_1136 = 8'd0;
#0 select_ln77_reg_1141 = 3'd0;
#0 select_ln77_1_reg_1147 = 8'd0;
#0 trunc_ln77_reg_1152 = 7'd0;
#0 add_ln82_reg_1157 = 9'd0;
#0 add_ln80_reg_1162 = 3'd0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 param_V_addr_reg_1172 = 9'd0;
#0 param_V_addr_reg_1172_pp3_iter2_reg = 9'd0;
#0 param_V_addr_reg_1172_pp3_iter3_reg = 9'd0;
#0 param_V_addr_reg_1172_pp3_iter4_reg = 9'd0;
#0 param_V_addr_reg_1172_pp3_iter5_reg = 9'd0;
#0 param_V_addr_reg_1172_pp3_iter6_reg = 9'd0;
#0 grad_V_load_reg_1177 = 32'd0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 tmp_V_1_reg_1187 = 32'd0;
#0 add_ln703_reg_1192 = 32'd0;
#0 add_ln87_reg_1197 = 32'd0;
#0 icmp_ln88_reg_1203 = 1'd0;
#0 add_ln90_reg_1212 = 32'd0;
#0 add_ln93_reg_1221 = 9'd0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 shl_ln98_reg_1230 = 9'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 num_train_new_0_reg_415 = 32'd0;
#0 empty_18_reg_426 = 32'd0;
#0 storemerge_reg_446 = 1'd0;
end

dotProduct_2_feature_V #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
feature_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(feature_V_address0),
    .ce0(feature_V_ce0),
    .we0(feature_V_we0),
    .d0(feature_V_d0),
    .q0(feature_V_q0)
);

dotProduct_2_param_V #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
param_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(param_V_address0),
    .ce0(param_V_ce0),
    .we0(param_V_we0),
    .d0(add_ln703_reg_1192),
    .q0(param_V_q0)
);

dotProduct_2_grad_V #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
grad_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grad_V_address0),
    .ce0(grad_V_ce0),
    .we0(grad_V_we0),
    .d0(trunc_ln_reg_1122),
    .q0(grad_V_q0)
);

dotProduct_2_mul_32s_23s_51_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 51 ))
mul_32s_23s_51_7_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_478),
    .din1(shl_ln728_2_fu_660_p3),
    .ce(1'b1),
    .dout(grp_fu_676_p2)
);

dotProduct_2_mul_23s_32s_51_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
mul_23s_32s_51_7_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(shl_ln728_1_fu_765_p3),
    .din1(grp_fu_777_p1),
    .ce(1'b1),
    .dout(grp_fu_777_p2)
);

dotProduct_2_mul_32s_32s_51_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
mul_32s_32s_51_7_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grad_V_load_reg_1177),
    .din1(grp_fu_864_p1),
    .ce(1'b1),
    .dout(grp_fu_864_p2)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(result_V_1_reg_333),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

dotProduct_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(param_V_q0),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln33_reg_976 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_ln33_reg_976 <= add_ln33_fu_523_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln51_1_reg_1001 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln51_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            add_ln51_1_reg_1001 <= add_ln51_1_fu_597_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln51_reg_1006 <= 10'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            add_ln51_reg_1006 <= add_ln51_fu_603_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln54_reg_1032 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            add_ln54_reg_1032 <= add_ln54_fu_650_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln56_reg_1027 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            add_ln56_reg_1027 <= add_ln56_fu_644_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln69_1_reg_1076 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln69_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            add_ln69_1_reg_1076 <= add_ln69_1_fu_709_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln69_reg_1067 <= 10'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            add_ln69_reg_1067 <= add_ln69_fu_697_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln703_reg_1192 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln77_reg_1132_pp3_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            add_ln703_reg_1192 <= add_ln703_fu_880_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln72_reg_1102 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            add_ln72_reg_1102 <= add_ln72_fu_756_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln73_reg_1097 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            add_ln73_reg_1097 <= add_ln73_fu_750_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln77_1_reg_1136 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln77_fu_798_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            add_ln77_1_reg_1136 <= add_ln77_1_fu_804_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln77_reg_1127 <= 10'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            add_ln77_reg_1127 <= add_ln77_fu_792_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln80_reg_1162 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            add_ln80_reg_1162 <= add_ln80_fu_851_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln82_reg_1157 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            add_ln82_reg_1157 <= add_ln82_fu_845_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln87_reg_1197 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            add_ln87_reg_1197 <= add_ln87_fu_889_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln90_reg_1212 <= 32'd0;
    end else begin
        if (((icmp_ln88_reg_1203 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
            add_ln90_reg_1212 <= add_ln90_fu_904_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        add_ln93_reg_1221 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            add_ln93_reg_1221 <= add_ln93_fu_928_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter4 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter5_state19) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_condition_pp1_exit_iter5_state19) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter4;
        end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp2_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state40) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state40)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state40);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1)))) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state59) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln92_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage1_subdone) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((icmp_ln92_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        empty_18_reg_426 <= 32'd0;
    end else begin
        if (((icmp_ln88_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
            empty_18_reg_426 <= epoch;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            empty_18_reg_426 <= add_ln90_reg_1212;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        epoch <= 32'd0;
    end else begin
        if (((icmp_ln88_reg_1203 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
            epoch <= add_ln90_fu_904_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grad_V_load_reg_1177 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln77_reg_1132_pp3_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            grad_V_load_reg_1177 <= grad_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_1_reg_287 <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            i_1_reg_287 <= 8'd0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_981 == 1'd0))) begin
            i_1_reg_287 <= add_ln33_reg_976;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_2_reg_392 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            i_2_reg_392 <= 8'd0;
        end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            i_2_reg_392 <= select_ln77_1_reg_1147;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_3_reg_310 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            i_3_reg_310 <= 8'd0;
        end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            i_3_reg_310 <= select_ln51_1_reg_1017;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_4_reg_435 <= 9'd0;
    end else begin
        if (((icmp_ln92_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
            i_4_reg_435 <= 9'd0;
        end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
            i_4_reg_435 <= add_ln93_reg_1221;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_reg_357 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            i_reg_357 <= select_ln69_1_reg_1087;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            i_reg_357 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln33_reg_981 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln33_reg_981 <= icmp_ln33_fu_529_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997 <= icmp_ln51_fu_591_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter1_reg <= icmp_ln51_reg_997;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter2_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter2_reg <= icmp_ln51_reg_997_pp1_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter3_reg <= icmp_ln51_reg_997_pp1_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter4_reg <= icmp_ln51_reg_997_pp1_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter5_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter5_reg <= icmp_ln51_reg_997_pp1_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln51_reg_997_pp1_iter6_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            icmp_ln51_reg_997_pp1_iter6_reg <= icmp_ln51_reg_997_pp1_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072 <= icmp_ln69_fu_703_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter1_reg <= icmp_ln69_reg_1072;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter2_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter2_reg <= icmp_ln69_reg_1072_pp2_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter3_reg <= icmp_ln69_reg_1072_pp2_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter4_reg <= icmp_ln69_reg_1072_pp2_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter5_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter5_reg <= icmp_ln69_reg_1072_pp2_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln69_reg_1072_pp2_iter6_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            icmp_ln69_reg_1072_pp2_iter6_reg <= icmp_ln69_reg_1072_pp2_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132 <= icmp_ln77_fu_798_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter1_reg <= icmp_ln77_reg_1132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter2_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter2_reg <= icmp_ln77_reg_1132_pp3_iter1_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter3_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter3_reg <= icmp_ln77_reg_1132_pp3_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter4_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter4_reg <= icmp_ln77_reg_1132_pp3_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter5_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter5_reg <= icmp_ln77_reg_1132_pp3_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln77_reg_1132_pp3_iter6_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            icmp_ln77_reg_1132_pp3_iter6_reg <= icmp_ln77_reg_1132_pp3_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln88_reg_1203 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state55)) begin
            icmp_ln88_reg_1203 <= icmp_ln88_fu_895_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln93_reg_1226 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            icmp_ln93_reg_1226 <= icmp_ln93_fu_934_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln93_reg_1226_pp4_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            icmp_ln93_reg_1226_pp4_iter1_reg <= icmp_ln93_reg_1226;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        indvar_flatten19_reg_381 <= 10'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            indvar_flatten19_reg_381 <= 10'd0;
        end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            indvar_flatten19_reg_381 <= add_ln77_reg_1127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        indvar_flatten9_reg_346 <= 10'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            indvar_flatten9_reg_346 <= add_ln69_reg_1067;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            indvar_flatten9_reg_346 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        indvar_flatten_reg_298 <= 10'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            indvar_flatten_reg_298 <= 10'd0;
        end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            indvar_flatten_reg_298 <= add_ln51_reg_1006;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        j_1_reg_404 <= 3'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            j_1_reg_404 <= 3'd0;
        end else if (((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            j_1_reg_404 <= add_ln80_reg_1162;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        j_2_reg_322 <= 3'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            j_2_reg_322 <= 3'd0;
        end else if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            j_2_reg_322 <= add_ln54_reg_1032;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        j_reg_369 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            j_reg_369 <= add_ln72_reg_1102;
        end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            j_reg_369 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_train <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            num_train <= num_train_new_0_reg_415;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_train_new_0_reg_415 <= 32'd0;
    end else begin
        if (((icmp_ln88_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
            num_train_new_0_reg_415 <= add_ln87_reg_1197;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            num_train_new_0_reg_415 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        odd_even <= 1'd0;
    end else begin
        if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state65))) begin
            odd_even <= storemerge_reg_446;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln77_reg_1132_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172 <= zext_ln1118_fu_856_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172_pp3_iter2_reg <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172_pp3_iter2_reg <= param_V_addr_reg_1172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172_pp3_iter3_reg <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172_pp3_iter3_reg <= param_V_addr_reg_1172_pp3_iter2_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172_pp3_iter4_reg <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172_pp3_iter4_reg <= param_V_addr_reg_1172_pp3_iter3_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172_pp3_iter5_reg <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172_pp3_iter5_reg <= param_V_addr_reg_1172_pp3_iter4_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        param_V_addr_reg_1172_pp3_iter6_reg <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            param_V_addr_reg_1172_pp3_iter6_reg <= param_V_addr_reg_1172_pp3_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_469 <= 16'd0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln33_reg_981 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_981 == 1'd0)))) begin
            reg_469 <= {{Input_1_V_TDATA_int_regslice[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_474 <= 16'd0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln69_reg_1072_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln51_reg_997_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            reg_474 <= feature_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        reg_478 <= 32'd0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln77_reg_1132_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln51_reg_997_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            reg_478 <= param_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        result_V_1_reg_333 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            result_V_1_reg_333 <= 32'd0;
        end else if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter6 == 1'b1) & (icmp_ln51_reg_997_pp1_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            result_V_1_reg_333 <= result_V_fu_692_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln51_1_reg_1017 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            select_ln51_1_reg_1017 <= select_ln51_1_fu_623_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln51_reg_1011 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            select_ln51_reg_1011 <= select_ln51_fu_615_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln69_1_reg_1087 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            select_ln69_1_reg_1087 <= select_ln69_1_fu_729_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln69_reg_1081 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            select_ln69_reg_1081 <= select_ln69_fu_721_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln77_1_reg_1147 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            select_ln77_1_reg_1147 <= select_ln77_1_fu_824_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        select_ln77_reg_1141 <= 3'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            select_ln77_reg_1141 <= select_ln77_fu_816_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sext_ln69_reg_971 <= 51'd0;
    end else begin
        if (((odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            sext_ln69_reg_971 <= sext_ln69_fu_519_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                shl_ln1_reg_990[2] <= 1'b0;
        shl_ln1_reg_990[3] <= 1'b0;
        shl_ln1_reg_990[4] <= 1'b0;
        shl_ln1_reg_990[5] <= 1'b0;
        shl_ln1_reg_990[6] <= 1'b0;
        shl_ln1_reg_990[7] <= 1'b0;
        shl_ln1_reg_990[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_981 == 1'd0))) begin
                        shl_ln1_reg_990[8 : 2] <= shl_ln1_fu_539_p3[8 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                shl_ln98_reg_1230[1] <= 1'b0;
        shl_ln98_reg_1230[2] <= 1'b0;
        shl_ln98_reg_1230[3] <= 1'b0;
        shl_ln98_reg_1230[4] <= 1'b0;
        shl_ln98_reg_1230[5] <= 1'b0;
        shl_ln98_reg_1230[6] <= 1'b0;
        shl_ln98_reg_1230[7] <= 1'b0;
        shl_ln98_reg_1230[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln93_fu_934_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
                        shl_ln98_reg_1230[8 : 1] <= shl_ln98_fu_940_p2[8 : 1];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        storemerge_reg_446 <= 1'd0;
    end else begin
        if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state23))) begin
            storemerge_reg_446 <= 1'd1;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            storemerge_reg_446 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        term_reg_1057 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln51_reg_997_pp1_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            term_reg_1057 <= {{grp_fu_676_p2[50:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tmp_V_1_reg_1187 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln77_reg_1132_pp3_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            tmp_V_1_reg_1187 <= {{grp_fu_864_p2[50:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        training_label_V <= 8'd0;
    end else begin
        if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            training_label_V <= tmp_4_fu_487_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln41_reg_985 <= 7'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            trunc_ln41_reg_985 <= trunc_ln41_fu_535_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln51_reg_1022 <= 7'd0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            trunc_ln51_reg_1022 <= trunc_ln51_fu_630_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln69_reg_1092 <= 7'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            trunc_ln69_reg_1092 <= trunc_ln69_fu_736_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln77_reg_1152 <= 7'd0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_11001) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            trunc_ln77_reg_1152 <= trunc_ln77_fu_831_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trunc_ln_reg_1122 <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln69_reg_1072_pp2_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            trunc_ln_reg_1122 <= {{grp_fu_777_p2[50:19]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln727_reg_1107[0] <= 1'b0;
        zext_ln727_reg_1107[1] <= 1'b0;
        zext_ln727_reg_1107[2] <= 1'b0;
        zext_ln727_reg_1107[3] <= 1'b0;
        zext_ln727_reg_1107[4] <= 1'b0;
        zext_ln727_reg_1107[5] <= 1'b0;
        zext_ln727_reg_1107[6] <= 1'b0;
        zext_ln727_reg_1107[7] <= 1'b0;
        zext_ln727_reg_1107[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln69_reg_1072_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                        zext_ln727_reg_1107[8 : 0] <= zext_ln727_fu_761_p1[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln727_reg_1107_pp2_iter2_reg[0] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[1] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[2] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[3] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[4] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[5] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[6] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[7] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter2_reg[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                        zext_ln727_reg_1107_pp2_iter2_reg[8 : 0] <= zext_ln727_reg_1107[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln727_reg_1107_pp2_iter3_reg[0] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[1] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[2] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[3] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[4] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[5] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[6] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[7] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter3_reg[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                        zext_ln727_reg_1107_pp2_iter3_reg[8 : 0] <= zext_ln727_reg_1107_pp2_iter2_reg[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln727_reg_1107_pp2_iter4_reg[0] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[1] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[2] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[3] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[4] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[5] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[6] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[7] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter4_reg[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                        zext_ln727_reg_1107_pp2_iter4_reg[8 : 0] <= zext_ln727_reg_1107_pp2_iter3_reg[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
                zext_ln727_reg_1107_pp2_iter5_reg[0] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[1] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[2] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[3] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[4] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[5] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[6] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[7] <= 1'b0;
        zext_ln727_reg_1107_pp2_iter5_reg[8] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                        zext_ln727_reg_1107_pp2_iter5_reg[8 : 0] <= zext_ln727_reg_1107_pp2_iter4_reg[8 : 0];
        end
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_981 == 1'd0)) | ((odd_even == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln33_reg_981 == 1'd0)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln33_reg_981 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_981 == 1'd0)) | (~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((odd_even == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state22))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_529_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0))) begin
        ap_condition_pp1_exit_iter5_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter5_state19 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_subdone) & (icmp_ln51_reg_997 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_703_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_reg_1132 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state40 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state40 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_934_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state59 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state59 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_981 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_291_p4 = add_ln33_reg_976;
    end else begin
        ap_phi_mux_i_1_phi_fu_291_p4 = i_1_reg_287;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_2_phi_fu_396_p4 = select_ln77_1_reg_1147;
    end else begin
        ap_phi_mux_i_2_phi_fu_396_p4 = i_2_reg_392;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_3_phi_fu_314_p4 = select_ln51_1_reg_1017;
    end else begin
        ap_phi_mux_i_3_phi_fu_314_p4 = i_3_reg_310;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ap_phi_mux_i_4_phi_fu_439_p4 = add_ln93_reg_1221;
    end else begin
        ap_phi_mux_i_4_phi_fu_439_p4 = i_4_reg_435;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_phi_fu_361_p4 = select_ln69_1_reg_1087;
    end else begin
        ap_phi_mux_i_phi_fu_361_p4 = i_reg_357;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_indvar_flatten19_phi_fu_385_p4 = add_ln77_reg_1127;
    end else begin
        ap_phi_mux_indvar_flatten19_phi_fu_385_p4 = indvar_flatten19_reg_381;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten9_phi_fu_350_p4 = add_ln69_reg_1067;
    end else begin
        ap_phi_mux_indvar_flatten9_phi_fu_350_p4 = indvar_flatten9_reg_346;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_302_p4 = add_ln51_reg_1006;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_302_p4 = indvar_flatten_reg_298;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln77_reg_1132_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        ap_phi_mux_j_1_phi_fu_408_p4 = add_ln80_reg_1162;
    end else begin
        ap_phi_mux_j_1_phi_fu_408_p4 = j_1_reg_404;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln51_reg_997_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        ap_phi_mux_j_2_phi_fu_326_p4 = add_ln54_reg_1032;
    end else begin
        ap_phi_mux_j_2_phi_fu_326_p4 = j_2_reg_322;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln69_reg_1072_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        ap_phi_mux_j_phi_fu_373_p4 = add_ln72_reg_1102;
    end else begin
        ap_phi_mux_j_phi_fu_373_p4 = j_reg_369;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        feature_V_address0 = zext_ln727_fu_761_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        feature_V_address0 = zext_ln727_1_fu_655_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feature_V_address0 = zext_ln340_1_fu_586_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        feature_V_address0 = zext_ln674_1_fu_571_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        feature_V_address0 = zext_ln340_fu_561_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        feature_V_address0 = zext_ln674_fu_546_p1;
    end else begin
        feature_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        feature_V_ce0 = 1'b1;
    end else begin
        feature_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        feature_V_d0 = p_Result_3_fu_576_p1;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        feature_V_d0 = reg_469;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        feature_V_d0 = p_Result_1_fu_551_p1;
    end else begin
        feature_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln33_reg_981 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_981 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln33_reg_981 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_981 == 1'd0)))) begin
        feature_V_we0 = 1'b1;
    end else begin
        feature_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        grad_V_address0 = zext_ln1118_fu_856_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grad_V_address0 = zext_ln727_reg_1107_pp2_iter5_reg;
    end else begin
        grad_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        grad_V_ce0 = 1'b1;
    end else begin
        grad_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter6 == 1'b1) & (icmp_ln69_reg_1072_pp2_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grad_V_we0 = 1'b1;
    end else begin
        grad_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        param_V_address0 = zext_ln640_1_fu_956_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        param_V_address0 = zext_ln640_fu_946_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        param_V_address0 = param_V_addr_reg_1172_pp3_iter6_reg;
    end else if (((1'b0 == ap_block_pp3_stage1) & (ap_enable_reg_pp3_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
        param_V_address0 = param_V_addr_reg_1172_pp3_iter3_reg;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        param_V_address0 = zext_ln727_1_fu_655_p1;
    end else begin
        param_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        param_V_ce0 = 1'b1;
    end else begin
        param_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1) & (icmp_ln77_reg_1132_pp3_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        param_V_we0 = 1'b1;
    end else begin
        param_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((~((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_529_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_529_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln69_fu_703_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln69_fu_703_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter6 == 1'b1) & (ap_enable_reg_pp2_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter6 == 1'b1) & (ap_enable_reg_pp2_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln77_reg_1132 == 1'd1)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln77_reg_1132 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln88_reg_1203 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln92_fu_916_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln93_fu_934_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln93_fu_934_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln33_fu_523_p2 = (ap_phi_mux_i_1_phi_fu_291_p4 + 8'd1);

assign add_ln51_1_fu_597_p2 = (ap_phi_mux_i_3_phi_fu_314_p4 + 8'd1);

assign add_ln51_fu_603_p2 = (indvar_flatten_reg_298 + 10'd1);

assign add_ln54_fu_650_p2 = (select_ln51_reg_1011 + 3'd1);

assign add_ln56_fu_644_p2 = (j_2_cast_fu_641_p1 + p_mid2_fu_634_p3);

assign add_ln69_1_fu_709_p2 = (ap_phi_mux_i_phi_fu_361_p4 + 8'd1);

assign add_ln69_fu_697_p2 = (ap_phi_mux_indvar_flatten9_phi_fu_350_p4 + 10'd1);

assign add_ln703_fu_880_p2 = ($signed(reg_478) + $signed(tmp_V_1_reg_1187));

assign add_ln72_fu_756_p2 = (select_ln69_reg_1081 + 3'd1);

assign add_ln73_fu_750_p2 = (j_cast_fu_747_p1 + p_mid_fu_740_p3);

assign add_ln77_1_fu_804_p2 = (ap_phi_mux_i_2_phi_fu_396_p4 + 8'd1);

assign add_ln77_fu_792_p2 = (ap_phi_mux_indvar_flatten19_phi_fu_385_p4 + 10'd1);

assign add_ln80_fu_851_p2 = (select_ln77_reg_1141 + 3'd1);

assign add_ln82_fu_845_p2 = (j_1_cast_fu_842_p1 + p_mid1_fu_835_p3);

assign add_ln87_fu_889_p2 = (num_train + 32'd1);

assign add_ln90_fu_904_p2 = (epoch + 32'd1);

assign add_ln93_fu_928_p2 = (ap_phi_mux_i_4_phi_fu_439_p4 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0)) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_enable_reg_pp4_iter2 == 1'b1) & ((1'b1 == ap_block_state63_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state61_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_enable_reg_pp4_iter2 == 1'b1) & ((1'b1 == ap_block_state63_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state61_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226 == 1'd0)))));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state62_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = ((ap_enable_reg_pp4_iter1 == 1'b1) & ((1'b1 == ap_block_state62_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((odd_even == 1'd1) & (1'b0 == Input_2_V_TVALID_int_regslice)));
end

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

assign ap_block_state40_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((1'b0 == Input_1_V_TVALID_int_regslice) & (icmp_ln33_reg_981 == 1'd0));
end

assign ap_block_state60_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226 == 1'd0));
end

always @ (*) begin
    ap_block_state61_pp4_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226 == 1'd0));
end

always @ (*) begin
    ap_block_state62_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state62_pp4_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state63_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state63_pp4_stage0_iter2 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln93_reg_1226_pp4_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state65 = ((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_777_p1 = sext_ln69_reg_971;

assign grp_fu_864_p1 = 51'd2251798421176320;

assign icmp_ln33_fu_529_p2 = ((ap_phi_mux_i_1_phi_fu_291_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_591_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_302_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_609_p2 = ((ap_phi_mux_j_2_phi_fu_326_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_703_p2 = ((ap_phi_mux_indvar_flatten9_phi_fu_350_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_715_p2 = ((ap_phi_mux_j_phi_fu_373_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_798_p2 = ((ap_phi_mux_indvar_flatten19_phi_fu_385_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_810_p2 = ((ap_phi_mux_j_1_phi_fu_408_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_895_p2 = ((add_ln87_reg_1197 == 32'd4500) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_916_p2 = ((empty_18_reg_426 == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_934_p2 = ((ap_phi_mux_i_4_phi_fu_439_p4 == 9'd256) ? 1'b1 : 1'b0);

assign j_1_cast_fu_842_p1 = select_ln77_reg_1141;

assign j_2_cast_fu_641_p1 = select_ln51_reg_1011;

assign j_cast_fu_747_p1 = select_ln69_reg_1081;

assign or_ln42_fu_556_p2 = (shl_ln1_reg_990 | 9'd1);

assign or_ln45_fu_566_p2 = (shl_ln1_reg_990 | 9'd2);

assign or_ln46_fu_581_p2 = (shl_ln1_reg_990 | 9'd3);

assign or_ln99_fu_951_p2 = (shl_ln98_reg_1230 | 9'd1);

assign p_Result_1_fu_551_p1 = Input_1_V_TDATA_int_regslice[15:0];

assign p_Result_3_fu_576_p1 = Input_1_V_TDATA_int_regslice[15:0];

assign p_mid1_fu_835_p3 = {{trunc_ln77_reg_1152}, {2'd0}};

assign p_mid2_fu_634_p3 = {{trunc_ln51_reg_1022}, {2'd0}};

assign p_mid_fu_740_p3 = {{trunc_ln69_reg_1092}, {2'd0}};

assign result_V_fu_692_p2 = (term_reg_1057 + result_V_1_reg_333);

assign scale_V_fu_513_p2 = (Input_2_V_TDATA_int_regslice - zext_ln703_fu_509_p1);

assign select_ln51_1_fu_623_p3 = ((icmp_ln54_fu_609_p2[0:0] == 1'b1) ? add_ln51_1_reg_1001 : i_3_reg_310);

assign select_ln51_fu_615_p3 = ((icmp_ln54_fu_609_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_j_2_phi_fu_326_p4);

assign select_ln69_1_fu_729_p3 = ((icmp_ln72_fu_715_p2[0:0] == 1'b1) ? add_ln69_1_reg_1076 : i_reg_357);

assign select_ln69_fu_721_p3 = ((icmp_ln72_fu_715_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_j_phi_fu_373_p4);

assign select_ln77_1_fu_824_p3 = ((icmp_ln80_fu_810_p2[0:0] == 1'b1) ? add_ln77_1_reg_1136 : i_2_reg_392);

assign select_ln77_fu_816_p3 = ((icmp_ln80_fu_810_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_j_1_phi_fu_408_p4);

assign sext_ln69_fu_519_p1 = $signed(scale_V_fu_513_p2);

assign shl_ln1_fu_539_p3 = {{trunc_ln41_reg_985}, {2'd0}};

assign shl_ln728_1_fu_765_p3 = {{reg_474}, {7'd0}};

assign shl_ln728_2_fu_660_p3 = {{reg_474}, {7'd0}};

assign shl_ln98_fu_940_p2 = ap_phi_mux_i_4_phi_fu_439_p4 << 9'd1;

assign shl_ln_fu_501_p3 = {{training_label_V}, {19'd0}};

assign tmp_4_fu_487_p1 = Input_1_V_TDATA_int_regslice[7:0];

assign trunc_ln41_fu_535_p1 = ap_phi_mux_i_1_phi_fu_291_p4[6:0];

assign trunc_ln51_fu_630_p1 = select_ln51_1_fu_623_p3[6:0];

assign trunc_ln69_fu_736_p1 = select_ln69_1_fu_729_p3[6:0];

assign trunc_ln77_fu_831_p1 = select_ln77_1_fu_824_p3[6:0];

assign zext_ln1118_fu_856_p1 = add_ln82_reg_1157;

assign zext_ln340_1_fu_586_p1 = or_ln46_fu_581_p2;

assign zext_ln340_fu_561_p1 = or_ln42_fu_556_p2;

assign zext_ln640_1_fu_956_p1 = or_ln99_fu_951_p2;

assign zext_ln640_fu_946_p1 = shl_ln98_fu_940_p2;

assign zext_ln674_1_fu_571_p1 = or_ln45_fu_566_p2;

assign zext_ln674_fu_546_p1 = shl_ln1_fu_539_p3;

assign zext_ln703_fu_509_p1 = shl_ln_fu_501_p3;

assign zext_ln727_1_fu_655_p1 = add_ln56_reg_1027;

assign zext_ln727_fu_761_p1 = add_ln73_reg_1097;

always @ (posedge ap_clk) begin
    shl_ln1_reg_990[1:0] <= 2'b00;
    zext_ln727_reg_1107[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1107_pp2_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1107_pp2_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1107_pp2_iter4_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln727_reg_1107_pp2_iter5_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    shl_ln98_reg_1230[0] <= 1'b0;
end

endmodule //dotProduct_2
