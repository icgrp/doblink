// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dotProduct_2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.416000,HLS_SYN_LAT=4807,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=12,HLS_SYN_FF=1515,HLS_SYN_LUT=1091,HLS_VERSION=2018_2}" *)

module dotProduct_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_pp1_stage0 = 50'd70368744177664;
parameter    ap_ST_fsm_pp1_stage1 = 50'd140737488355328;
parameter    ap_ST_fsm_state50 = 50'd281474976710656;
parameter    ap_ST_fsm_state51 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;
reg Output_1_V_V_ap_vld;
reg Output_2_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] odd_even;
reg   [7:0] training_label_V;
reg   [7:0] feature_V_address0;
reg    feature_V_ce0;
reg    feature_V_we0;
reg   [15:0] feature_V_d0;
wire   [15:0] feature_V_q0;
reg   [7:0] feature_V_address1;
reg    feature_V_ce1;
reg    feature_V_we1;
wire   [15:0] feature_V_d1;
wire   [15:0] feature_V_q1;
reg   [7:0] param_V_address0;
reg    param_V_ce0;
reg    param_V_we0;
wire   [31:0] param_V_q0;
reg   [31:0] num_train;
reg   [31:0] epoch;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_464_p2;
wire    ap_CS_fsm_state3;
reg    Input_2_V_V_blk_n;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_544_p2;
reg    Output_2_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_reg_1098;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [7:0] i6_reg_380;
reg   [15:0] reg_415;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
reg  signed [31:0] reg_420;
wire    ap_CS_fsm_state40;
reg    ap_block_state1;
wire  signed [50:0] OP1_V_cast_fu_460_p1;
reg  signed [50:0] OP1_V_cast_reg_882;
wire   [6:0] i_1_fu_470_p2;
reg   [6:0] i_1_reg_890;
reg    ap_block_state2;
wire   [7:0] tmp_5_fu_480_p3;
reg   [7:0] tmp_5_reg_895;
wire   [6:0] i_3_fu_550_p2;
reg   [6:0] i_3_reg_918;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state5_io;
wire   [7:0] tmp_13_fu_560_p3;
reg   [7:0] tmp_13_reg_923;
wire   [2:0] j_1_fu_582_p2;
reg   [2:0] j_1_reg_931;
wire    ap_CS_fsm_state6;
wire   [7:0] tmp_24_fu_588_p2;
reg   [7:0] tmp_24_reg_936;
wire   [0:0] exitcond6_fu_576_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [31:0] p_Val2_11_reg_961;
wire    ap_CS_fsm_state15;
wire   [31:0] result_V_fu_633_p2;
reg   [31:0] result_V_reg_966;
wire    ap_CS_fsm_state16;
wire   [6:0] i_2_fu_652_p2;
reg   [6:0] i_2_reg_975;
wire    ap_CS_fsm_state18;
wire   [7:0] tmp_7_fu_662_p3;
reg   [7:0] tmp_7_reg_980;
wire   [0:0] exitcond2_fu_646_p2;
wire   [2:0] j_fu_680_p2;
reg   [2:0] j_reg_988;
wire    ap_CS_fsm_state19;
wire   [7:0] tmp_16_fu_686_p2;
reg   [7:0] tmp_16_reg_993;
wire   [0:0] exitcond5_fu_674_p2;
wire   [63:0] tmp_17_fu_691_p1;
reg   [63:0] tmp_17_reg_998;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
reg   [31:0] tmp_21_reg_1013;
wire    ap_CS_fsm_state28;
wire   [6:0] i_4_fu_728_p2;
reg   [6:0] i_4_reg_1021;
wire    ap_CS_fsm_state30;
wire   [7:0] tmp_15_fu_738_p3;
reg   [7:0] tmp_15_reg_1026;
wire   [0:0] exitcond4_fu_722_p2;
wire   [31:0] tmp_10_fu_750_p2;
reg   [31:0] tmp_10_reg_1031;
wire   [2:0] j_2_fu_766_p2;
reg   [2:0] j_2_reg_1040;
wire    ap_CS_fsm_state31;
wire   [7:0] tmp_22_fu_772_p2;
reg   [7:0] tmp_22_reg_1045;
wire   [0:0] exitcond7_fu_760_p2;
wire    ap_CS_fsm_state32;
reg   [7:0] param_V_addr_1_reg_1055;
wire   [31:0] grad_V_q0;
reg  signed [31:0] grad_V_load_reg_1060;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
reg   [31:0] p_Val2_9_reg_1070;
wire   [31:0] p_Val2_s_18_fu_801_p2;
reg   [31:0] p_Val2_s_18_reg_1075;
wire    ap_CS_fsm_state41;
wire   [0:0] tmp_11_fu_806_p2;
reg   [0:0] tmp_11_reg_1080;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire   [31:0] tmp_18_fu_815_p2;
reg   [31:0] tmp_18_reg_1089;
wire   [0:0] tmp_19_fu_827_p2;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond_fu_839_p2;
wire    ap_block_state47_pp1_stage0_iter0;
wire    ap_block_state49_pp1_stage0_iter1;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_block_state49_io;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] i_5_fu_845_p2;
reg   [7:0] i_5_reg_1102;
wire   [7:0] tmp_38_fu_851_p2;
reg   [7:0] tmp_38_reg_1107;
wire    ap_block_state48_pp1_stage1_iter0;
reg    ap_block_state48_io;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state47;
reg    ap_block_pp1_stage1_subdone;
reg   [7:0] grad_V_address0;
reg    grad_V_ce0;
reg    grad_V_we0;
reg   [6:0] i_reg_283;
reg   [6:0] i1_reg_294;
wire    ap_CS_fsm_state4;
reg   [2:0] j1_reg_305;
wire    ap_CS_fsm_state17;
reg   [6:0] i2_reg_316;
reg   [2:0] j3_reg_327;
wire    ap_CS_fsm_state29;
reg   [6:0] i4_reg_338;
reg   [2:0] j5_reg_349;
wire    ap_CS_fsm_state42;
reg   [31:0] num_train_new_reg_360;
wire    ap_CS_fsm_state45;
reg   [31:0] epoch_loc_reg_371;
reg   [7:0] ap_phi_mux_i6_phi_fu_384_p4;
reg   [0:0] storemerge_reg_391;
wire    ap_CS_fsm_state50;
wire   [63:0] tmp_6_fu_488_p1;
wire   [63:0] tmp_s_fu_504_p1;
wire   [63:0] tmp_2_fu_514_p1;
wire   [63:0] tmp_9_fu_529_p1;
wire   [63:0] tmp_26_fu_593_p1;
wire   [63:0] tmp_23_fu_777_p1;
wire   [63:0] tmp_30_fu_857_p1;
wire   [63:0] tmp_32_fu_867_p1;
wire    ap_CS_fsm_state51;
wire   [7:0] loc_V_fu_428_p1;
reg   [31:0] tmp_V_1_fu_136;
reg   [31:0] p_Val2_3_fu_140;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
wire    ap_block_pp1_stage1_01001;
wire    ap_block_pp1_stage0_01001;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
wire   [15:0] loc_V_1_fu_493_p1;
wire   [15:0] loc_V_3_fu_519_p1;
wire    ap_CS_fsm_state39;
wire   [26:0] p_Val2_2_fu_442_p3;
wire   [31:0] p_Val2_2_cast_fu_450_p1;
wire   [31:0] scale_V_fu_454_p2;
wire   [5:0] tmp_29_fu_476_p1;
wire   [7:0] tmp_8_fu_498_p2;
wire   [7:0] tmp_1_fu_509_p2;
wire   [7:0] tmp_3_fu_524_p2;
wire   [5:0] tmp_37_fu_556_p1;
wire   [7:0] j1_cast3_fu_572_p1;
wire  signed [22:0] tmp_27_fu_598_p3;
wire   [54:0] grp_fu_614_p2;
wire   [5:0] tmp_25_fu_658_p1;
wire   [7:0] j3_cast2_fu_670_p1;
wire  signed [22:0] tmp_20_fu_695_p3;
wire  signed [31:0] grp_fu_707_p1;
wire   [50:0] grp_fu_707_p2;
wire   [5:0] tmp_36_fu_734_p1;
wire   [7:0] j5_cast1_fu_756_p1;
wire  signed [31:0] grp_fu_785_p1;
wire   [50:0] grp_fu_785_p2;
wire   [7:0] tmp_31_fu_862_p2;
reg   [49:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 odd_even = 1'd0;
#0 training_label_V = 8'd0;
#0 num_train = 32'd0;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
end

dotProduct_2_featbkb #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
feature_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(feature_V_address0),
    .ce0(feature_V_ce0),
    .we0(feature_V_we0),
    .d0(feature_V_d0),
    .q0(feature_V_q0),
    .address1(feature_V_address1),
    .ce1(feature_V_ce1),
    .we1(feature_V_we1),
    .d1(feature_V_d1),
    .q1(feature_V_q1)
);

dotProduct_2_paracud #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
param_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(param_V_address0),
    .ce0(param_V_ce0),
    .we0(param_V_we0),
    .d0(p_Val2_s_18_reg_1075),
    .q0(param_V_q0)
);

dotProduct_2_grad_V #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
grad_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grad_V_address0),
    .ce0(grad_V_ce0),
    .we0(grad_V_we0),
    .d0(tmp_21_reg_1013),
    .q0(grad_V_q0)
);

dotProduct_2_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 55 ))
dotProduct_2_mul_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_420),
    .din1(tmp_27_fu_598_p3),
    .ce(1'b1),
    .dout(grp_fu_614_p2)
);

dotProduct_2_mul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
dotProduct_2_mul_eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_20_fu_695_p3),
    .din1(grp_fu_707_p1),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

dotProduct_2_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
dotProduct_2_mul_fYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_V_load_reg_1060),
    .din1(grp_fu_785_p1),
    .ce(1'b1),
    .dout(grp_fu_785_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state47) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state46) & (tmp_19_fu_827_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state47) & (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state47);
        end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state46) & (tmp_19_fu_827_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_544_p2 == 1'd1))) begin
            if ((1'b0 == ap_block_state5_io)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == Output_1_V_V_ap_ack)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if ((((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
        end else if ((((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (1'b1 == Output_2_V_V_ap_ack) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == Output_2_V_V_ap_ack) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_reg_1080 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        epoch_loc_reg_371 <= epoch;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        epoch_loc_reg_371 <= tmp_18_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_reg_294 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond6_fu_576_p2 == 1'd1))) begin
        i1_reg_294 <= i_3_reg_918;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond5_fu_674_p2 == 1'd1))) begin
        i2_reg_316 <= i_2_reg_975;
    end else if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1) & (odd_even == 1'd1))) begin
        i2_reg_316 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond2_fu_646_p2 == 1'd1))) begin
        i4_reg_338 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state31) & (exitcond7_fu_760_p2 == 1'd1))) begin
        i4_reg_338 <= i_4_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (tmp_19_fu_827_p2 == 1'd1))) begin
        i6_reg_380 <= 8'd0;
    end else if (((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i6_reg_380 <= i_5_reg_1102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_283 <= i_1_reg_890;
    end else if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_283 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j1_reg_305 <= j_1_reg_931;
    end else if (((exitcond3_fu_544_p2 == 1'd0) & (1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        j1_reg_305 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j3_reg_327 <= j_reg_988;
    end else if (((exitcond2_fu_646_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j3_reg_327 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j5_reg_349 <= j_2_reg_1040;
    end else if (((exitcond4_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        j5_reg_349 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_reg_1080 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        num_train_new_reg_360 <= tmp_10_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        num_train_new_reg_360 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_3_fu_140 <= result_V_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_3_fu_140 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_415 <= feature_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_415 <= feature_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_544_p2 == 1'd1))) begin
        storemerge_reg_391 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        storemerge_reg_391 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_V_1_fu_136 <= result_V_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_1_fu_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1) & (odd_even == 1'd1))) begin
        OP1_V_cast_reg_882 <= OP1_V_cast_fu_460_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (tmp_11_reg_1080 == 1'd1))) begin
        epoch <= tmp_18_fu_815_p2;
        tmp_18_reg_1089 <= tmp_18_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_1098 <= exitcond_fu_839_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grad_V_load_reg_1060 <= grad_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_890 <= i_1_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_2_reg_975 <= i_2_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        i_3_reg_918 <= i_3_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_4_reg_1021 <= i_4_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_5_reg_1102 <= i_5_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_931 <= j_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_2_reg_1040 <= j_2_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_reg_988 <= j_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        num_train <= num_train_new_reg_360;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        odd_even <= storemerge_reg_391;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_11_reg_961 <= {{grp_fu_614_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        p_Val2_9_reg_1070 <= {{grp_fu_785_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        p_Val2_s_18_reg_1075 <= p_Val2_s_18_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        param_V_addr_1_reg_1055 <= tmp_23_fu_777_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_420 <= param_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        result_V_reg_966 <= result_V_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (exitcond4_fu_722_p2 == 1'd1))) begin
        tmp_10_reg_1031 <= tmp_10_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_11_reg_1080 <= tmp_11_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_544_p2 == 1'd0) & (1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_13_reg_923[7 : 2] <= tmp_13_fu_560_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_15_reg_1026[7 : 2] <= tmp_15_fu_738_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_674_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_16_reg_993 <= tmp_16_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_17_reg_998[7 : 0] <= tmp_17_fu_691_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_21_reg_1013 <= {{grp_fu_707_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_22_reg_1045 <= tmp_22_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_24_reg_936 <= tmp_24_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_839_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_38_reg_1107[7 : 1] <= tmp_38_fu_851_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_5_reg_895[7 : 2] <= tmp_5_fu_480_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_646_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp_7_reg_980[7 : 2] <= tmp_7_fu_662_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        training_label_V <= loc_V_fu_428_p1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((odd_even == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1) & (odd_even == 1'd1))) begin
        Input_2_V_V_ap_ack = 1'b1;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (odd_even == 1'd1))) begin
        Input_2_V_V_blk_n = Input_2_V_V_ap_vld;
    end else begin
        Input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_544_p2 == 1'd1))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_544_p2 == 1'd1))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_reg_1098 == 1'd0) & (1'b0 == ap_block_pp1_stage1_01001) & (ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_reg_1098 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((exitcond_reg_1098 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1)))) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_839_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1098 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i6_phi_fu_384_p4 = i_5_reg_1102;
    end else begin
        ap_phi_mux_i6_phi_fu_384_p4 = i6_reg_380;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        feature_V_address0 = tmp_26_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_address0 = tmp_2_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_address0 = tmp_6_fu_488_p1;
    end else begin
        feature_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        feature_V_address1 = tmp_17_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_address1 = tmp_9_fu_529_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_address1 = tmp_s_fu_504_p1;
    end else begin
        feature_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2)))) begin
        feature_V_ce0 = 1'b1;
    end else begin
        feature_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2)))) begin
        feature_V_ce1 = 1'b1;
    end else begin
        feature_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        feature_V_d0 = loc_V_3_fu_519_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        feature_V_d0 = loc_V_1_fu_493_p1;
    end else begin
        feature_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        feature_V_we0 = 1'b1;
    end else begin
        feature_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        feature_V_we1 = 1'b1;
    end else begin
        feature_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grad_V_address0 = tmp_23_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grad_V_address0 = tmp_17_reg_998;
    end else begin
        grad_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32))) begin
        grad_V_ce0 = 1'b1;
    end else begin
        grad_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grad_V_we0 = 1'b1;
    end else begin
        grad_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        param_V_address0 = tmp_32_fu_867_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        param_V_address0 = tmp_30_fu_857_p1;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state42))) begin
        param_V_address0 = param_V_addr_1_reg_1055;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        param_V_address0 = tmp_26_fu_593_p1;
    end else begin
        param_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        param_V_ce0 = 1'b1;
    end else begin
        param_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        param_V_we0 = 1'b1;
    end else begin
        param_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1) & (odd_even == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if ((~((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))) & (odd_even == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (exitcond1_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_464_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_544_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((exitcond3_fu_544_p2 == 1'd0) & (1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond6_fu_576_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (exitcond2_fu_646_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond5_fu_674_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state30 : begin
            if (((exitcond4_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond7_fu_760_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((tmp_11_reg_1080 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (tmp_19_fu_827_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_839_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_839_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_460_p1 = $signed(scale_V_fu_454_p2);

assign Output_1_V_V = tmp_V_1_fu_136;

assign Output_2_V_V = param_V_q0;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state49_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state49_io) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((1'b1 == ap_block_state48_io) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((1'b1 == ap_block_state48_io) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((1'b0 == Input_2_V_V_ap_vld) & (odd_even == 1'd1)) | ((odd_even == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state2 = ((exitcond1_fu_464_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld));
end

assign ap_block_state47_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state48_io = ((exitcond_reg_1098 == 1'd0) & (ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0));
end

assign ap_block_state48_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state49_io = ((exitcond_reg_1098 == 1'd0) & (ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0));
end

assign ap_block_state49_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0) & (exitcond3_fu_544_p2 == 1'd1));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond1_fu_464_p2 = ((i_reg_283 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond2_fu_646_p2 = ((i2_reg_316 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_544_p2 = ((i1_reg_294 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond4_fu_722_p2 = ((i4_reg_338 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond5_fu_674_p2 = ((j3_reg_327 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond6_fu_576_p2 = ((j1_reg_305 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond7_fu_760_p2 = ((j5_reg_349 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_839_p2 = ((ap_phi_mux_i6_phi_fu_384_p4 == 8'd128) ? 1'b1 : 1'b0);

assign feature_V_d1 = {{Input_1_V_V[31:16]}};

assign grp_fu_707_p1 = OP1_V_cast_reg_882;

assign grp_fu_785_p1 = 51'd2251798421176320;

assign i_1_fu_470_p2 = (i_reg_283 + 7'd1);

assign i_2_fu_652_p2 = (i2_reg_316 + 7'd1);

assign i_3_fu_550_p2 = (i1_reg_294 + 7'd1);

assign i_4_fu_728_p2 = (i4_reg_338 + 7'd1);

assign i_5_fu_845_p2 = (ap_phi_mux_i6_phi_fu_384_p4 + 8'd1);

assign j1_cast3_fu_572_p1 = j1_reg_305;

assign j3_cast2_fu_670_p1 = j3_reg_327;

assign j5_cast1_fu_756_p1 = j5_reg_349;

assign j_1_fu_582_p2 = (j1_reg_305 + 3'd1);

assign j_2_fu_766_p2 = (j5_reg_349 + 3'd1);

assign j_fu_680_p2 = (j3_reg_327 + 3'd1);

assign loc_V_1_fu_493_p1 = Input_1_V_V[15:0];

assign loc_V_3_fu_519_p1 = Input_1_V_V[15:0];

assign loc_V_fu_428_p1 = Input_1_V_V[7:0];

assign p_Val2_2_cast_fu_450_p1 = p_Val2_2_fu_442_p3;

assign p_Val2_2_fu_442_p3 = {{training_label_V}, {19'd0}};

assign p_Val2_s_18_fu_801_p2 = ($signed(reg_420) + $signed(p_Val2_9_reg_1070));

assign result_V_fu_633_p2 = (p_Val2_3_fu_140 + p_Val2_11_reg_961);

assign scale_V_fu_454_p2 = (Input_2_V_V - p_Val2_2_cast_fu_450_p1);

assign tmp_10_fu_750_p2 = (num_train + 32'd1);

assign tmp_11_fu_806_p2 = ((tmp_10_reg_1031 == 32'd4500) ? 1'b1 : 1'b0);

assign tmp_13_fu_560_p3 = {{tmp_37_fu_556_p1}, {2'd0}};

assign tmp_15_fu_738_p3 = {{tmp_36_fu_734_p1}, {2'd0}};

assign tmp_16_fu_686_p2 = (j3_cast2_fu_670_p1 + tmp_7_reg_980);

assign tmp_17_fu_691_p1 = tmp_16_reg_993;

assign tmp_18_fu_815_p2 = (epoch + 32'd1);

assign tmp_19_fu_827_p2 = ((epoch_loc_reg_371 == 32'd5) ? 1'b1 : 1'b0);

assign tmp_1_fu_509_p2 = (tmp_5_reg_895 | 8'd2);

assign tmp_20_fu_695_p3 = {{reg_415}, {7'd0}};

assign tmp_22_fu_772_p2 = (tmp_15_reg_1026 + j5_cast1_fu_756_p1);

assign tmp_23_fu_777_p1 = tmp_22_reg_1045;

assign tmp_24_fu_588_p2 = (j1_cast3_fu_572_p1 + tmp_13_reg_923);

assign tmp_25_fu_658_p1 = i2_reg_316[5:0];

assign tmp_26_fu_593_p1 = tmp_24_reg_936;

assign tmp_27_fu_598_p3 = {{reg_415}, {7'd0}};

assign tmp_29_fu_476_p1 = i_reg_283[5:0];

assign tmp_2_fu_514_p1 = tmp_1_fu_509_p2;

assign tmp_30_fu_857_p1 = tmp_38_fu_851_p2;

assign tmp_31_fu_862_p2 = (tmp_38_reg_1107 | 8'd1);

assign tmp_32_fu_867_p1 = tmp_31_fu_862_p2;

assign tmp_36_fu_734_p1 = i4_reg_338[5:0];

assign tmp_37_fu_556_p1 = i1_reg_294[5:0];

assign tmp_38_fu_851_p2 = ap_phi_mux_i6_phi_fu_384_p4 << 8'd1;

assign tmp_3_fu_524_p2 = (tmp_5_reg_895 | 8'd3);

assign tmp_5_fu_480_p3 = {{tmp_29_fu_476_p1}, {2'd0}};

assign tmp_6_fu_488_p1 = tmp_5_fu_480_p3;

assign tmp_7_fu_662_p3 = {{tmp_25_fu_658_p1}, {2'd0}};

assign tmp_8_fu_498_p2 = (tmp_5_fu_480_p3 | 8'd1);

assign tmp_9_fu_529_p1 = tmp_3_fu_524_p2;

assign tmp_s_fu_504_p1 = tmp_8_fu_498_p2;

always @ (posedge ap_clk) begin
    tmp_5_reg_895[1:0] <= 2'b00;
    tmp_13_reg_923[1:0] <= 2'b00;
    tmp_7_reg_980[1:0] <= 2'b00;
    tmp_17_reg_998[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_15_reg_1026[1:0] <= 2'b00;
    tmp_38_reg_1107[0] <= 1'b0;
end

endmodule //dotProduct_2
