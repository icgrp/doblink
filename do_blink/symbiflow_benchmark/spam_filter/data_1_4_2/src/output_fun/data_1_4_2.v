// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_1_4_2_data_1_4_2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=587768,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=393,HLS_SYN_LUT=484,HLS_VERSION=2020_2}" *)

module data_1_4_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_TDATA,
        Input_1_V_TVALID,
        Input_1_V_TREADY,
        Input_2_V_TDATA,
        Input_2_V_TVALID,
        Input_2_V_TREADY,
        Input_3_V_TDATA,
        Input_3_V_TVALID,
        Input_3_V_TREADY,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_pp0_stage0 = 15'd4;
parameter    ap_ST_fsm_pp0_stage1 = 15'd8;
parameter    ap_ST_fsm_state7 = 15'd16;
parameter    ap_ST_fsm_pp1_stage0 = 15'd32;
parameter    ap_ST_fsm_pp1_stage1 = 15'd64;
parameter    ap_ST_fsm_state12 = 15'd128;
parameter    ap_ST_fsm_state13 = 15'd256;
parameter    ap_ST_fsm_state14 = 15'd512;
parameter    ap_ST_fsm_pp2_stage0 = 15'd1024;
parameter    ap_ST_fsm_pp2_stage1 = 15'd2048;
parameter    ap_ST_fsm_state19 = 15'd4096;
parameter    ap_ST_fsm_state20 = 15'd8192;
parameter    ap_ST_fsm_state21 = 15'd16384;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_TDATA;
input   Input_1_V_TVALID;
output   Input_1_V_TREADY;
input  [31:0] Input_2_V_TDATA;
input   Input_2_V_TVALID;
output   Input_2_V_TREADY;
input  [31:0] Input_3_V_TDATA;
input   Input_3_V_TVALID;
output   Input_3_V_TREADY;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] epoch;
reg    Input_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln26_fu_212_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln31_fu_229_p2;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln31_reg_303;
reg    Input_2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln52_fu_200_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln52_reg_271;
reg    Input_3_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln43_fu_188_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln43_reg_252;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln31_reg_303_pp2_iter1_reg;
reg    Output_2_V_TDATA_blk_n;
wire   [0:0] icmp_ln22_fu_176_p2;
wire    ap_CS_fsm_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln43_reg_252_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln52_reg_271_pp1_iter1_reg;
reg   [8:0] i_reg_112;
reg   [8:0] i_4_reg_123;
reg   [7:0] i_2_reg_145;
reg   [31:0] reg_167;
reg    ap_block_state15_pp2_stage0_iter0;
reg    ap_block_state17_pp2_stage0_iter1;
reg    ap_block_state17_io;
reg    ap_block_pp2_stage0_11001;
wire   [8:0] i_1_fu_182_p2;
reg   [8:0] i_1_reg_247;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] tmp_3_reg_256;
reg   [31:0] tmp_4_reg_261;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state4_io;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
wire   [8:0] i_5_fu_194_p2;
reg   [8:0] i_5_reg_266;
reg    ap_block_state8_pp1_stage0_iter0;
reg    ap_block_state10_pp1_stage0_iter1;
reg    ap_block_state10_io;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] tmp_5_reg_275;
reg   [31:0] tmp_6_reg_280;
reg    ap_block_state9_pp1_stage1_iter0;
reg    ap_block_state9_io;
reg    ap_block_state11_pp1_stage1_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp1_stage1_11001;
wire   [12:0] training_id_1_fu_206_p2;
reg   [12:0] training_id_1_reg_285;
reg    ap_block_state13;
reg    ap_block_state13_io;
wire   [31:0] add_ln40_fu_218_p2;
reg   [31:0] add_ln40_reg_293;
wire   [7:0] i_3_fu_223_p2;
reg   [7:0] i_3_reg_298;
reg   [31:0] tmp_2_reg_307;
reg    ap_block_state16_pp2_stage1_iter0;
reg    ap_block_state16_io;
reg    ap_block_state18_pp2_stage1_iter1;
reg    ap_block_state18_io;
reg    ap_block_pp2_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state15;
reg    ap_block_pp2_stage1_subdone;
reg   [8:0] ap_phi_mux_i_phi_fu_116_p4;
reg   [8:0] ap_phi_mux_i_4_phi_fu_127_p4;
reg   [12:0] training_id_reg_134;
wire    ap_CS_fsm_state19;
reg    ap_block_state1;
reg    ap_block_state1_io;
reg   [7:0] ap_phi_mux_i_2_phi_fu_149_p4;
reg   [31:0] storemerge_reg_156;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire    regslice_both_Output_1_V_U_apdone_blk;
wire    regslice_both_Output_2_V_U_apdone_blk;
reg    ap_block_state21;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_pp2_stage0_01001;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_Input_1_V_U_apdone_blk;
wire   [31:0] Input_1_V_TDATA_int_regslice;
wire    Input_1_V_TVALID_int_regslice;
reg    Input_1_V_TREADY_int_regslice;
wire    regslice_both_Input_1_V_U_ack_in;
wire    regslice_both_Input_2_V_U_apdone_blk;
wire   [31:0] Input_2_V_TDATA_int_regslice;
wire    Input_2_V_TVALID_int_regslice;
reg    Input_2_V_TREADY_int_regslice;
wire    regslice_both_Input_2_V_U_ack_in;
wire    regslice_both_Input_3_V_U_apdone_blk;
wire   [31:0] Input_3_V_TDATA_int_regslice;
wire    Input_3_V_TVALID_int_regslice;
reg    Input_3_V_TREADY_int_regslice;
wire    regslice_both_Input_3_V_U_ack_in;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg   [31:0] Output_2_V_TDATA_int_regslice;
reg    Output_2_V_TVALID_int_regslice;
wire    Output_2_V_TREADY_int_regslice;
wire    regslice_both_Output_2_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 epoch = 32'd0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_1_V_TDATA),
    .vld_in(Input_1_V_TVALID),
    .ack_in(regslice_both_Input_1_V_U_ack_in),
    .data_out(Input_1_V_TDATA_int_regslice),
    .vld_out(Input_1_V_TVALID_int_regslice),
    .ack_out(Input_1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_1_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_2_V_TDATA),
    .vld_in(Input_2_V_TVALID),
    .ack_in(regslice_both_Input_2_V_U_ack_in),
    .data_out(Input_2_V_TDATA_int_regslice),
    .vld_out(Input_2_V_TVALID_int_regslice),
    .ack_out(Input_2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_2_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Input_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Input_3_V_TDATA),
    .vld_in(Input_3_V_TVALID),
    .ack_in(regslice_both_Input_3_V_U_ack_in),
    .data_out(Input_3_V_TDATA_int_regslice),
    .vld_out(Input_3_V_TVALID_int_regslice),
    .ack_out(Input_3_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_Input_3_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

data_1_4_2_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_2_V_TDATA_int_regslice),
    .vld_in(Output_2_V_TVALID_int_regslice),
    .ack_in(Output_2_V_TREADY_int_regslice),
    .data_out(Output_2_V_TDATA),
    .vld_out(regslice_both_Output_2_V_U_vld_out),
    .ack_out(Output_2_V_TREADY),
    .apdone_blk(regslice_both_Output_2_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state15))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_2_reg_145 <= i_3_reg_298;
    end else if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14))) begin
        i_2_reg_145 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_4_reg_123 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_271 == 1'd0))) begin
        i_4_reg_123 <= i_5_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0))) begin
        i_reg_112 <= i_1_reg_247;
    end else if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_112 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        storemerge_reg_156 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        storemerge_reg_156 <= add_ln40_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd1))) begin
        training_id_reg_134 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        training_id_reg_134 <= training_id_1_reg_285;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln40_reg_293 <= add_ln40_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state21))) begin
        epoch <= storemerge_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_1_reg_247 <= i_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_3_reg_298 <= i_3_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_5_reg_266 <= i_5_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln31_reg_303 <= icmp_ln31_fu_229_p2;
        icmp_ln31_reg_303_pp2_iter1_reg <= icmp_ln31_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_252 <= icmp_ln43_fu_188_p2;
        icmp_ln43_reg_252_pp0_iter1_reg <= icmp_ln43_reg_252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln52_reg_271 <= icmp_ln52_fu_200_p2;
        icmp_ln52_reg_271_pp1_iter1_reg <= icmp_ln52_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln31_fu_229_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_167 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        tmp_2_reg_307 <= Input_1_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_3_reg_256 <= Input_3_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_4_reg_261 <= Input_3_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_5_reg_275 <= Input_2_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_6_reg_280 <= Input_2_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state13_io) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (1'b1 == ap_CS_fsm_state13))) begin
        training_id_1_reg_285 <= training_id_1_fu_206_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln31_fu_229_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        Input_1_V_TDATA_blk_n = Input_1_V_TVALID_int_regslice;
    end else begin
        Input_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln31_fu_229_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | (~((1'b1 == ap_block_state13_io) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        Input_1_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Input_2_V_TDATA_blk_n = Input_2_V_TVALID_int_regslice;
    end else begin
        Input_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Input_2_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_3_V_TDATA_blk_n = Input_3_V_TVALID_int_regslice;
    end else begin
        Input_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        Input_3_V_TREADY_int_regslice = 1'b1;
    end else begin
        Input_3_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        Output_1_V_TDATA_int_regslice = tmp_2_reg_307;
    end else if (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        Output_1_V_TDATA_int_regslice = reg_167;
    end else if ((~(((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        Output_1_V_TDATA_int_regslice = Input_1_V_TDATA_int_regslice;
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | (~((1'b1 == ap_block_state13_io) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_271 == 1'd0)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY_int_regslice;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_271 == 1'd0))) begin
        Output_2_V_TDATA_int_regslice = tmp_6_reg_280;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        Output_2_V_TDATA_int_regslice = tmp_5_reg_275;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0))) begin
        Output_2_V_TDATA_int_regslice = tmp_4_reg_261;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        Output_2_V_TDATA_int_regslice = tmp_3_reg_256;
    end else if ((~((ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd0))) begin
        Output_2_V_TDATA_int_regslice = 32'd1025;
    end else begin
        Output_2_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln52_reg_271 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln43_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0)))) begin
        Output_2_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln52_fu_200_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_229_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_149_p4 = i_3_reg_298;
    end else begin
        ap_phi_mux_i_2_phi_fu_149_p4 = i_2_reg_145;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln52_reg_271 == 1'd0))) begin
        ap_phi_mux_i_4_phi_fu_127_p4 = i_5_reg_266;
    end else begin
        ap_phi_mux_i_4_phi_fu_127_p4 = i_4_reg_123;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_116_p4 = i_1_reg_247;
    end else begin
        ap_phi_mux_i_phi_fu_116_p4 = i_reg_112;
    end
end

always @ (*) begin
    if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if ((~((1'b1 == ap_block_state1_io) | (ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_176_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Output_2_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln52_fu_200_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln52_fu_200_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state13 : begin
            if ((~((1'b1 == ap_block_state13_io) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln26_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if ((~((1'b1 == ap_block_state13_io) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice))) & (icmp_ln26_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == Output_1_V_TREADY_int_regslice) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln31_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((icmp_ln31_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if ((~((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_1_V_TREADY = regslice_both_Input_1_V_U_ack_in;

assign Input_2_V_TREADY = regslice_both_Input_2_V_U_ack_in;

assign Input_3_V_TREADY = regslice_both_Input_3_V_U_ack_in;

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign Output_2_V_TVALID = regslice_both_Output_2_V_U_vld_out;

assign add_ln40_fu_218_p2 = (epoch + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_reg_252 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_reg_252 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_reg_252 == 1'd0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_fu_200_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_reg_271 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_reg_271 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_reg_271 == 1'd0)))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln31_fu_229_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((icmp_ln31_fu_229_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((icmp_ln31_fu_229_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == Input_1_V_TVALID_int_regslice)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state10_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp1_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp1_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13 = (((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state13_io = ((icmp_ln26_fu_212_p2 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state15_pp2_stage0_iter0 = ((icmp_ln31_fu_229_p2 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state16_io = ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state16_pp2_stage1_iter0 = (((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice)) | ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Input_1_V_TVALID_int_regslice)));
end

always @ (*) begin
    ap_block_state17_io = ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state17_pp2_stage0_iter1 = ((icmp_ln31_reg_303 == 1'd0) & (1'b0 == Output_1_V_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state18_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp2_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln31_reg_303_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln22_fu_176_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state21 = ((regslice_both_Output_2_V_U_apdone_blk == 1'b1) | (regslice_both_Output_1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_fu_188_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0)) | ((1'b0 == Input_3_V_TVALID_int_regslice) & (icmp_ln43_reg_252 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252 == 1'd0));
end

always @ (*) begin
    ap_block_state6_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln43_reg_252_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter0 = ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_fu_200_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state9_io = ((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp1_stage1_iter0 = (((1'b0 == Output_2_V_TREADY_int_regslice) & (icmp_ln52_reg_271 == 1'd0)) | ((1'b0 == Input_2_V_TVALID_int_regslice) & (icmp_ln52_reg_271 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_182_p2 = (ap_phi_mux_i_phi_fu_116_p4 + 9'd1);

assign i_3_fu_223_p2 = (ap_phi_mux_i_2_phi_fu_149_p4 + 8'd1);

assign i_5_fu_194_p2 = (ap_phi_mux_i_4_phi_fu_127_p4 + 9'd1);

assign icmp_ln22_fu_176_p2 = (($signed(epoch) < $signed(32'd5)) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_212_p2 = ((training_id_reg_134 == 13'd4500) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_229_p2 = ((ap_phi_mux_i_2_phi_fu_149_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_188_p2 = ((ap_phi_mux_i_phi_fu_116_p4 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_200_p2 = ((ap_phi_mux_i_4_phi_fu_127_p4 == 9'd256) ? 1'b1 : 1'b0);

assign training_id_1_fu_206_p2 = (training_id_reg_134 + 13'd1);

endmodule //data_1_4_2
