// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_1_4_3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=153,HLS_VERSION=2018_2}" *)

module data_1_4_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Input_2_V_V,
        Input_2_V_V_ap_vld,
        Input_2_V_V_ap_ack,
        Input_3_V_V,
        Input_3_V_V_ap_vld,
        Input_3_V_V_ap_ack,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack,
        Output_2_V_V,
        Output_2_V_V_ap_vld,
        Output_2_V_V_ap_ack,
        Output_3_V_V,
        Output_3_V_V_ap_vld,
        Output_3_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
input  [31:0] Input_2_V_V;
input   Input_2_V_V_ap_vld;
output   Input_2_V_V_ap_ack;
input  [31:0] Input_3_V_V;
input   Input_3_V_V_ap_vld;
output   Input_3_V_V_ap_ack;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;
output  [31:0] Output_2_V_V;
output   Output_2_V_V_ap_vld;
input   Output_2_V_V_ap_ack;
output  [31:0] Output_3_V_V;
output   Output_3_V_V_ap_vld;
input   Output_3_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_ap_ack;
reg Input_2_V_V_ap_ack;
reg Input_3_V_V_ap_ack;
reg Output_1_V_V_ap_vld;
reg Output_2_V_V_ap_vld;
reg Output_3_V_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] ExecuteAdd;
reg    Input_1_V_V_blk_n;
wire   [0:0] tmp_fu_98_p2;
reg    Input_2_V_V_blk_n;
reg    Input_3_V_V_blk_n;
reg    Output_1_V_V_blk_n;
reg    Output_2_V_V_blk_n;
reg    Output_3_V_V_blk_n;
reg   [0:0] ap_phi_mux_storemerge_phi_fu_82_p4;
reg    ap_block_state1;
reg    ap_sig_ioackin_Output_2_V_V_ap_ack;
reg    ap_sig_ioackin_Output_3_V_V_ap_ack;
reg    ap_sig_ioackin_Output_1_V_V_ap_ack;
reg    ap_block_state1_io;
wire   [7:0] storemerge_cast_fu_111_p1;
reg    ap_reg_ioackin_Output_2_V_V_ap_ack;
reg    ap_reg_ioackin_Output_3_V_V_ap_ack;
reg    ap_reg_ioackin_Output_1_V_V_ap_ack;
wire   [1:0] tmp_1_fu_94_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_133;
reg    ap_condition_80;
reg    ap_condition_138;
reg    ap_condition_141;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ExecuteAdd = 8'd1;
#0 ap_reg_ioackin_Output_2_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_3_V_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_Output_1_V_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
    end else begin
        if (((tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((1'b1 == ap_condition_80)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == ap_condition_133)) begin
                ap_reg_ioackin_Output_1_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
    end else begin
        if (((tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((1'b1 == ap_condition_80)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == ap_condition_138)) begin
                ap_reg_ioackin_Output_2_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Output_3_V_V_ap_ack <= 1'b0;
    end else begin
        if (((tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((1'b1 == ap_condition_80)) begin
                ap_reg_ioackin_Output_3_V_V_ap_ack <= 1'b0;
            end else if ((1'b1 == ap_condition_141)) begin
                ap_reg_ioackin_Output_3_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1))) begin
        ExecuteAdd[0] <= storemerge_cast_fu_111_p1[0];
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_V_ap_ack = 1'b1;
    end else begin
        Input_2_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_2_V_V_blk_n = Input_2_V_V_ap_vld;
    end else begin
        Input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_3_V_V_ap_ack = 1'b1;
    end else begin
        Input_3_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Input_3_V_V_blk_n = Input_3_V_V_ap_vld;
    end else begin
        Input_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd1) & (ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_ap_vld = 1'b1;
    end else begin
        Output_1_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd0) & (ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_2_V_V_ap_vld = 1'b1;
    end else begin
        Output_2_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_2_V_V_blk_n = Output_2_V_V_ap_ack;
    end else begin
        Output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (tmp_fu_98_p2 == 1'd0) & (ap_reg_ioackin_Output_3_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_3_V_V_ap_vld = 1'b1;
    end else begin
        Output_3_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Output_3_V_V_blk_n = Output_3_V_V_ap_ack;
    end else begin
        Output_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_98_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_82_p4 = 1'd0;
        end else if ((tmp_fu_98_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_82_p4 = 1'd1;
        end else begin
            ap_phi_mux_storemerge_phi_fu_82_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_82_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_1_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = Output_1_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_1_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_2_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = Output_2_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_2_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_Output_3_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_Output_3_V_V_ap_ack = Output_3_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_Output_3_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V = (Input_2_V_V + Input_1_V_V);

assign Output_2_V_V = Input_3_V_V;

assign Output_3_V_V = Input_3_V_V;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state1_io = (((tmp_fu_98_p2 == 1'd0) & (ap_sig_ioackin_Output_3_V_V_ap_ack == 1'b0)) | ((tmp_fu_98_p2 == 1'd0) & (ap_sig_ioackin_Output_2_V_V_ap_ack == 1'b0)) | ((tmp_fu_98_p2 == 1'd1) & (ap_sig_ioackin_Output_1_V_V_ap_ack == 1'b0)));
end

always @ (*) begin
    ap_condition_133 = (~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == Output_1_V_V_ap_ack));
end

always @ (*) begin
    ap_condition_138 = (~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == Output_2_V_V_ap_ack));
end

always @ (*) begin
    ap_condition_141 = (~((ap_start == 1'b0) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld))) & (1'b1 == Output_3_V_V_ap_ack));
end

always @ (*) begin
    ap_condition_80 = ~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | ((tmp_fu_98_p2 == 1'd0) & (1'b0 == Input_3_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_2_V_V_ap_vld)) | ((tmp_fu_98_p2 == 1'd1) & (1'b0 == Input_1_V_V_ap_vld)));
end

assign storemerge_cast_fu_111_p1 = ap_phi_mux_storemerge_phi_fu_82_p4;

assign tmp_1_fu_94_p1 = ExecuteAdd[1:0];

assign tmp_fu_98_p2 = ((tmp_1_fu_94_p1 == 2'd1) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    ExecuteAdd[7:1] <= 7'b0000000;
end

endmodule //data_1_4_3
