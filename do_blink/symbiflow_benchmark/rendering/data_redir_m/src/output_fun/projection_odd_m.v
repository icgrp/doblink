// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module projection_odd_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_lo_V,
        input_mi_V,
        input_hi_V,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_lo_V;
input  [31:0] input_mi_V;
input  [31:0] input_hi_V;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] triangle_3d_x0_V_fu_50_p1;
reg   [7:0] triangle_3d_x0_V_reg_227;
reg   [7:0] triangle_3d_y0_V_reg_232;
reg   [7:0] triangle_3d_x1_V_reg_237;
wire   [7:0] triangle_3d_y1_V_fu_74_p1;
reg   [7:0] triangle_3d_y1_V_reg_242;
reg   [7:0] triangle_3d_x2_V_reg_247;
reg   [7:0] triangle_3d_y2_V_reg_252;
reg   [7:0] div_reg_257;
reg   [7:0] div1_reg_262;
reg   [7:0] div2_reg_267;
wire   [7:0] tmp_fu_98_p4;
wire   [7:0] mul5_fu_112_p1;
wire   [17:0] mul5_fu_112_p2;
wire   [7:0] tmp_11_fu_128_p4;
wire   [7:0] mul2_fu_142_p1;
wire   [17:0] mul2_fu_142_p2;
wire   [7:0] tmp_12_fu_158_p1;
wire   [7:0] mul_fu_166_p1;
wire   [17:0] mul_fu_166_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp1_fu_182_p2;
wire   [7:0] triangle_2d_z_V_writ_fu_186_p2;
reg   [1:0] ap_NS_fsm;
wire   [17:0] mul2_fu_142_p10;
wire   [17:0] mul5_fu_112_p10;
wire   [17:0] mul_fu_166_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        div1_reg_262 <= {{mul2_fu_142_p2[17:10]}};
        div2_reg_267 <= {{mul_fu_166_p2[17:10]}};
        div_reg_257 <= {{mul5_fu_112_p2[17:10]}};
        triangle_3d_x0_V_reg_227 <= triangle_3d_x0_V_fu_50_p1;
        triangle_3d_x1_V_reg_237 <= {{input_lo_V[31:24]}};
        triangle_3d_x2_V_reg_247 <= {{input_mi_V[23:16]}};
        triangle_3d_y0_V_reg_232 <= {{input_lo_V[15:8]}};
        triangle_3d_y1_V_reg_242 <= triangle_3d_y1_V_fu_74_p1;
        triangle_3d_y2_V_reg_252 <= {{input_mi_V[31:24]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = triangle_3d_x0_V_reg_227;

assign ap_return_1 = triangle_3d_y0_V_reg_232;

assign ap_return_2 = triangle_3d_x1_V_reg_237;

assign ap_return_3 = triangle_3d_y1_V_reg_242;

assign ap_return_4 = triangle_3d_x2_V_reg_247;

assign ap_return_5 = triangle_3d_y2_V_reg_252;

assign ap_return_6 = triangle_2d_z_V_writ_fu_186_p2;

assign mul2_fu_142_p1 = mul2_fu_142_p10;

assign mul2_fu_142_p10 = tmp_11_fu_128_p4;

assign mul2_fu_142_p2 = (18'd342 * mul2_fu_142_p1);

assign mul5_fu_112_p1 = mul5_fu_112_p10;

assign mul5_fu_112_p10 = tmp_fu_98_p4;

assign mul5_fu_112_p2 = (18'd342 * mul5_fu_112_p1);

assign mul_fu_166_p1 = mul_fu_166_p10;

assign mul_fu_166_p10 = tmp_12_fu_158_p1;

assign mul_fu_166_p2 = (18'd342 * mul_fu_166_p1);

assign tmp1_fu_182_p2 = (div2_reg_267 + div_reg_257);

assign tmp_11_fu_128_p4 = {{input_mi_V[15:8]}};

assign tmp_12_fu_158_p1 = input_hi_V[7:0];

assign tmp_fu_98_p4 = {{input_lo_V[23:16]}};

assign triangle_2d_z_V_writ_fu_186_p2 = (div1_reg_262 + tmp1_fu_182_p2);

assign triangle_3d_x0_V_fu_50_p1 = input_lo_V[7:0];

assign triangle_3d_y1_V_fu_74_p1 = input_mi_V[7:0];

endmodule //projection_odd_m
