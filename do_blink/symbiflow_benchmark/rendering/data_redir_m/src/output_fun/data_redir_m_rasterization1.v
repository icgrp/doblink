// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_redir_m_rasterization1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY,
        Output_2_V_TDATA,
        Output_2_V_TVALID,
        Output_2_V_TREADY,
        triangle_2d_x0,
        triangle_2d_y0,
        triangle_2d_x1,
        triangle_2d_y1,
        triangle_2d_x2,
        triangle_2d_y2,
        triangle_2d_z,
        grp_fu_199_p_din0,
        grp_fu_199_p_din1,
        grp_fu_199_p_dout0,
        grp_fu_199_p_ce,
        grp_fu_203_p_din0,
        grp_fu_203_p_din1,
        grp_fu_203_p_dout0,
        grp_fu_203_p_ce,
        grp_fu_207_p_din0,
        grp_fu_207_p_din1,
        grp_fu_207_p_dout0,
        grp_fu_207_p_ce
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;
output  [31:0] Output_2_V_TDATA;
output   Output_2_V_TVALID;
input   Output_2_V_TREADY;
input  [7:0] triangle_2d_x0;
input  [7:0] triangle_2d_y0;
input  [7:0] triangle_2d_x1;
input  [7:0] triangle_2d_y1;
input  [7:0] triangle_2d_x2;
input  [7:0] triangle_2d_y2;
input  [7:0] triangle_2d_z;
output  [8:0] grp_fu_199_p_din0;
output  [8:0] grp_fu_199_p_din1;
input  [17:0] grp_fu_199_p_dout0;
output   grp_fu_199_p_ce;
output  [8:0] grp_fu_203_p_din0;
output  [8:0] grp_fu_203_p_din1;
input  [17:0] grp_fu_203_p_dout0;
output   grp_fu_203_p_ce;
output  [8:0] grp_fu_207_p_din0;
output  [8:0] grp_fu_207_p_din1;
input  [15:0] grp_fu_207_p_dout0;
output   grp_fu_207_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Output_1_V_TDATA;
reg Output_1_V_TVALID;
reg[31:0] Output_2_V_TDATA;
reg Output_2_V_TVALID;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] parity;
reg   [15:0] max_index_V;
reg   [7:0] max_min_V_4;
reg   [7:0] max_min_V_3;
reg   [7:0] max_min_V_2;
reg   [7:0] max_min_V_1;
reg   [7:0] max_min_V;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln153_fu_210_p2;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state13;
reg   [0:0] parity_load_reg_642;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    Output_2_V_TDATA_blk_n;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [8:0] ret_15_fu_142_p2;
reg   [8:0] ret_15_reg_582;
wire   [8:0] ret_16_fu_156_p2;
reg   [8:0] ret_16_reg_587;
wire   [8:0] ret_18_fu_166_p2;
reg   [8:0] ret_18_reg_592;
wire   [8:0] ret_19_fu_176_p2;
reg   [8:0] ret_19_reg_597;
wire  signed [17:0] sext_ln215_fu_182_p1;
wire    ap_CS_fsm_state2;
wire  signed [17:0] sext_ln215_1_fu_185_p1;
wire  signed [17:0] sext_ln215_2_fu_194_p1;
wire  signed [17:0] sext_ln215_3_fu_197_p1;
wire   [17:0] grp_fu_188_p2;
reg   [17:0] ret_17_reg_622;
wire    ap_CS_fsm_state5;
wire   [17:0] grp_fu_200_p2;
reg   [17:0] ret_20_reg_628;
reg   [0:0] tmp_reg_646;
wire   [31:0] p_Result_s_fu_238_p4;
reg   [31:0] p_Result_s_reg_654;
wire   [31:0] p_Result_1_fu_260_p5;
reg   [31:0] p_Result_1_reg_660;
wire   [7:0] triangle_2d_same_y1_V_fu_272_p3;
reg   [7:0] triangle_2d_same_y1_V_reg_666;
wire    ap_CS_fsm_state7;
wire   [7:0] triangle_2d_same_x1_V_fu_277_p3;
reg   [7:0] triangle_2d_same_x1_V_reg_675;
wire   [7:0] triangle_2d_same_y0_V_fu_282_p3;
reg   [7:0] triangle_2d_same_y0_V_reg_684;
wire   [7:0] triangle_2d_same_x0_V_fu_287_p3;
reg   [7:0] triangle_2d_same_x0_V_reg_695;
wire   [0:0] icmp_ln878_2_fu_292_p2;
reg   [0:0] icmp_ln878_2_reg_706;
wire   [0:0] icmp_ln886_2_fu_297_p2;
reg   [0:0] icmp_ln886_2_reg_711;
wire   [0:0] icmp_ln878_5_fu_302_p2;
reg   [0:0] icmp_ln878_5_reg_716;
wire   [0:0] icmp_ln886_5_fu_307_p2;
reg   [0:0] icmp_ln886_5_reg_721;
wire   [7:0] rhs_5_fu_331_p3;
reg   [7:0] rhs_5_reg_726;
wire    ap_CS_fsm_state8;
wire   [7:0] lhs_5_fu_364_p3;
reg   [7:0] lhs_5_reg_732;
wire   [7:0] rhs_6_fu_397_p3;
reg   [7:0] rhs_6_reg_738;
wire   [7:0] lhs_6_fu_430_p3;
reg   [7:0] lhs_6_reg_744;
wire  signed [8:0] ret_13_fu_450_p2;
reg  signed [8:0] ret_13_reg_750;
wire    ap_CS_fsm_state9;
wire   [7:0] trunc_ln213_fu_456_p1;
reg   [7:0] trunc_ln213_reg_755;
wire   [8:0] ret_14_fu_472_p2;
reg   [8:0] ret_14_reg_760;
wire  signed [15:0] sext_ln213_fu_478_p1;
wire    ap_CS_fsm_state10;
wire  signed [15:0] sext_ln213_1_fu_481_p1;
wire   [31:0] p_Result_3_fu_507_p5;
reg   [31:0] p_Result_3_reg_775;
wire   [31:0] p_Result_4_fu_515_p4;
reg   [31:0] p_Result_4_reg_781;
wire   [31:0] p_Result_5_fu_523_p5;
reg   [31:0] p_Result_5_reg_787;
wire   [15:0] grp_fu_484_p2;
reg    ap_block_state13;
reg    ap_block_state13_io;
reg    ap_predicate_op72_write_state6;
reg    ap_predicate_op73_write_state6;
reg    ap_block_state6;
reg    ap_block_state6_io;
wire   [31:0] p_Result_2_fu_496_p5;
wire   [8:0] zext_ln215_fu_134_p1;
wire   [8:0] zext_ln1347_fu_138_p1;
wire   [8:0] zext_ln215_1_fu_148_p1;
wire   [8:0] zext_ln1347_1_fu_152_p1;
wire   [8:0] zext_ln1347_2_fu_162_p1;
wire   [8:0] zext_ln1347_3_fu_172_p1;
wire  signed [8:0] grp_fu_188_p0;
wire  signed [8:0] grp_fu_188_p1;
wire  signed [8:0] grp_fu_200_p0;
wire  signed [8:0] grp_fu_200_p1;
wire   [17:0] ret_fu_206_p2;
wire   [0:0] icmp_ln878_1_fu_316_p2;
wire   [0:0] icmp_ln878_fu_312_p2;
wire   [7:0] select_ln42_fu_320_p3;
wire   [7:0] select_ln49_fu_326_p3;
wire   [0:0] icmp_ln886_1_fu_349_p2;
wire   [0:0] icmp_ln886_fu_345_p2;
wire   [7:0] select_ln62_fu_353_p3;
wire   [7:0] select_ln69_fu_359_p3;
wire   [0:0] icmp_ln878_4_fu_382_p2;
wire   [0:0] icmp_ln878_3_fu_378_p2;
wire   [7:0] select_ln42_1_fu_386_p3;
wire   [7:0] select_ln49_1_fu_392_p3;
wire   [0:0] icmp_ln886_4_fu_415_p2;
wire   [0:0] icmp_ln886_3_fu_411_p2;
wire   [7:0] select_ln62_1_fu_419_p3;
wire   [7:0] select_ln69_1_fu_425_p3;
wire   [8:0] zext_ln215_2_fu_444_p1;
wire   [8:0] zext_ln215_3_fu_447_p1;
wire   [8:0] zext_ln215_4_fu_466_p1;
wire   [8:0] zext_ln215_5_fu_469_p1;
wire  signed [8:0] grp_fu_484_p0;
wire  signed [8:0] grp_fu_484_p1;
wire    grp_fu_188_ce;
wire    grp_fu_200_ce;
reg    grp_fu_484_ce;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state26;
reg   [25:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 parity = 1'd0;
#0 max_index_V = 16'd0;
#0 max_min_V_4 = 8'd0;
#0 max_min_V_3 = 8'd0;
#0 max_min_V_2 = 8'd0;
#0 max_min_V_1 = 8'd0;
#0 max_min_V = 8'd0;
#0 parity_load_reg_642 = 1'd0;
#0 ret_15_reg_582 = 9'd0;
#0 ret_16_reg_587 = 9'd0;
#0 ret_18_reg_592 = 9'd0;
#0 ret_19_reg_597 = 9'd0;
#0 ret_17_reg_622 = 18'd0;
#0 ret_20_reg_628 = 18'd0;
#0 tmp_reg_646 = 1'd0;
#0 p_Result_s_reg_654 = 32'd0;
#0 p_Result_1_reg_660 = 32'd0;
#0 triangle_2d_same_y1_V_reg_666 = 8'd0;
#0 triangle_2d_same_x1_V_reg_675 = 8'd0;
#0 triangle_2d_same_y0_V_reg_684 = 8'd0;
#0 triangle_2d_same_x0_V_reg_695 = 8'd0;
#0 icmp_ln878_2_reg_706 = 1'd0;
#0 icmp_ln886_2_reg_711 = 1'd0;
#0 icmp_ln878_5_reg_716 = 1'd0;
#0 icmp_ln886_5_reg_721 = 1'd0;
#0 rhs_5_reg_726 = 8'd0;
#0 lhs_5_reg_732 = 8'd0;
#0 rhs_6_reg_738 = 8'd0;
#0 lhs_6_reg_744 = 8'd0;
#0 ret_13_reg_750 = 9'd0;
#0 trunc_ln213_reg_755 = 8'd0;
#0 ret_14_reg_760 = 9'd0;
#0 p_Result_3_reg_775 = 32'd0;
#0 p_Result_4_reg_781 = 32'd0;
#0 p_Result_5_reg_787 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln878_2_reg_706 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            icmp_ln878_2_reg_706 <= icmp_ln878_2_fu_292_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln878_5_reg_716 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            icmp_ln878_5_reg_716 <= icmp_ln878_5_fu_302_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln886_2_reg_711 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            icmp_ln886_2_reg_711 <= icmp_ln886_2_fu_297_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln886_5_reg_721 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            icmp_ln886_5_reg_721 <= icmp_ln886_5_fu_307_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lhs_5_reg_732 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            lhs_5_reg_732 <= lhs_5_fu_364_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        lhs_6_reg_744 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            lhs_6_reg_744 <= lhs_6_fu_430_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_index_V <= 16'd0;
    end else begin
        if ((~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13))) begin
            max_index_V <= grp_fu_207_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_min_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            max_min_V <= trunc_ln213_fu_456_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_min_V_1 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            max_min_V_1 <= lhs_6_fu_430_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_min_V_2 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            max_min_V_2 <= rhs_6_fu_397_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_min_V_3 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            max_min_V_3 <= lhs_5_fu_364_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_min_V_4 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            max_min_V_4 <= rhs_5_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                p_Result_1_reg_660[0] <= 1'b0;
        p_Result_1_reg_660[1] <= 1'b0;
        p_Result_1_reg_660[2] <= 1'b0;
        p_Result_1_reg_660[3] <= 1'b0;
        p_Result_1_reg_660[4] <= 1'b0;
        p_Result_1_reg_660[5] <= 1'b0;
        p_Result_1_reg_660[6] <= 1'b0;
        p_Result_1_reg_660[7] <= 1'b0;
        p_Result_1_reg_660[8] <= 1'b0;
        p_Result_1_reg_660[9] <= 1'b0;
        p_Result_1_reg_660[10] <= 1'b0;
        p_Result_1_reg_660[11] <= 1'b0;
        p_Result_1_reg_660[12] <= 1'b0;
        p_Result_1_reg_660[13] <= 1'b0;
        p_Result_1_reg_660[14] <= 1'b0;
        p_Result_1_reg_660[15] <= 1'b0;
        p_Result_1_reg_660[16] <= 1'b0;
        p_Result_1_reg_660[17] <= 1'b0;
        p_Result_1_reg_660[18] <= 1'b0;
        p_Result_1_reg_660[19] <= 1'b0;
        p_Result_1_reg_660[20] <= 1'b0;
        p_Result_1_reg_660[21] <= 1'b0;
        p_Result_1_reg_660[22] <= 1'b0;
        p_Result_1_reg_660[23] <= 1'b0;
    end else begin
        if (((icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                        p_Result_1_reg_660[23 : 0] <= p_Result_1_fu_260_p5[23 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        p_Result_3_reg_775 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            p_Result_3_reg_775 <= p_Result_3_fu_507_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        p_Result_4_reg_781 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            p_Result_4_reg_781 <= p_Result_4_fu_515_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                p_Result_5_reg_787[0] <= 1'b0;
        p_Result_5_reg_787[1] <= 1'b0;
        p_Result_5_reg_787[2] <= 1'b0;
        p_Result_5_reg_787[3] <= 1'b0;
        p_Result_5_reg_787[4] <= 1'b0;
        p_Result_5_reg_787[5] <= 1'b0;
        p_Result_5_reg_787[6] <= 1'b0;
        p_Result_5_reg_787[7] <= 1'b0;
        p_Result_5_reg_787[8] <= 1'b0;
        p_Result_5_reg_787[9] <= 1'b0;
        p_Result_5_reg_787[10] <= 1'b0;
        p_Result_5_reg_787[11] <= 1'b0;
        p_Result_5_reg_787[12] <= 1'b0;
        p_Result_5_reg_787[13] <= 1'b0;
        p_Result_5_reg_787[14] <= 1'b0;
        p_Result_5_reg_787[15] <= 1'b0;
        p_Result_5_reg_787[16] <= 1'b0;
        p_Result_5_reg_787[17] <= 1'b0;
        p_Result_5_reg_787[18] <= 1'b0;
        p_Result_5_reg_787[19] <= 1'b0;
        p_Result_5_reg_787[20] <= 1'b0;
        p_Result_5_reg_787[21] <= 1'b0;
        p_Result_5_reg_787[22] <= 1'b0;
        p_Result_5_reg_787[23] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
                        p_Result_5_reg_787[23 : 0] <= p_Result_5_fu_523_p5[23 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        p_Result_s_reg_654 <= 32'd0;
    end else begin
        if (((icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            p_Result_s_reg_654 <= p_Result_s_fu_238_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        parity <= 1'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state22) & (1'b1 == Output_1_V_TREADY)) | ((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state16)))) begin
            parity <= 1'd1;
        end else if ((((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state25)))) begin
            parity <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        parity_load_reg_642 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            parity_load_reg_642 <= parity;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_13_reg_750 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ret_13_reg_750 <= ret_13_fu_450_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_14_reg_760 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ret_14_reg_760 <= ret_14_fu_472_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_15_reg_582 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ret_15_reg_582 <= ret_15_fu_142_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_16_reg_587 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ret_16_reg_587 <= ret_16_fu_156_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_17_reg_622 <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ret_17_reg_622 <= grp_fu_199_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_18_reg_592 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ret_18_reg_592 <= ret_18_fu_166_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_19_reg_597 <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ret_19_reg_597 <= ret_19_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ret_20_reg_628 <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ret_20_reg_628 <= grp_fu_203_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rhs_5_reg_726 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            rhs_5_reg_726 <= rhs_5_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rhs_6_reg_738 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            rhs_6_reg_738 <= rhs_6_fu_397_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_646 <= 1'd0;
    end else begin
        if (((icmp_ln153_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            tmp_reg_646 <= ret_fu_206_p2[32'd17];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        triangle_2d_same_x0_V_reg_695 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            triangle_2d_same_x0_V_reg_695 <= triangle_2d_same_x0_V_fu_287_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        triangle_2d_same_x1_V_reg_675 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            triangle_2d_same_x1_V_reg_675 <= triangle_2d_same_x1_V_fu_277_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        triangle_2d_same_y0_V_reg_684 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            triangle_2d_same_y0_V_reg_684 <= triangle_2d_same_y0_V_fu_282_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        triangle_2d_same_y1_V_reg_666 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            triangle_2d_same_y1_V_reg_666 <= triangle_2d_same_y1_V_fu_272_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        trunc_ln213_reg_755 <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            trunc_ln213_reg_755 <= trunc_ln213_fu_456_p1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == Output_1_V_TREADY))) begin
        Output_1_V_TDATA = p_Result_1_reg_660;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_1_V_TREADY))) begin
        Output_1_V_TDATA = p_Result_s_reg_654;
    end else if (((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_1_V_TREADY))) begin
        Output_1_V_TDATA = 32'd0;
    end else if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state16))) begin
        Output_1_V_TDATA = p_Result_5_reg_787;
    end else if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state15))) begin
        Output_1_V_TDATA = p_Result_4_reg_781;
    end else if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state14))) begin
        Output_1_V_TDATA = p_Result_3_reg_775;
    end else if ((~(((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd0))) begin
        Output_1_V_TDATA = p_Result_2_fu_496_p5;
    end else if ((~(((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (ap_predicate_op72_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        Output_1_V_TDATA = 32'd1;
    end else begin
        Output_1_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | ((parity == 1'd0) & (icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd0)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state22) & (1'b1 == Output_1_V_TREADY)) | ((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_1_V_TREADY)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_1_V_TREADY)) | (~((1'b1 == ap_block_state6_io) | ((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (ap_predicate_op72_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd0)) | ((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state14)))) begin
        Output_1_V_TVALID = 1'b1;
    end else begin
        Output_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state25))) begin
        Output_2_V_TDATA = p_Result_1_reg_660;
    end else if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state24))) begin
        Output_2_V_TDATA = p_Result_s_reg_654;
    end else if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state23))) begin
        Output_2_V_TDATA = 32'd0;
    end else if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state19))) begin
        Output_2_V_TDATA = p_Result_5_reg_787;
    end else if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state18))) begin
        Output_2_V_TDATA = p_Result_4_reg_781;
    end else if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state17))) begin
        Output_2_V_TDATA = p_Result_3_reg_775;
    end else if ((~(((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd1))) begin
        Output_2_V_TDATA = p_Result_2_fu_496_p5;
    end else if ((~(((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (ap_predicate_op73_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        Output_2_V_TDATA = 32'd1;
    end else begin
        Output_2_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | ((parity == 1'd1) & (icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd1)))) begin
        Output_2_V_TDATA_blk_n = Output_2_V_TREADY;
    end else begin
        Output_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state6_io) | ((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (ap_predicate_op73_write_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd1)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state23)))) begin
        Output_2_V_TVALID = 1'b1;
    end else begin
        Output_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_484_ce = 1'b1;
    end else begin
        grp_fu_484_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((1'b1 == ap_block_state6_io) | ((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (parity == 1'd1) & (icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if ((~((1'b1 == ap_block_state6_io) | ((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (parity == 1'd0) & (icmp_ln153_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if ((~((1'b1 == ap_block_state6_io) | ((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY))) & (icmp_ln153_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if ((~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if ((~((1'b1 == ap_block_state13_io) | ((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1))) & (1'b1 == ap_CS_fsm_state13) & (parity_load_reg_642 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == Output_1_V_TREADY) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'b1 == Output_1_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == Output_1_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == Output_1_V_TREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == Output_2_V_TREADY) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state13 = (((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1)));
end

always @ (*) begin
    ap_block_state13_io = (((1'b0 == Output_1_V_TREADY) & (parity_load_reg_642 == 1'd0)) | ((1'b0 == Output_2_V_TREADY) & (parity_load_reg_642 == 1'd1)));
end

always @ (*) begin
    ap_block_state6 = (((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY)));
end

always @ (*) begin
    ap_block_state6_io = (((ap_predicate_op73_write_state6 == 1'b1) & (1'b0 == Output_2_V_TREADY)) | ((ap_predicate_op72_write_state6 == 1'b1) & (1'b0 == Output_1_V_TREADY)));
end

always @ (*) begin
    ap_predicate_op72_write_state6 = ((parity == 1'd0) & (icmp_ln153_fu_210_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op73_write_state6 = ((parity == 1'd1) & (icmp_ln153_fu_210_p2 == 1'd1));
end

assign grp_fu_188_ce = 1'b1;

assign grp_fu_188_p0 = sext_ln215_fu_182_p1;

assign grp_fu_188_p1 = sext_ln215_1_fu_185_p1;

assign grp_fu_188_p2 = grp_fu_199_p_dout0;

assign grp_fu_199_p_ce = 1'b1;

assign grp_fu_199_p_din0 = sext_ln215_fu_182_p1;

assign grp_fu_199_p_din1 = sext_ln215_1_fu_185_p1;

assign grp_fu_200_ce = 1'b1;

assign grp_fu_200_p0 = sext_ln215_2_fu_194_p1;

assign grp_fu_200_p1 = sext_ln215_3_fu_197_p1;

assign grp_fu_200_p2 = grp_fu_203_p_dout0;

assign grp_fu_203_p_ce = 1'b1;

assign grp_fu_203_p_din0 = sext_ln215_2_fu_194_p1;

assign grp_fu_203_p_din1 = sext_ln215_3_fu_197_p1;

assign grp_fu_207_p_ce = grp_fu_484_ce;

assign grp_fu_207_p_din0 = sext_ln213_fu_478_p1;

assign grp_fu_207_p_din1 = sext_ln213_1_fu_481_p1;

assign grp_fu_484_p0 = sext_ln213_fu_478_p1;

assign grp_fu_484_p1 = sext_ln213_1_fu_481_p1;

assign grp_fu_484_p2 = grp_fu_207_p_dout0;

assign icmp_ln153_fu_210_p2 = ((ret_17_reg_622 == ret_20_reg_628) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_316_p2 = ((triangle_2d_same_x0_V_reg_695 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_292_p2 = ((triangle_2d_same_x1_V_fu_277_p3 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln878_3_fu_378_p2 = ((triangle_2d_same_y0_V_reg_684 < triangle_2d_same_y1_V_reg_666) ? 1'b1 : 1'b0);

assign icmp_ln878_4_fu_382_p2 = ((triangle_2d_same_y0_V_reg_684 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln878_5_fu_302_p2 = ((triangle_2d_same_y1_V_fu_272_p3 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_312_p2 = ((triangle_2d_same_x0_V_reg_695 < triangle_2d_same_x1_V_reg_675) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_349_p2 = ((triangle_2d_same_x0_V_reg_695 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_297_p2 = ((triangle_2d_same_x1_V_fu_277_p3 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_411_p2 = ((triangle_2d_same_y0_V_reg_684 > triangle_2d_same_y1_V_reg_666) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_415_p2 = ((triangle_2d_same_y0_V_reg_684 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_307_p2 = ((triangle_2d_same_y1_V_fu_272_p3 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_345_p2 = ((triangle_2d_same_x0_V_reg_695 > triangle_2d_same_x1_V_reg_675) ? 1'b1 : 1'b0);

assign lhs_5_fu_364_p3 = ((icmp_ln886_fu_345_p2[0:0] == 1'b1) ? select_ln62_fu_353_p3 : select_ln69_fu_359_p3);

assign lhs_6_fu_430_p3 = ((icmp_ln886_3_fu_411_p2[0:0] == 1'b1) ? select_ln62_1_fu_419_p3 : select_ln69_1_fu_425_p3);

assign p_Result_1_fu_260_p5 = {{{{{{8'd0}, {max_min_V}}}, {max_min_V_1}}}, {max_min_V_2}};

assign p_Result_2_fu_496_p5 = {{{{triangle_2d_same_x1_V_reg_675}, {triangle_2d_same_y0_V_reg_684}}, {triangle_2d_same_x0_V_reg_695}}, {8'd0}};

assign p_Result_3_fu_507_p5 = {{{{triangle_2d_z}, {triangle_2d_y2}}, {triangle_2d_x2}}, {triangle_2d_same_y1_V_reg_666}};

assign p_Result_4_fu_515_p4 = {{{lhs_5_reg_732}, {rhs_5_reg_726}}, {grp_fu_207_p_dout0}};

assign p_Result_5_fu_523_p5 = {{{{{{8'd0}, {trunc_ln213_reg_755}}}, {lhs_6_reg_744}}}, {rhs_6_reg_738}};

assign p_Result_s_fu_238_p4 = {{{max_min_V_3}, {max_min_V_4}}, {max_index_V}};

assign ret_13_fu_450_p2 = (zext_ln215_2_fu_444_p1 - zext_ln215_3_fu_447_p1);

assign ret_14_fu_472_p2 = (zext_ln215_4_fu_466_p1 - zext_ln215_5_fu_469_p1);

assign ret_15_fu_142_p2 = (zext_ln215_fu_134_p1 - zext_ln1347_fu_138_p1);

assign ret_16_fu_156_p2 = (zext_ln215_1_fu_148_p1 - zext_ln1347_1_fu_152_p1);

assign ret_18_fu_166_p2 = (zext_ln1347_2_fu_162_p1 - zext_ln1347_1_fu_152_p1);

assign ret_19_fu_176_p2 = (zext_ln1347_3_fu_172_p1 - zext_ln1347_fu_138_p1);

assign ret_fu_206_p2 = (ret_17_reg_622 - ret_20_reg_628);

assign rhs_5_fu_331_p3 = ((icmp_ln878_fu_312_p2[0:0] == 1'b1) ? select_ln42_fu_320_p3 : select_ln49_fu_326_p3);

assign rhs_6_fu_397_p3 = ((icmp_ln878_3_fu_378_p2[0:0] == 1'b1) ? select_ln42_1_fu_386_p3 : select_ln49_1_fu_392_p3);

assign select_ln42_1_fu_386_p3 = ((icmp_ln878_4_fu_382_p2[0:0] == 1'b1) ? triangle_2d_same_y0_V_reg_684 : triangle_2d_y2);

assign select_ln42_fu_320_p3 = ((icmp_ln878_1_fu_316_p2[0:0] == 1'b1) ? triangle_2d_same_x0_V_reg_695 : triangle_2d_x2);

assign select_ln49_1_fu_392_p3 = ((icmp_ln878_5_reg_716[0:0] == 1'b1) ? triangle_2d_same_y1_V_reg_666 : triangle_2d_y2);

assign select_ln49_fu_326_p3 = ((icmp_ln878_2_reg_706[0:0] == 1'b1) ? triangle_2d_same_x1_V_reg_675 : triangle_2d_x2);

assign select_ln62_1_fu_419_p3 = ((icmp_ln886_4_fu_415_p2[0:0] == 1'b1) ? triangle_2d_same_y0_V_reg_684 : triangle_2d_y2);

assign select_ln62_fu_353_p3 = ((icmp_ln886_1_fu_349_p2[0:0] == 1'b1) ? triangle_2d_same_x0_V_reg_695 : triangle_2d_x2);

assign select_ln69_1_fu_425_p3 = ((icmp_ln886_5_reg_721[0:0] == 1'b1) ? triangle_2d_same_y1_V_reg_666 : triangle_2d_y2);

assign select_ln69_fu_359_p3 = ((icmp_ln886_2_reg_711[0:0] == 1'b1) ? triangle_2d_same_x1_V_reg_675 : triangle_2d_x2);

assign sext_ln213_1_fu_481_p1 = $signed(ret_14_reg_760);

assign sext_ln213_fu_478_p1 = ret_13_reg_750;

assign sext_ln215_1_fu_185_p1 = $signed(ret_16_reg_587);

assign sext_ln215_2_fu_194_p1 = $signed(ret_18_reg_592);

assign sext_ln215_3_fu_197_p1 = $signed(ret_19_reg_597);

assign sext_ln215_fu_182_p1 = $signed(ret_15_reg_582);

assign triangle_2d_same_x0_V_fu_287_p3 = ((tmp_reg_646[0:0] == 1'b1) ? triangle_2d_x1 : triangle_2d_x0);

assign triangle_2d_same_x1_V_fu_277_p3 = ((tmp_reg_646[0:0] == 1'b1) ? triangle_2d_x0 : triangle_2d_x1);

assign triangle_2d_same_y0_V_fu_282_p3 = ((tmp_reg_646[0:0] == 1'b1) ? triangle_2d_y1 : triangle_2d_y0);

assign triangle_2d_same_y1_V_fu_272_p3 = ((tmp_reg_646[0:0] == 1'b1) ? triangle_2d_y0 : triangle_2d_y1);

assign trunc_ln213_fu_456_p1 = ret_13_fu_450_p2[7:0];

assign zext_ln1347_1_fu_152_p1 = triangle_2d_y0;

assign zext_ln1347_2_fu_162_p1 = triangle_2d_y2;

assign zext_ln1347_3_fu_172_p1 = triangle_2d_x1;

assign zext_ln1347_fu_138_p1 = triangle_2d_x0;

assign zext_ln215_1_fu_148_p1 = triangle_2d_y1;

assign zext_ln215_2_fu_444_p1 = lhs_5_reg_732;

assign zext_ln215_3_fu_447_p1 = rhs_5_reg_726;

assign zext_ln215_4_fu_466_p1 = lhs_6_reg_744;

assign zext_ln215_5_fu_469_p1 = rhs_6_reg_738;

assign zext_ln215_fu_134_p1 = triangle_2d_x2;

always @ (posedge ap_clk) begin
    p_Result_1_reg_660[31:24] <= 8'b00000000;
    p_Result_5_reg_787[31:24] <= 8'b00000000;
end

endmodule //data_redir_m_rasterization1
