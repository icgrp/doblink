// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module coloringFB_bot_m_coloringFB_bot_m_Pipeline_COLORING_FB_INIT_ROW_COLORING_FB_INIT_COL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        frame_buffer_V_address1,
        frame_buffer_V_ce1,
        frame_buffer_V_we1,
        frame_buffer_V_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] frame_buffer_V_address1;
output   frame_buffer_V_ce1;
output   frame_buffer_V_we1;
output  [7:0] frame_buffer_V_d1;

reg ap_idle;
reg frame_buffer_V_ce1;
reg frame_buffer_V_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_104_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [14:0] add_ln32_fu_166_p2;
reg   [14:0] add_ln32_reg_221;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln32_1_fu_193_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] j_V_fu_56;
wire   [7:0] j_V_1_fu_172_p2;
wire    ap_loop_init;
reg   [8:0] i_V_fu_60;
wire   [8:0] select_ln28_1_fu_142_p3;
reg   [15:0] indvar_flatten_fu_64;
wire   [15:0] add_ln1057_fu_110_p2;
wire   [0:0] icmp_ln1057_1_fu_128_p2;
wire   [8:0] i_V_2_fu_122_p2;
wire   [7:0] trunc_ln32_fu_150_p1;
wire   [7:0] select_ln28_fu_134_p3;
wire   [14:0] tmp_1_cast_fu_154_p3;
wire   [14:0] zext_ln32_fu_162_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 add_ln32_reg_221 = 15'd0;
#0 j_V_fu_56 = 8'd0;
#0 i_V_fu_60 = 9'd0;
#0 indvar_flatten_fu_64 = 16'd0;
#0 ap_done_reg = 1'b0;
end

coloringFB_bot_m_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        add_ln32_reg_221 <= 15'd0;
    end else begin
        if (((icmp_ln1057_fu_104_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add_ln32_reg_221 <= add_ln32_fu_166_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_V_fu_60 <= 9'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((ap_loop_init == 1'b1)) begin
                i_V_fu_60 <= 9'd0;
            end else if (((icmp_ln1057_fu_104_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                i_V_fu_60 <= select_ln28_1_fu_142_p3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        indvar_flatten_fu_64 <= 16'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((ap_loop_init == 1'b1)) begin
                indvar_flatten_fu_64 <= 16'd0;
            end else if (((icmp_ln1057_fu_104_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                indvar_flatten_fu_64 <= add_ln1057_fu_110_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        j_V_fu_56 <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if ((ap_loop_init == 1'b1)) begin
                j_V_fu_56 <= 8'd0;
            end else if (((icmp_ln1057_fu_104_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                j_V_fu_56 <= j_V_1_fu_172_p2;
            end
        end
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        frame_buffer_V_ce1 = 1'b1;
    end else begin
        frame_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        frame_buffer_V_we1 = 1'b1;
    end else begin
        frame_buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_110_p2 = (indvar_flatten_fu_64 + 16'd1);

assign add_ln32_fu_166_p2 = (tmp_1_cast_fu_154_p3 + zext_ln32_fu_162_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign frame_buffer_V_address1 = zext_ln32_1_fu_193_p1;

assign frame_buffer_V_d1 = 8'd0;

assign i_V_2_fu_122_p2 = (i_V_fu_60 + 9'd1);

assign icmp_ln1057_1_fu_128_p2 = ((j_V_fu_56 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_104_p2 = ((indvar_flatten_fu_64 == 16'd32768) ? 1'b1 : 1'b0);

assign j_V_1_fu_172_p2 = (select_ln28_fu_134_p3 + 8'd1);

assign select_ln28_1_fu_142_p3 = ((icmp_ln1057_1_fu_128_p2[0:0] == 1'b1) ? i_V_2_fu_122_p2 : i_V_fu_60);

assign select_ln28_fu_134_p3 = ((icmp_ln1057_1_fu_128_p2[0:0] == 1'b1) ? 8'd0 : j_V_fu_56);

assign tmp_1_cast_fu_154_p3 = {{trunc_ln32_fu_150_p1}, {7'd0}};

assign trunc_ln32_fu_150_p1 = select_ln28_1_fu_142_p3[7:0];

assign zext_ln32_1_fu_193_p1 = add_ln32_reg_221;

assign zext_ln32_fu_162_p1 = select_ln28_fu_134_p3;

endmodule //coloringFB_bot_m_coloringFB_bot_m_Pipeline_COLORING_FB_INIT_ROW_COLORING_FB_INIT_COL
