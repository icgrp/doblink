-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity circ_buff_write_many128 is
generic (
    C_M_AXI_GMEM_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_BUSER_WIDTH-1 downto 0);
    fifo_in_0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_0_V_TVALID : IN STD_LOGIC;
    fifo_in_0_V_TREADY : OUT STD_LOGIC;
    fifo_in_1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_1_V_TVALID : IN STD_LOGIC;
    fifo_in_1_V_TREADY : OUT STD_LOGIC;
    fifo_in_2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_2_V_TVALID : IN STD_LOGIC;
    fifo_in_2_V_TREADY : OUT STD_LOGIC;
    fifo_in_3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_3_V_TVALID : IN STD_LOGIC;
    fifo_in_3_V_TREADY : OUT STD_LOGIC;
    fifo_in_4_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_4_V_TVALID : IN STD_LOGIC;
    fifo_in_4_V_TREADY : OUT STD_LOGIC;
    fifo_in_5_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_in_5_V_TVALID : IN STD_LOGIC;
    fifo_in_5_V_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of circ_buff_write_many128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "circ_buff_write_many128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=0,HLS_SYN_FF=1564,HLS_SYN_LUT=2858,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_200 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000111111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv13_201 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal output_V : STD_LOGIC_VECTOR (31 downto 0);
    signal reset : STD_LOGIC_VECTOR (7 downto 0);
    signal debug_register : STD_LOGIC_VECTOR (63 downto 0);
    signal useable_words_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal useable_words_ce0 : STD_LOGIC;
    signal useable_words_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal local_words_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_words_ce0 : STD_LOGIC;
    signal local_words_we0 : STD_LOGIC;
    signal local_words_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal head_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal head_ce0 : STD_LOGIC;
    signal head_we0 : STD_LOGIC;
    signal head_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal head_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_out_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_out_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_15_reg_1145 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal tmp_15_reg_1145_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal tmp_15_reg_1145_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal or_cond_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_in_0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal stride_reg_400 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_in_1_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_in_2_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_in_3_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_in_4_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_in_5_V_TDATA_blk_n : STD_LOGIC;
    signal gmem_out_AWVALID : STD_LOGIC;
    signal gmem_out_AWREADY : STD_LOGIC;
    signal gmem_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_out_WVALID : STD_LOGIC;
    signal gmem_out_WREADY : STD_LOGIC;
    signal gmem_out_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_out_ARVALID : STD_LOGIC;
    signal gmem_out_ARREADY : STD_LOGIC;
    signal gmem_out_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_out_RVALID : STD_LOGIC;
    signal gmem_out_RREADY : STD_LOGIC;
    signal gmem_out_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_out_RLAST : STD_LOGIC;
    signal gmem_out_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_out_BVALID : STD_LOGIC;
    signal gmem_out_BREADY : STD_LOGIC;
    signal gmem_out_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_out_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_reg_514 : STD_LOGIC_VECTOR (15 downto 0);
    signal h2_reg_525 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_cast6_fu_582_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_28_cast6_reg_1015 : STD_LOGIC_VECTOR (28 downto 0);
    signal first_load_load_fu_586_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_load_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_596_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1029 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1034 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stride_1_fu_619_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stride_1_reg_1050 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal idx_fu_625_p5 : STD_LOGIC_VECTOR (11 downto 0);
    signal idx_reg_1055 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_cast_fu_637_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal idx_cast_reg_1060 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_V2_sum_fu_651_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum_reg_1065 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_ioackin_gmem_out_ARREADY : STD_LOGIC;
    signal head_addr_1_reg_1076 : STD_LOGIC_VECTOR (2 downto 0);
    signal stream_tail_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_tail_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_cast5_fu_676_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal idx_cast5_reg_1093 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal stream_head_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal words_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytes_to_write_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_to_write_reg_1112 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal h_1_fu_772_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_1_reg_1122 : STD_LOGIC_VECTOR (14 downto 0);
    signal part_V_fu_838_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_empty_n_phi_fu_444_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal part_V_1_fu_883_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_predicate_op181_read_state15 : BOOLEAN;
    signal ap_predicate_op183_read_state15 : BOOLEAN;
    signal ap_predicate_op185_read_state15 : BOOLEAN;
    signal ap_predicate_op187_read_state15 : BOOLEAN;
    signal ap_predicate_op189_read_state15 : BOOLEAN;
    signal ap_predicate_op191_read_state15 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal word_V_fu_889_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_out_AWREADY : STD_LOGIC;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_out_WREADY : STD_LOGIC;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_15_reg_1145_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1145_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1145_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1145_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_910_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal output_V2_sum4_fu_934_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum4_reg_1159 : STD_LOGIC_VECTOR (28 downto 0);
    signal stream_head_2_cast_fu_949_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_head_2_cast_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_V_load_reg_1169 : STD_LOGIC_VECTOR (127 downto 0);
    signal output_V2_sum3_fu_972_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum3_reg_1180 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_2_fu_998_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal data_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal i_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal first_flag_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state32 : BOOLEAN;
    signal tmp_4_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_412 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_phi_mux_low_phi_fu_427_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal bytes_to_write_2_fu_762_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_to_write_1_reg_459 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_reg_469 : STD_LOGIC_VECTOR (127 downto 0);
    signal t_V_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_hi_phi_fu_494_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_val_assign_1_phi_fu_518_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_reg_536 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_first_flag_1_phi_fu_551_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_flag_1_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_new_1_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum_cast_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum4_cast_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum3_cast_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_out_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_out_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_out_WREADY : STD_LOGIC := '0';
    signal p_1_fu_987_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_fu_572_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_fu_641_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_cast_fu_647_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_cast_fu_679_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_683_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_687_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_cast_fu_699_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_cast_fu_706_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_cast4_fu_693_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_fu_715_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_cast3_fu_703_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_fu_737_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_743_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_neg150_pn_fu_749_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_cast_fu_842_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_assign_fu_859_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal op2_assign_fu_859_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal hi_p_V_fu_851_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_25_fu_873_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_fu_877_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal h2_cast_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_cast_fu_916_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_920_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_cast_fu_925_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_30_fu_939_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal stream_head_1_fu_943_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_963_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_cast_fu_968_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_255 : BOOLEAN;
    signal ap_condition_743 : BOOLEAN;
    signal ap_condition_753 : BOOLEAN;

    component circ_buff_write_many128_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_write_many128_local_words IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_write_many128_head IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component circ_buff_write_many128_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component circ_buff_write_many128_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset : OUT STD_LOGIC_VECTOR (7 downto 0);
        debug_register : OUT STD_LOGIC_VECTOR (63 downto 0);
        useable_words_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        useable_words_ce0 : IN STD_LOGIC;
        useable_words_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_write_many128_gmem_out_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    local_words_U : component circ_buff_write_many128_local_words
    generic map (
        DataWidth => 8,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_words_address0,
        ce0 => local_words_ce0,
        we0 => local_words_we0,
        d0 => useable_words_q0,
        q0 => local_words_q0);

    head_U : component circ_buff_write_many128_head
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => head_address0,
        ce0 => head_ce0,
        we0 => head_we0,
        d0 => head_d0,
        q0 => head_q0);

    circ_buff_write_many128_control_s_axi_U : component circ_buff_write_many128_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_V => output_V,
        reset => reset,
        debug_register => debug_register,
        useable_words_address0 => useable_words_address0,
        useable_words_ce0 => useable_words_ce0,
        useable_words_q0 => useable_words_q0);

    circ_buff_write_many128_gmem_out_m_axi_U : component circ_buff_write_many128_gmem_out_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_out_AWVALID,
        AWREADY => m_axi_gmem_out_AWREADY,
        AWADDR => m_axi_gmem_out_AWADDR,
        AWID => m_axi_gmem_out_AWID,
        AWLEN => m_axi_gmem_out_AWLEN,
        AWSIZE => m_axi_gmem_out_AWSIZE,
        AWBURST => m_axi_gmem_out_AWBURST,
        AWLOCK => m_axi_gmem_out_AWLOCK,
        AWCACHE => m_axi_gmem_out_AWCACHE,
        AWPROT => m_axi_gmem_out_AWPROT,
        AWQOS => m_axi_gmem_out_AWQOS,
        AWREGION => m_axi_gmem_out_AWREGION,
        AWUSER => m_axi_gmem_out_AWUSER,
        WVALID => m_axi_gmem_out_WVALID,
        WREADY => m_axi_gmem_out_WREADY,
        WDATA => m_axi_gmem_out_WDATA,
        WSTRB => m_axi_gmem_out_WSTRB,
        WLAST => m_axi_gmem_out_WLAST,
        WID => m_axi_gmem_out_WID,
        WUSER => m_axi_gmem_out_WUSER,
        ARVALID => m_axi_gmem_out_ARVALID,
        ARREADY => m_axi_gmem_out_ARREADY,
        ARADDR => m_axi_gmem_out_ARADDR,
        ARID => m_axi_gmem_out_ARID,
        ARLEN => m_axi_gmem_out_ARLEN,
        ARSIZE => m_axi_gmem_out_ARSIZE,
        ARBURST => m_axi_gmem_out_ARBURST,
        ARLOCK => m_axi_gmem_out_ARLOCK,
        ARCACHE => m_axi_gmem_out_ARCACHE,
        ARPROT => m_axi_gmem_out_ARPROT,
        ARQOS => m_axi_gmem_out_ARQOS,
        ARREGION => m_axi_gmem_out_ARREGION,
        ARUSER => m_axi_gmem_out_ARUSER,
        RVALID => m_axi_gmem_out_RVALID,
        RREADY => m_axi_gmem_out_RREADY,
        RDATA => m_axi_gmem_out_RDATA,
        RLAST => m_axi_gmem_out_RLAST,
        RID => m_axi_gmem_out_RID,
        RUSER => m_axi_gmem_out_RUSER,
        RRESP => m_axi_gmem_out_RRESP,
        BVALID => m_axi_gmem_out_BVALID,
        BREADY => m_axi_gmem_out_BREADY,
        BRESP => m_axi_gmem_out_BRESP,
        BID => m_axi_gmem_out_BID,
        BUSER => m_axi_gmem_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_out_ARVALID,
        I_ARREADY => gmem_out_ARREADY,
        I_ARADDR => gmem_out_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_out_RVALID,
        I_RREADY => gmem_out_RREADY,
        I_RDATA => gmem_out_RDATA,
        I_RID => gmem_out_RID,
        I_RUSER => gmem_out_RUSER,
        I_RRESP => gmem_out_RRESP,
        I_RLAST => gmem_out_RLAST,
        I_AWVALID => gmem_out_AWVALID,
        I_AWREADY => gmem_out_AWREADY,
        I_AWADDR => gmem_out_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_out_WVALID,
        I_WREADY => gmem_out_WREADY,
        I_WDATA => gmem_out_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_out_BVALID,
        I_BREADY => gmem_out_BREADY,
        I_BRESP => gmem_out_BRESP,
        I_BID => gmem_out_BID,
        I_BUSER => gmem_out_BUSER);

    data_V_U : component circ_buff_write_many128_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => p_s_reg_469,
        q0 => data_V_q0);

    circ_buff_write_many128_mux_42_8_1_1_U1 : component circ_buff_write_many128_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_20,
        din2 => ap_const_lv8_40,
        din3 => ap_const_lv8_60,
        din4 => op2_assign_fu_859_p5,
        dout => op2_assign_fu_859_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and ((ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0) or (tmp_11_fu_767_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state17)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and ((ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0) or (tmp_11_fu_767_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_gmem_out_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_0;
                    elsif ((gmem_out_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_0;
                elsif ((((gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (gmem_out_AWREADY = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_0;
                elsif ((((gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (gmem_out_WREADY = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bytes_to_write_1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                if ((tmp_11_fu_767_p2 = ap_const_lv1_0)) then 
                    bytes_to_write_1_reg_459 <= bytes_to_write_reg_1112;
                elsif (((tmp_11_fu_767_p2 = ap_const_lv1_1) and (ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0))) then 
                    bytes_to_write_1_reg_459 <= bytes_to_write_2_fu_762_p1;
                end if;
            end if; 
        end if;
    end process;

    first_flag_1_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_992_p2 = ap_const_lv1_1))) then 
                first_flag_1_reg_547 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_613_p2 = ap_const_lv1_1))) then 
                first_flag_1_reg_547 <= first_flag_reg_387;
            end if; 
        end if;
    end process;

    first_flag_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_590_p2 = ap_const_lv1_1) and (first_load_reg_1022 = ap_const_lv1_0))) then 
                first_flag_reg_387 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (first_load_load_fu_586_p1 = ap_const_lv1_1))) then 
                first_flag_reg_387 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    first_new_1_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_992_p2 = ap_const_lv1_1))) then 
                first_new_1_reg_559 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_613_p2 = ap_const_lv1_1))) then 
                first_new_1_reg_559 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    h2_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_fu_904_p2 = ap_const_lv1_1))) then 
                h2_reg_525 <= h_2_fu_910_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and ((ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0) or (tmp_11_fu_767_p2 = ap_const_lv1_0)))) then 
                h2_reg_525 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    h_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                h_reg_412 <= h_1_reg_1122;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_cond_fu_725_p2 = ap_const_lv1_0))) then 
                h_reg_412 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    i1_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_4_fu_607_p2 = ap_const_lv1_1) and (first_load_reg_1022 = ap_const_lv1_1)) or ((tmp_4_fu_607_p2 = ap_const_lv1_1) and (tmp_1_fu_590_p2 = ap_const_lv1_1))))) then 
                i1_reg_536 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_992_p2 = ap_const_lv1_0))) then 
                i1_reg_536 <= i_2_fu_998_p2;
            end if; 
        end if;
    end process;

    i_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (first_load_load_fu_586_p1 = ap_const_lv1_0))) then 
                i_reg_376 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_376 <= i_1_reg_1029;
            end if; 
        end if;
    end process;

    p_s_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
                p_s_reg_469 <= part_V_1_fu_883_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_1) and (tmp_11_fu_767_p2 = ap_const_lv1_1))) then 
                p_s_reg_469 <= part_V_fu_838_p1;
            end if; 
        end if;
    end process;

    stride_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((first_load_reg_1022 = ap_const_lv1_1) and (tmp_4_fu_607_p2 = ap_const_lv1_0)) or ((tmp_1_fu_590_p2 = ap_const_lv1_1) and (tmp_4_fu_607_p2 = ap_const_lv1_0))))) then 
                stride_reg_400 <= ap_const_lv3_0;
            elsif ((not(((gmem_out_BVALID = ap_const_logic_0) and (or_cond_reg_1108 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                stride_reg_400 <= stride_1_reg_1050;
            end if; 
        end if;
    end process;

    t_V_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
                t_V_reg_480 <= word_V_fu_889_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_1) and (tmp_11_fu_767_p2 = ap_const_lv1_1))) then 
                t_V_reg_480 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    val_assign_1_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1))) then 
                val_assign_1_reg_514 <= stream_head_2_cast_reg_1164;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and ((ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0) or (tmp_11_fu_767_p2 = ap_const_lv1_0)))) then 
                val_assign_1_reg_514 <= stream_head_reg_1098;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_cond_fu_725_p2 = ap_const_lv1_0))) then
                bytes_to_write_reg_1112 <= bytes_to_write_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1))) then
                data_V_load_reg_1169 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_phi_mux_first_flag_1_phi_fu_551_p4 = ap_const_lv1_1))) then
                first <= first_new_1_reg_559;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                first_load_reg_1022 <= first;
                    tmp_28_cast6_reg_1015(27 downto 0) <= tmp_28_cast6_fu_582_p1(27 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                h_1_reg_1122 <= h_1_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                head_addr_1_reg_1076 <= tmp_9_fu_666_p1(3 - 1 downto 0);
                stream_tail_reg_1081 <= stream_tail_fu_672_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (first_load_reg_1022 = ap_const_lv1_0))) then
                i_1_reg_1029 <= i_1_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    idx_cast5_reg_1093(3 downto 1) <= idx_cast5_fu_676_p1(3 downto 1);    idx_cast5_reg_1093(11 downto 9) <= idx_cast5_fu_676_p1(11 downto 9);
                or_cond_reg_1108 <= or_cond_fu_725_p2;
                stream_head_reg_1098 <= head_q0;
                words_reg_1103 <= local_words_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_613_p2 = ap_const_lv1_0))) then
                    idx_cast_reg_1060(3 downto 1) <= idx_cast_fu_637_p1(3 downto 1);    idx_cast_reg_1060(11 downto 9) <= idx_cast_fu_637_p1(11 downto 9);
                    idx_reg_1055(3 downto 1) <= idx_fu_625_p5(3 downto 1);    idx_reg_1055(11 downto 9) <= idx_fu_625_p5(11 downto 9);
                output_V2_sum_reg_1065 <= output_V2_sum_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                output_V2_sum3_reg_1180 <= output_V2_sum3_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_fu_904_p2 = ap_const_lv1_1))) then
                output_V2_sum4_reg_1159 <= output_V2_sum4_fu_934_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_fu_904_p2 = ap_const_lv1_1))) then
                    stream_head_2_cast_reg_1164(8 downto 0) <= stream_head_2_cast_fu_949_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                stride_1_reg_1050 <= stride_1_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_15_reg_1145 <= tmp_15_fu_904_p2;
                tmp_15_reg_1145_pp1_iter1_reg <= tmp_15_reg_1145;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                tmp_15_reg_1145_pp1_iter2_reg <= tmp_15_reg_1145_pp1_iter1_reg;
                tmp_15_reg_1145_pp1_iter3_reg <= tmp_15_reg_1145_pp1_iter2_reg;
                tmp_15_reg_1145_pp1_iter4_reg <= tmp_15_reg_1145_pp1_iter3_reg;
                tmp_15_reg_1145_pp1_iter5_reg <= tmp_15_reg_1145_pp1_iter4_reg;
                tmp_15_reg_1145_pp1_iter6_reg <= tmp_15_reg_1145_pp1_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_590_p2 = ap_const_lv1_0) and (first_load_reg_1022 = ap_const_lv1_0))) then
                    tmp_2_reg_1034(2 downto 0) <= tmp_2_fu_602_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_28_cast6_reg_1015(28) <= '0';
    tmp_2_reg_1034(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    idx_reg_1055(0) <= '0';
    idx_reg_1055(8 downto 4) <= "00000";
    idx_cast_reg_1060(0) <= '0';
    idx_cast_reg_1060(8 downto 4) <= "00000";
    idx_cast_reg_1060(12) <= '0';
    idx_cast5_reg_1093(0) <= '0';
    idx_cast5_reg_1093(8 downto 4) <= "00000";
    idx_cast5_reg_1093(16 downto 12) <= "00000";
    stream_head_2_cast_reg_1164(15 downto 9) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter7, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state32, or_cond_reg_1108, ap_CS_fsm_state15, tmp_13_fu_846_p2, gmem_out_RVALID, gmem_out_BVALID, first_load_reg_1022, ap_CS_fsm_state2, tmp_1_fu_590_p2, ap_CS_fsm_state4, exitcond1_fu_613_p2, ap_sig_ioackin_gmem_out_ARREADY, ap_CS_fsm_state13, or_cond_fu_725_p2, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_phi_mux_empty_n_phi_fu_444_p12, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15, tmp_15_fu_904_p2, ap_sig_ioackin_gmem_out_AWREADY, ap_sig_ioackin_gmem_out_WREADY, ap_enable_reg_pp1_iter0, ap_CS_fsm_state33, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter6, tmp_4_fu_607_p2, exitcond_fu_992_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_4_fu_607_p2 = ap_const_lv1_1) and (first_load_reg_1022 = ap_const_lv1_1)) or ((tmp_4_fu_607_p2 = ap_const_lv1_1) and (tmp_1_fu_590_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((first_load_reg_1022 = ap_const_lv1_1) and (tmp_4_fu_607_p2 = ap_const_lv1_0)) or ((tmp_1_fu_590_p2 = ap_const_lv1_1) and (tmp_4_fu_607_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_613_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_gmem_out_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_cond_fu_725_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((ap_phi_mux_empty_n_phi_fu_444_p12 = ap_const_lv1_0) or (tmp_11_fu_767_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif ((not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (tmp_15_fu_904_p2 = ap_const_lv1_0))) and not(((ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (tmp_15_fu_904_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if ((not(((gmem_out_BVALID = ap_const_logic_0) and (or_cond_reg_1108 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_992_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(17);
    ap_CS_fsm_state26 <= ap_CS_fsm(18);
    ap_CS_fsm_state27 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(24);
    ap_CS_fsm_state33 <= ap_CS_fsm(25);
    ap_CS_fsm_state34 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter7, tmp_15_reg_1145_pp1_iter6_reg, gmem_out_BVALID)
    begin
                ap_block_pp1_stage0_01001 <= ((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter7, tmp_15_reg_1145_pp1_iter6_reg, gmem_out_BVALID, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp1_stage0_11001 <= (((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter7, tmp_15_reg_1145_pp1_iter6_reg, gmem_out_BVALID, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp1_stage0_subdone <= (((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state15_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
                ap_block_state15 <= (((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)));
    end process;

        ap_block_state17_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(tmp_15_reg_1145, ap_sig_ioackin_gmem_out_AWREADY)
    begin
                ap_block_state18_io <= ((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (tmp_15_reg_1145 = ap_const_lv1_1));
    end process;

        ap_block_state18_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(tmp_15_reg_1145_pp1_iter1_reg, ap_sig_ioackin_gmem_out_WREADY)
    begin
                ap_block_state19_io <= ((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_0) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state19_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp1_stage0_iter7_assign_proc : process(tmp_15_reg_1145_pp1_iter6_reg, gmem_out_BVALID)
    begin
                ap_block_state24_pp1_stage0_iter7 <= ((gmem_out_BVALID = ap_const_logic_0) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_state32_assign_proc : process(or_cond_reg_1108, gmem_out_BVALID)
    begin
                ap_block_state32 <= ((gmem_out_BVALID = ap_const_logic_0) and (or_cond_reg_1108 = ap_const_lv1_0));
    end process;


    ap_condition_255_assign_proc : process(stride_reg_400)
    begin
                ap_condition_255 <= (not((stride_reg_400 = ap_const_lv3_4)) and not((stride_reg_400 = ap_const_lv3_3)) and not((stride_reg_400 = ap_const_lv3_2)) and not((stride_reg_400 = ap_const_lv3_1)) and not((stride_reg_400 = ap_const_lv3_0)));
    end process;


    ap_condition_743_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_15_reg_1145, ap_block_pp1_stage0_01001)
    begin
                ap_condition_743 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1));
    end process;


    ap_condition_753_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_15_reg_1145_pp1_iter1_reg, ap_block_pp1_stage0_01001)
    begin
                ap_condition_753 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp1_exit_iter0_state17_assign_proc : process(tmp_15_fu_904_p2)
    begin
        if ((tmp_15_fu_904_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6)
    begin
        if (((ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_n_phi_fu_444_p12_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_condition_255)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1))) then
            if ((stride_reg_400 = ap_const_lv3_0)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_0_V_TVALID, others=>'-');
            elsif ((stride_reg_400 = ap_const_lv3_1)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_1_V_TVALID, others=>'-');
            elsif ((stride_reg_400 = ap_const_lv3_2)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_2_V_TVALID, others=>'-');
            elsif ((stride_reg_400 = ap_const_lv3_3)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_3_V_TVALID, others=>'-');
            elsif ((stride_reg_400 = ap_const_lv3_4)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_4_V_TVALID, others=>'-');
            elsif ((ap_const_boolean_1 = ap_condition_255)) then 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= (0=>fifo_in_5_V_TVALID, others=>'-');
            else 
                ap_phi_mux_empty_n_phi_fu_444_p12 <= "X";
            end if;
        else 
            ap_phi_mux_empty_n_phi_fu_444_p12 <= "X";
        end if; 
    end process;

    ap_phi_mux_first_flag_1_phi_fu_551_p4 <= first_flag_1_reg_547;

    ap_phi_mux_hi_phi_fu_494_p12_assign_proc : process(fifo_in_0_V_TDATA, fifo_in_1_V_TDATA, fifo_in_2_V_TDATA, fifo_in_3_V_TDATA, fifo_in_4_V_TDATA, fifo_in_5_V_TDATA, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2, ap_condition_255)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then
            if ((stride_reg_400 = ap_const_lv3_0)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_0_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_1)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_1_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_2)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_2_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_3)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_3_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_4)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_4_V_TDATA;
            elsif ((ap_const_boolean_1 = ap_condition_255)) then 
                ap_phi_mux_hi_phi_fu_494_p12 <= fifo_in_5_V_TDATA;
            else 
                ap_phi_mux_hi_phi_fu_494_p12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_hi_phi_fu_494_p12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_low_phi_fu_427_p12_assign_proc : process(fifo_in_0_V_TDATA, fifo_in_1_V_TDATA, fifo_in_2_V_TDATA, fifo_in_3_V_TDATA, fifo_in_4_V_TDATA, fifo_in_5_V_TDATA, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_condition_255)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1))) then
            if ((stride_reg_400 = ap_const_lv3_0)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_0_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_1)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_1_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_2)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_2_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_3)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_3_V_TDATA;
            elsif ((stride_reg_400 = ap_const_lv3_4)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_4_V_TDATA;
            elsif ((ap_const_boolean_1 = ap_condition_255)) then 
                ap_phi_mux_low_phi_fu_427_p12 <= fifo_in_5_V_TDATA;
            else 
                ap_phi_mux_low_phi_fu_427_p12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_low_phi_fu_427_p12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_val_assign_1_phi_fu_518_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_15_reg_1145, val_assign_1_reg_514, stream_head_2_cast_reg_1164)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_val_assign_1_phi_fu_518_p4 <= stream_head_2_cast_reg_1164;
        else 
            ap_phi_mux_val_assign_1_phi_fu_518_p4 <= val_assign_1_reg_514;
        end if; 
    end process;


    ap_predicate_op181_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op181_read_state15 <= ((stride_reg_400 = ap_const_lv3_4) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op183_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op183_read_state15 <= ((stride_reg_400 = ap_const_lv3_3) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op185_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op185_read_state15 <= ((stride_reg_400 = ap_const_lv3_2) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op187_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op187_read_state15 <= ((stride_reg_400 = ap_const_lv3_1) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op189_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op189_read_state15 <= ((stride_reg_400 = ap_const_lv3_0) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op191_read_state15_assign_proc : process(stride_reg_400, tmp_13_fu_846_p2)
    begin
                ap_predicate_op191_read_state15 <= (not((stride_reg_400 = ap_const_lv3_4)) and not((stride_reg_400 = ap_const_lv3_3)) and not((stride_reg_400 = ap_const_lv3_2)) and not((stride_reg_400 = ap_const_lv3_1)) and not((stride_reg_400 = ap_const_lv3_0)) and (tmp_13_fu_846_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_out_ARREADY_assign_proc : process(gmem_out_ARREADY, ap_reg_ioackin_gmem_out_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_ARREADY <= gmem_out_ARREADY;
        else 
            ap_sig_ioackin_gmem_out_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_out_AWREADY_assign_proc : process(gmem_out_AWREADY, ap_reg_ioackin_gmem_out_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_AWREADY <= gmem_out_AWREADY;
        else 
            ap_sig_ioackin_gmem_out_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_out_WREADY_assign_proc : process(gmem_out_WREADY, ap_reg_ioackin_gmem_out_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_WREADY <= gmem_out_WREADY;
        else 
            ap_sig_ioackin_gmem_out_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bytes_to_write_2_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_412),16));
    bytes_to_write_fu_757_p2 <= std_logic_vector(unsigned(p_neg150_pn_fu_749_p3) + unsigned(stream_tail_reg_1081));

    data_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, tmp_18_fu_895_p1, tmp_21_fu_929_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            data_V_address0 <= tmp_21_fu_929_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_address0 <= tmp_18_fu_895_p1(9 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_613_p2 <= "1" when (stride_reg_400 = ap_const_lv3_6) else "0";
    exitcond_fu_992_p2 <= "1" when (i1_reg_536 = ap_const_lv3_6) else "0";

    fifo_in_0_V_TDATA_blk_n_assign_proc : process(fifo_in_0_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if (((stride_reg_400 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_0_V_TDATA_blk_n <= fifo_in_0_V_TVALID;
        else 
            fifo_in_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_0_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if ((((stride_reg_400 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op189_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_0_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_0_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    fifo_in_1_V_TDATA_blk_n_assign_proc : process(fifo_in_1_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if (((stride_reg_400 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_1_V_TDATA_blk_n <= fifo_in_1_V_TVALID;
        else 
            fifo_in_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_1_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if ((((stride_reg_400 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op187_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_1_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_1_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    fifo_in_2_V_TDATA_blk_n_assign_proc : process(fifo_in_2_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if (((stride_reg_400 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_2_V_TDATA_blk_n <= fifo_in_2_V_TVALID;
        else 
            fifo_in_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_2_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if ((((stride_reg_400 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op185_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_2_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_2_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    fifo_in_3_V_TDATA_blk_n_assign_proc : process(fifo_in_3_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if (((stride_reg_400 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_3_V_TDATA_blk_n <= fifo_in_3_V_TVALID;
        else 
            fifo_in_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_3_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if ((((stride_reg_400 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op183_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_3_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_3_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    fifo_in_4_V_TDATA_blk_n_assign_proc : process(fifo_in_4_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if (((stride_reg_400 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_4_V_TDATA_blk_n <= fifo_in_4_V_TVALID;
        else 
            fifo_in_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_4_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if ((((stride_reg_400 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op181_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_4_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_4_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    fifo_in_5_V_TDATA_blk_n_assign_proc : process(fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_13_fu_846_p2)
    begin
        if ((not((stride_reg_400 = ap_const_lv3_4)) and not((stride_reg_400 = ap_const_lv3_3)) and not((stride_reg_400 = ap_const_lv3_2)) and not((stride_reg_400 = ap_const_lv3_1)) and not((stride_reg_400 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_13_fu_846_p2 = ap_const_lv1_1))) then 
            fifo_in_5_V_TDATA_blk_n <= fifo_in_5_V_TVALID;
        else 
            fifo_in_5_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_in_5_V_TREADY_assign_proc : process(fifo_in_0_V_TVALID, fifo_in_1_V_TVALID, fifo_in_2_V_TVALID, fifo_in_3_V_TVALID, fifo_in_4_V_TVALID, fifo_in_5_V_TVALID, ap_CS_fsm_state15, stride_reg_400, tmp_11_fu_767_p2, ap_CS_fsm_state14, ap_predicate_op181_read_state15, ap_predicate_op183_read_state15, ap_predicate_op185_read_state15, ap_predicate_op187_read_state15, ap_predicate_op189_read_state15, ap_predicate_op191_read_state15)
    begin
        if (((not((stride_reg_400 = ap_const_lv3_4)) and not((stride_reg_400 = ap_const_lv3_3)) and not((stride_reg_400 = ap_const_lv3_2)) and not((stride_reg_400 = ap_const_lv3_1)) and not((stride_reg_400 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_767_p2 = ap_const_lv1_1)) or (not((((ap_predicate_op191_read_state15 = ap_const_boolean_1) and (fifo_in_5_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op189_read_state15 = ap_const_boolean_1) and (fifo_in_0_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op187_read_state15 = ap_const_boolean_1) and (fifo_in_1_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op185_read_state15 = ap_const_boolean_1) and (fifo_in_2_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op183_read_state15 = ap_const_boolean_1) and (fifo_in_3_V_TVALID = ap_const_logic_0)) or ((ap_predicate_op181_read_state15 = ap_const_boolean_1) and (fifo_in_4_V_TVALID = ap_const_logic_0)))) and (ap_predicate_op191_read_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            fifo_in_5_V_TREADY <= ap_const_logic_1;
        else 
            fifo_in_5_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    first_load_load_fu_586_p1 <= first;
    gmem_out_ARADDR <= output_V2_sum_cast_fu_656_p1(32 - 1 downto 0);

    gmem_out_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_gmem_out_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_out_ARVALID <= ap_const_logic_1;
        else 
            gmem_out_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_AWADDR_assign_proc : process(ap_CS_fsm_state26, output_V2_sum4_cast_fu_953_p1, output_V2_sum3_cast_fu_977_p1, ap_reg_ioackin_gmem_out_AWREADY, ap_condition_743)
    begin
        if ((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                gmem_out_AWADDR <= output_V2_sum3_cast_fu_977_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_743)) then 
                gmem_out_AWADDR <= output_V2_sum4_cast_fu_953_p1(32 - 1 downto 0);
            else 
                gmem_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_out_AWVALID_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_15_reg_1145, ap_CS_fsm_state26, ap_reg_ioackin_gmem_out_AWREADY, ap_block_pp1_stage0_01001)
    begin
        if ((((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1)))) then 
            gmem_out_AWVALID <= ap_const_logic_1;
        else 
            gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_BREADY_assign_proc : process(ap_enable_reg_pp1_iter7, tmp_15_reg_1145_pp1_iter6_reg, ap_CS_fsm_state32, or_cond_reg_1108, gmem_out_BVALID, ap_block_pp1_stage0_11001)
    begin
        if (((not(((gmem_out_BVALID = ap_const_logic_0) and (or_cond_reg_1108 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state32) and (or_cond_reg_1108 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1)))) then 
            gmem_out_BREADY <= ap_const_logic_1;
        else 
            gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_RREADY_assign_proc : process(ap_CS_fsm_state12, gmem_out_RVALID)
    begin
        if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_out_RREADY <= ap_const_logic_1;
        else 
            gmem_out_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_WDATA_assign_proc : process(ap_CS_fsm_state27, data_V_load_reg_1169, ap_reg_ioackin_gmem_out_WREADY, p_1_fu_987_p1, ap_condition_753)
    begin
        if ((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                gmem_out_WDATA <= p_1_fu_987_p1;
            elsif ((ap_const_boolean_1 = ap_condition_753)) then 
                gmem_out_WDATA <= data_V_load_reg_1169;
            else 
                gmem_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_out_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_15_reg_1145_pp1_iter1_reg, ap_CS_fsm_state27, ap_block_pp1_stage0_01001, ap_reg_ioackin_gmem_out_WREADY)
    begin
        if ((((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1)))) then 
            gmem_out_WVALID <= ap_const_logic_1;
        else 
            gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_blk_n_AR_assign_proc : process(m_axi_gmem_out_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_out_blk_n_AR <= m_axi_gmem_out_ARREADY;
        else 
            gmem_out_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_AW_assign_proc : process(m_axi_gmem_out_AWREADY, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_15_reg_1145, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_15_reg_1145 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            gmem_out_blk_n_AW <= m_axi_gmem_out_AWREADY;
        else 
            gmem_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_B_assign_proc : process(m_axi_gmem_out_BVALID, ap_block_pp1_stage0, ap_enable_reg_pp1_iter7, tmp_15_reg_1145_pp1_iter6_reg, ap_CS_fsm_state32, or_cond_reg_1108)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (or_cond_reg_1108 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            gmem_out_blk_n_B <= m_axi_gmem_out_BVALID;
        else 
            gmem_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_R_assign_proc : process(m_axi_gmem_out_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem_out_blk_n_R <= m_axi_gmem_out_RVALID;
        else 
            gmem_out_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_W_assign_proc : process(m_axi_gmem_out_WREADY, ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, tmp_15_reg_1145_pp1_iter1_reg, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_15_reg_1145_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            gmem_out_blk_n_W <= m_axi_gmem_out_WREADY;
        else 
            gmem_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    h2_cast_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_525),16));
    h_1_fu_772_p2 <= std_logic_vector(unsigned(h_reg_412) + unsigned(ap_const_lv15_1));
    h_2_fu_910_p2 <= std_logic_vector(unsigned(h2_reg_525) + unsigned(ap_const_lv15_1));

    head_address0_assign_proc : process(ap_CS_fsm_state12, head_addr_1_reg_1076, ap_CS_fsm_state25, ap_CS_fsm_state33, tmp_9_fu_666_p1, tmp_5_fu_1004_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            head_address0 <= tmp_5_fu_1004_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            head_address0 <= head_addr_1_reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            head_address0 <= tmp_9_fu_666_p1(3 - 1 downto 0);
        else 
            head_address0 <= "XXX";
        end if; 
    end process;


    head_ce0_assign_proc : process(ap_CS_fsm_state12, gmem_out_RVALID, ap_CS_fsm_state25, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            head_ce0 <= ap_const_logic_1;
        else 
            head_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    head_d0_assign_proc : process(val_assign_1_reg_514, ap_CS_fsm_state25, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            head_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            head_d0 <= val_assign_1_reg_514;
        else 
            head_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    head_we0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state33, exitcond_fu_992_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_992_p2 = ap_const_lv1_0)))) then 
            head_we0 <= ap_const_logic_1;
        else 
            head_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hi_p_V_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_hi_phi_fu_494_p12),128));
    i_1_fu_596_p2 <= std_logic_vector(unsigned(i_reg_376) + unsigned(ap_const_lv3_1));
    i_2_fu_998_p2 <= std_logic_vector(unsigned(i1_reg_536) + unsigned(ap_const_lv3_1));
    idx_cast5_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_1055),17));
    idx_cast_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_625_p5),13));
    idx_fu_625_p5 <= (((stride_reg_400 & ap_const_lv5_0) & stride_reg_400) & ap_const_lv1_0);

    local_words_address0_assign_proc : process(ap_CS_fsm_state12, tmp_2_reg_1034, ap_CS_fsm_state3, tmp_9_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_words_address0 <= tmp_9_fu_666_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_words_address0 <= tmp_2_reg_1034(3 - 1 downto 0);
        else 
            local_words_address0 <= "XXX";
        end if; 
    end process;


    local_words_ce0_assign_proc : process(ap_CS_fsm_state12, gmem_out_RVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            local_words_ce0 <= ap_const_logic_1;
        else 
            local_words_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_words_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_words_we0 <= ap_const_logic_1;
        else 
            local_words_we0 <= ap_const_logic_0;
        end if; 
    end process;

    op2_assign_fu_859_p5 <= t_V_reg_480(2 - 1 downto 0);
    or_cond_fu_725_p2 <= (tmp_7_fu_719_p2 or tmp_6_fu_709_p2);
    output_V2_sum3_cast_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum3_reg_1180),64));
    output_V2_sum3_fu_972_p2 <= std_logic_vector(unsigned(tmp_27_cast_fu_968_p1) + unsigned(tmp_28_cast6_reg_1015));
    output_V2_sum4_cast_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum4_reg_1159),64));
    output_V2_sum4_fu_934_p2 <= std_logic_vector(unsigned(tmp_28_cast6_reg_1015) + unsigned(tmp_22_cast_fu_925_p1));
    output_V2_sum_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum_reg_1065),64));
    output_V2_sum_fu_651_p2 <= std_logic_vector(unsigned(tmp_28_cast6_reg_1015) + unsigned(tmp_3_cast_fu_647_p1));
    p_1_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_1_reg_514),128));
    p_neg150_pn_fu_749_p3 <= 
        p_neg_fu_737_p2 when (tmp_3_fu_731_p2(0) = '1') else 
        tmp_10_fu_743_p2;
    p_neg_fu_737_p2 <= (head_q0 xor ap_const_lv16_FFFF);
    part_V_1_fu_883_p2 <= (r_V_fu_877_p2 or p_s_reg_469);
    part_V_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_low_phi_fu_427_p12),128));
    r_V_fu_877_p2 <= std_logic_vector(shift_left(unsigned(hi_p_V_fu_851_p1),to_integer(unsigned('0' & tmp_25_fu_873_p1(31-1 downto 0)))));
    stream_head_1_fu_943_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp_30_fu_939_p1));
    stream_head_2_cast_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_head_1_fu_943_p2),16));
    stream_tail_fu_672_p1 <= gmem_out_RDATA(16 - 1 downto 0);
    stride_1_fu_619_p2 <= std_logic_vector(unsigned(stride_reg_400) + unsigned(ap_const_lv3_1));
    tmp_10_cast3_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_reg_1081),17));
    tmp_10_cast_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_reg_1081),18));
    tmp_10_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv16_1FF) - unsigned(head_q0));
    tmp_11_fu_767_p2 <= "1" when (signed(bytes_to_write_2_fu_762_p1) < signed(bytes_to_write_reg_1112)) else "0";
    tmp_12_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast4_fu_693_p2),17));
    tmp_13_fu_846_p2 <= "1" when (unsigned(tmp_21_cast_fu_842_p1) < unsigned(words_reg_1103)) else "0";
    tmp_14_fu_683_p1 <= head_q0(9 - 1 downto 0);
    tmp_15_fu_904_p2 <= "1" when (signed(h2_cast_fu_900_p1) < signed(bytes_to_write_1_reg_459)) else "0";
    tmp_18_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_412),64));
    tmp_1_fu_590_p2 <= "1" when (i_reg_376 = ap_const_lv3_6) else "0";
    tmp_20_fu_920_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_916_p1) + unsigned(idx_cast5_reg_1093));
    tmp_21_cast_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_480),8));
    tmp_21_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_525),64));
    tmp_22_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_920_p2),29));
    tmp_23_fu_963_p2 <= std_logic_vector(unsigned(idx_cast_reg_1060) + unsigned(ap_const_lv13_201));
    tmp_25_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_859_p6),128));
    tmp_27_cast_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_963_p2),29));
    tmp_28_cast6_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_572_p4),29));
    tmp_28_cast_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_val_assign_1_phi_fu_518_p4),17));
    tmp_2_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_376),64));
    tmp_30_fu_939_p1 <= ap_phi_mux_val_assign_1_phi_fu_518_p4(9 - 1 downto 0);
    tmp_3_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_641_p2),29));
    tmp_3_fu_731_p2 <= "1" when (unsigned(tmp_8_fu_687_p2) < unsigned(tmp_10_cast3_fu_703_p1)) else "0";
    tmp_4_fu_607_p2 <= "1" when (reset = ap_const_lv8_1) else "0";
    tmp_5_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_536),64));
    tmp_6_cast_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(head_q0),17));
    tmp_6_fu_709_p2 <= "1" when (tmp_8_cast_fu_699_p1 = tmp_10_cast_fu_706_p1) else "0";
    tmp_7_fu_719_p2 <= "1" when (tmp_12_cast_fu_715_p1 = tmp_10_cast3_fu_703_p1) else "0";
    tmp_8_cast4_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp_14_fu_683_p1));
    tmp_8_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_687_p2),18));
    tmp_8_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(tmp_6_cast_fu_679_p1));
    tmp_9_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_reg_400),64));
    tmp_fu_572_p4 <= output_V(31 downto 4);
    tmp_s_fu_641_p2 <= std_logic_vector(unsigned(ap_const_lv13_200) + unsigned(idx_cast_fu_637_p1));
    useable_words_address0 <= tmp_2_fu_602_p1(3 - 1 downto 0);

    useable_words_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            useable_words_ce0 <= ap_const_logic_1;
        else 
            useable_words_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    word_V_fu_889_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(t_V_reg_480));
end behav;
